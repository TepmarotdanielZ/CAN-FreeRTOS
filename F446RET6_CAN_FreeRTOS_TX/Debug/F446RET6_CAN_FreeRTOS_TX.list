
F446RET6_CAN_FreeRTOS_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b94  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  08009d64  08009d64  00019d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a094  0800a094  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800a094  0800a094  0001a094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a09c  0800a09c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a09c  0800a09c  0001a09c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0a0  0800a0a0  0001a0a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800a0a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c94  20000078  0800a11c  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004d0c  0800a11c  00024d0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b082  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004282  00000000  00000000  0003b16d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018e0  00000000  00000000  0003f3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001336  00000000  00000000  00040cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000265ef  00000000  00000000  00042006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c0e5  00000000  00000000  000685f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0c5d  00000000  00000000  000846da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007230  00000000  00000000  00165338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0016c568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009d4c 	.word	0x08009d4c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08009d4c 	.word	0x08009d4c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2uiz>:
 8000b5c:	004a      	lsls	r2, r1, #1
 8000b5e:	d211      	bcs.n	8000b84 <__aeabi_d2uiz+0x28>
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d211      	bcs.n	8000b8a <__aeabi_d2uiz+0x2e>
 8000b66:	d50d      	bpl.n	8000b84 <__aeabi_d2uiz+0x28>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d40e      	bmi.n	8000b90 <__aeabi_d2uiz+0x34>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8e:	d102      	bne.n	8000b96 <__aeabi_d2uiz+0x3a>
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b94:	4770      	bx	lr
 8000b96:	f04f 0000 	mov.w	r0, #0
 8000b9a:	4770      	bx	lr

08000b9c <__aeabi_d2f>:
 8000b9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba4:	bf24      	itt	cs
 8000ba6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000baa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bae:	d90d      	bls.n	8000bcc <__aeabi_d2f+0x30>
 8000bb0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bbc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc4:	bf08      	it	eq
 8000bc6:	f020 0001 	biceq.w	r0, r0, #1
 8000bca:	4770      	bx	lr
 8000bcc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd0:	d121      	bne.n	8000c16 <__aeabi_d2f+0x7a>
 8000bd2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd6:	bfbc      	itt	lt
 8000bd8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	4770      	bxlt	lr
 8000bde:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be6:	f1c2 0218 	rsb	r2, r2, #24
 8000bea:	f1c2 0c20 	rsb	ip, r2, #32
 8000bee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf6:	bf18      	it	ne
 8000bf8:	f040 0001 	orrne.w	r0, r0, #1
 8000bfc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c08:	ea40 000c 	orr.w	r0, r0, ip
 8000c0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c14:	e7cc      	b.n	8000bb0 <__aeabi_d2f+0x14>
 8000c16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1a:	d107      	bne.n	8000c2c <__aeabi_d2f+0x90>
 8000c1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c20:	bf1e      	ittt	ne
 8000c22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2a:	4770      	bxne	lr
 8000c2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop

08000c3c <__aeabi_uldivmod>:
 8000c3c:	b953      	cbnz	r3, 8000c54 <__aeabi_uldivmod+0x18>
 8000c3e:	b94a      	cbnz	r2, 8000c54 <__aeabi_uldivmod+0x18>
 8000c40:	2900      	cmp	r1, #0
 8000c42:	bf08      	it	eq
 8000c44:	2800      	cmpeq	r0, #0
 8000c46:	bf1c      	itt	ne
 8000c48:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c4c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c50:	f000 b970 	b.w	8000f34 <__aeabi_idiv0>
 8000c54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c5c:	f000 f806 	bl	8000c6c <__udivmoddi4>
 8000c60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c68:	b004      	add	sp, #16
 8000c6a:	4770      	bx	lr

08000c6c <__udivmoddi4>:
 8000c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c70:	9e08      	ldr	r6, [sp, #32]
 8000c72:	460d      	mov	r5, r1
 8000c74:	4604      	mov	r4, r0
 8000c76:	460f      	mov	r7, r1
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d14a      	bne.n	8000d12 <__udivmoddi4+0xa6>
 8000c7c:	428a      	cmp	r2, r1
 8000c7e:	4694      	mov	ip, r2
 8000c80:	d965      	bls.n	8000d4e <__udivmoddi4+0xe2>
 8000c82:	fab2 f382 	clz	r3, r2
 8000c86:	b143      	cbz	r3, 8000c9a <__udivmoddi4+0x2e>
 8000c88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c8c:	f1c3 0220 	rsb	r2, r3, #32
 8000c90:	409f      	lsls	r7, r3
 8000c92:	fa20 f202 	lsr.w	r2, r0, r2
 8000c96:	4317      	orrs	r7, r2
 8000c98:	409c      	lsls	r4, r3
 8000c9a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c9e:	fa1f f58c 	uxth.w	r5, ip
 8000ca2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ca6:	0c22      	lsrs	r2, r4, #16
 8000ca8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cac:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cb0:	fb01 f005 	mul.w	r0, r1, r5
 8000cb4:	4290      	cmp	r0, r2
 8000cb6:	d90a      	bls.n	8000cce <__udivmoddi4+0x62>
 8000cb8:	eb1c 0202 	adds.w	r2, ip, r2
 8000cbc:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cc0:	f080 811c 	bcs.w	8000efc <__udivmoddi4+0x290>
 8000cc4:	4290      	cmp	r0, r2
 8000cc6:	f240 8119 	bls.w	8000efc <__udivmoddi4+0x290>
 8000cca:	3902      	subs	r1, #2
 8000ccc:	4462      	add	r2, ip
 8000cce:	1a12      	subs	r2, r2, r0
 8000cd0:	b2a4      	uxth	r4, r4
 8000cd2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cd6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cda:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cde:	fb00 f505 	mul.w	r5, r0, r5
 8000ce2:	42a5      	cmp	r5, r4
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x90>
 8000ce6:	eb1c 0404 	adds.w	r4, ip, r4
 8000cea:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cee:	f080 8107 	bcs.w	8000f00 <__udivmoddi4+0x294>
 8000cf2:	42a5      	cmp	r5, r4
 8000cf4:	f240 8104 	bls.w	8000f00 <__udivmoddi4+0x294>
 8000cf8:	4464      	add	r4, ip
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d00:	1b64      	subs	r4, r4, r5
 8000d02:	2100      	movs	r1, #0
 8000d04:	b11e      	cbz	r6, 8000d0e <__udivmoddi4+0xa2>
 8000d06:	40dc      	lsrs	r4, r3
 8000d08:	2300      	movs	r3, #0
 8000d0a:	e9c6 4300 	strd	r4, r3, [r6]
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0xbc>
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	f000 80ed 	beq.w	8000ef6 <__udivmoddi4+0x28a>
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	e9c6 0500 	strd	r0, r5, [r6]
 8000d22:	4608      	mov	r0, r1
 8000d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d28:	fab3 f183 	clz	r1, r3
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	d149      	bne.n	8000dc4 <__udivmoddi4+0x158>
 8000d30:	42ab      	cmp	r3, r5
 8000d32:	d302      	bcc.n	8000d3a <__udivmoddi4+0xce>
 8000d34:	4282      	cmp	r2, r0
 8000d36:	f200 80f8 	bhi.w	8000f2a <__udivmoddi4+0x2be>
 8000d3a:	1a84      	subs	r4, r0, r2
 8000d3c:	eb65 0203 	sbc.w	r2, r5, r3
 8000d40:	2001      	movs	r0, #1
 8000d42:	4617      	mov	r7, r2
 8000d44:	2e00      	cmp	r6, #0
 8000d46:	d0e2      	beq.n	8000d0e <__udivmoddi4+0xa2>
 8000d48:	e9c6 4700 	strd	r4, r7, [r6]
 8000d4c:	e7df      	b.n	8000d0e <__udivmoddi4+0xa2>
 8000d4e:	b902      	cbnz	r2, 8000d52 <__udivmoddi4+0xe6>
 8000d50:	deff      	udf	#255	; 0xff
 8000d52:	fab2 f382 	clz	r3, r2
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x210>
 8000d5c:	1a8a      	subs	r2, r1, r2
 8000d5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	2101      	movs	r1, #1
 8000d68:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d6c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d70:	0c22      	lsrs	r2, r4, #16
 8000d72:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d76:	fb0e f005 	mul.w	r0, lr, r5
 8000d7a:	4290      	cmp	r0, r2
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x124>
 8000d7e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d82:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d86:	d202      	bcs.n	8000d8e <__udivmoddi4+0x122>
 8000d88:	4290      	cmp	r0, r2
 8000d8a:	f200 80cb 	bhi.w	8000f24 <__udivmoddi4+0x2b8>
 8000d8e:	4645      	mov	r5, r8
 8000d90:	1a12      	subs	r2, r2, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d98:	fb07 2210 	mls	r2, r7, r0, r2
 8000d9c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da0:	fb0e fe00 	mul.w	lr, lr, r0
 8000da4:	45a6      	cmp	lr, r4
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x14e>
 8000da8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dac:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000db0:	d202      	bcs.n	8000db8 <__udivmoddi4+0x14c>
 8000db2:	45a6      	cmp	lr, r4
 8000db4:	f200 80bb 	bhi.w	8000f2e <__udivmoddi4+0x2c2>
 8000db8:	4610      	mov	r0, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dc2:	e79f      	b.n	8000d04 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0720 	rsb	r7, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dce:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dd2:	fa05 f401 	lsl.w	r4, r5, r1
 8000dd6:	fa20 f307 	lsr.w	r3, r0, r7
 8000dda:	40fd      	lsrs	r5, r7
 8000ddc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000de6:	fa1f fe8c 	uxth.w	lr, ip
 8000dea:	fb09 5518 	mls	r5, r9, r8, r5
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000df4:	fb08 f50e 	mul.w	r5, r8, lr
 8000df8:	42a5      	cmp	r5, r4
 8000dfa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfe:	fa00 f001 	lsl.w	r0, r0, r1
 8000e02:	d90b      	bls.n	8000e1c <__udivmoddi4+0x1b0>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e0c:	f080 8088 	bcs.w	8000f20 <__udivmoddi4+0x2b4>
 8000e10:	42a5      	cmp	r5, r4
 8000e12:	f240 8085 	bls.w	8000f20 <__udivmoddi4+0x2b4>
 8000e16:	f1a8 0802 	sub.w	r8, r8, #2
 8000e1a:	4464      	add	r4, ip
 8000e1c:	1b64      	subs	r4, r4, r5
 8000e1e:	b29d      	uxth	r5, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e2c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e30:	45a6      	cmp	lr, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1da>
 8000e34:	eb1c 0404 	adds.w	r4, ip, r4
 8000e38:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e3c:	d26c      	bcs.n	8000f18 <__udivmoddi4+0x2ac>
 8000e3e:	45a6      	cmp	lr, r4
 8000e40:	d96a      	bls.n	8000f18 <__udivmoddi4+0x2ac>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	4464      	add	r4, ip
 8000e46:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e4a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e4e:	eba4 040e 	sub.w	r4, r4, lr
 8000e52:	42ac      	cmp	r4, r5
 8000e54:	46c8      	mov	r8, r9
 8000e56:	46ae      	mov	lr, r5
 8000e58:	d356      	bcc.n	8000f08 <__udivmoddi4+0x29c>
 8000e5a:	d053      	beq.n	8000f04 <__udivmoddi4+0x298>
 8000e5c:	b156      	cbz	r6, 8000e74 <__udivmoddi4+0x208>
 8000e5e:	ebb0 0208 	subs.w	r2, r0, r8
 8000e62:	eb64 040e 	sbc.w	r4, r4, lr
 8000e66:	fa04 f707 	lsl.w	r7, r4, r7
 8000e6a:	40ca      	lsrs	r2, r1
 8000e6c:	40cc      	lsrs	r4, r1
 8000e6e:	4317      	orrs	r7, r2
 8000e70:	e9c6 7400 	strd	r7, r4, [r6]
 8000e74:	4618      	mov	r0, r3
 8000e76:	2100      	movs	r1, #0
 8000e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7c:	f1c3 0120 	rsb	r1, r3, #32
 8000e80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e84:	fa20 f201 	lsr.w	r2, r0, r1
 8000e88:	fa25 f101 	lsr.w	r1, r5, r1
 8000e8c:	409d      	lsls	r5, r3
 8000e8e:	432a      	orrs	r2, r5
 8000e90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e94:	fa1f fe8c 	uxth.w	lr, ip
 8000e98:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e9c:	fb07 1510 	mls	r5, r7, r0, r1
 8000ea0:	0c11      	lsrs	r1, r2, #16
 8000ea2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ea6:	fb00 f50e 	mul.w	r5, r0, lr
 8000eaa:	428d      	cmp	r5, r1
 8000eac:	fa04 f403 	lsl.w	r4, r4, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x258>
 8000eb2:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000eba:	d22f      	bcs.n	8000f1c <__udivmoddi4+0x2b0>
 8000ebc:	428d      	cmp	r5, r1
 8000ebe:	d92d      	bls.n	8000f1c <__udivmoddi4+0x2b0>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4461      	add	r1, ip
 8000ec4:	1b49      	subs	r1, r1, r5
 8000ec6:	b292      	uxth	r2, r2
 8000ec8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ecc:	fb07 1115 	mls	r1, r7, r5, r1
 8000ed0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ed4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ed8:	4291      	cmp	r1, r2
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x282>
 8000edc:	eb1c 0202 	adds.w	r2, ip, r2
 8000ee0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ee4:	d216      	bcs.n	8000f14 <__udivmoddi4+0x2a8>
 8000ee6:	4291      	cmp	r1, r2
 8000ee8:	d914      	bls.n	8000f14 <__udivmoddi4+0x2a8>
 8000eea:	3d02      	subs	r5, #2
 8000eec:	4462      	add	r2, ip
 8000eee:	1a52      	subs	r2, r2, r1
 8000ef0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ef4:	e738      	b.n	8000d68 <__udivmoddi4+0xfc>
 8000ef6:	4631      	mov	r1, r6
 8000ef8:	4630      	mov	r0, r6
 8000efa:	e708      	b.n	8000d0e <__udivmoddi4+0xa2>
 8000efc:	4639      	mov	r1, r7
 8000efe:	e6e6      	b.n	8000cce <__udivmoddi4+0x62>
 8000f00:	4610      	mov	r0, r2
 8000f02:	e6fb      	b.n	8000cfc <__udivmoddi4+0x90>
 8000f04:	4548      	cmp	r0, r9
 8000f06:	d2a9      	bcs.n	8000e5c <__udivmoddi4+0x1f0>
 8000f08:	ebb9 0802 	subs.w	r8, r9, r2
 8000f0c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f10:	3b01      	subs	r3, #1
 8000f12:	e7a3      	b.n	8000e5c <__udivmoddi4+0x1f0>
 8000f14:	4645      	mov	r5, r8
 8000f16:	e7ea      	b.n	8000eee <__udivmoddi4+0x282>
 8000f18:	462b      	mov	r3, r5
 8000f1a:	e794      	b.n	8000e46 <__udivmoddi4+0x1da>
 8000f1c:	4640      	mov	r0, r8
 8000f1e:	e7d1      	b.n	8000ec4 <__udivmoddi4+0x258>
 8000f20:	46d0      	mov	r8, sl
 8000f22:	e77b      	b.n	8000e1c <__udivmoddi4+0x1b0>
 8000f24:	3d02      	subs	r5, #2
 8000f26:	4462      	add	r2, ip
 8000f28:	e732      	b.n	8000d90 <__udivmoddi4+0x124>
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	e70a      	b.n	8000d44 <__udivmoddi4+0xd8>
 8000f2e:	4464      	add	r4, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e742      	b.n	8000dba <__udivmoddi4+0x14e>

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14(1<<14)

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	4619      	mov	r1, r3
 8000f46:	2007      	movs	r0, #7
 8000f48:	f000 fae8 	bl	800151c <bno055_writeData>
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	4619      	mov	r1, r3
 8000f62:	203d      	movs	r0, #61	; 0x3d
 8000f64:	f000 fada 	bl	800151c <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d103      	bne.n	8000f76 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000f6e:	2013      	movs	r0, #19
 8000f70:	f000 fac8 	bl	8001504 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8000f74:	e002      	b.n	8000f7c <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8000f76:	2007      	movs	r0, #7
 8000f78:	f000 fac4 	bl	8001504 <bno055_delay>
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f7ff ffe3 	bl	8000f54 <bno055_setOperationMode>
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8000f92:	b580      	push	{r7, lr}
 8000f94:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000f96:	200c      	movs	r0, #12
 8000f98:	f7ff ffdc 	bl	8000f54 <bno055_setOperationMode>
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000fa4:	2120      	movs	r1, #32
 8000fa6:	203f      	movs	r0, #63	; 0x3f
 8000fa8:	f000 fab8 	bl	800151c <bno055_writeData>
  bno055_delay(700);
 8000fac:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000fb0:	f000 faa8 	bl	8001504 <bno055_delay>
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
  bno055_reset();
 8000fbe:	f7ff ffef 	bl	8000fa0 <bno055_reset>

  uint8_t id = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8000fc6:	1dfb      	adds	r3, r7, #7
 8000fc8:	2201      	movs	r2, #1
 8000fca:	4619      	mov	r1, r3
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f000 fb91 	bl	80016f4 <bno055_readData>
  if (id != BNO055_ID) {
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2ba0      	cmp	r3, #160	; 0xa0
 8000fd6:	d004      	beq.n	8000fe2 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4809      	ldr	r0, [pc, #36]	; (8001004 <bno055_setup+0x4c>)
 8000fde:	f007 ffd7 	bl	8008f90 <iprintf>
  }
  bno055_setPage(0);
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f7ff ffa8 	bl	8000f38 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8000fe8:	2100      	movs	r1, #0
 8000fea:	203f      	movs	r0, #63	; 0x3f
 8000fec:	f000 fa96 	bl	800151c <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8000ff0:	f7ff ffc8 	bl	8000f84 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8000ff4:	200a      	movs	r0, #10
 8000ff6:	f000 fa85 	bl	8001504 <bno055_delay>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	08009d64 	.word	0x08009d64

08001008 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8001008:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800100c:	b09e      	sub	sp, #120	; 0x78
 800100e:	af00      	add	r7, sp, #0
 8001010:	4603      	mov	r3, r0
 8001012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 8001016:	2000      	movs	r0, #0
 8001018:	f7ff ff8e 	bl	8000f38 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 800101c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001020:	2b20      	cmp	r3, #32
 8001022:	d108      	bne.n	8001036 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8001024:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800102c:	2208      	movs	r2, #8
 800102e:	4618      	mov	r0, r3
 8001030:	f000 fb60 	bl	80016f4 <bno055_readData>
 8001034:	e007      	b.n	8001046 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8001036:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800103a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800103e:	2206      	movs	r2, #6
 8001040:	4618      	mov	r0, r3
 8001042:	f000 fb57 	bl	80016f4 <bno055_readData>

  double scale = 1;
 8001046:	f04f 0200 	mov.w	r2, #0
 800104a:	4b8b      	ldr	r3, [pc, #556]	; (8001278 <bno055_getVector+0x270>)
 800104c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8001050:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001054:	2b0e      	cmp	r3, #14
 8001056:	d109      	bne.n	800106c <bno055_getVector+0x64>
    scale = magScale;
 8001058:	4b88      	ldr	r3, [pc, #544]	; (800127c <bno055_getVector+0x274>)
 800105a:	881b      	ldrh	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fa69 	bl	8000534 <__aeabi_ui2d>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800106a:	e03e      	b.n	80010ea <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 800106c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001070:	2b08      	cmp	r3, #8
 8001072:	d007      	beq.n	8001084 <bno055_getVector+0x7c>
 8001074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001078:	2b28      	cmp	r3, #40	; 0x28
 800107a:	d003      	beq.n	8001084 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 800107c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001080:	2b2e      	cmp	r3, #46	; 0x2e
 8001082:	d109      	bne.n	8001098 <bno055_getVector+0x90>
    scale = accelScale;
 8001084:	4b7e      	ldr	r3, [pc, #504]	; (8001280 <bno055_getVector+0x278>)
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fa53 	bl	8000534 <__aeabi_ui2d>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001096:	e028      	b.n	80010ea <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8001098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800109c:	2b14      	cmp	r3, #20
 800109e:	d109      	bne.n	80010b4 <bno055_getVector+0xac>
    scale = angularRateScale;
 80010a0:	4b78      	ldr	r3, [pc, #480]	; (8001284 <bno055_getVector+0x27c>)
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fa45 	bl	8000534 <__aeabi_ui2d>
 80010aa:	4602      	mov	r2, r0
 80010ac:	460b      	mov	r3, r1
 80010ae:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80010b2:	e01a      	b.n	80010ea <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 80010b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010b8:	2b1a      	cmp	r3, #26
 80010ba:	d109      	bne.n	80010d0 <bno055_getVector+0xc8>
    scale = eulerScale;
 80010bc:	4b72      	ldr	r3, [pc, #456]	; (8001288 <bno055_getVector+0x280>)
 80010be:	881b      	ldrh	r3, [r3, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fa37 	bl	8000534 <__aeabi_ui2d>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80010ce:	e00c      	b.n	80010ea <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 80010d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010d4:	2b20      	cmp	r3, #32
 80010d6:	d108      	bne.n	80010ea <bno055_getVector+0xe2>
    scale = quaScale;
 80010d8:	4b6c      	ldr	r3, [pc, #432]	; (800128c <bno055_getVector+0x284>)
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fa29 	bl	8000534 <__aeabi_ui2d>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 80010ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ee:	2220      	movs	r2, #32
 80010f0:	2100      	movs	r1, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f008 f892 	bl	800921c <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 80010f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010fc:	2b20      	cmp	r3, #32
 80010fe:	d150      	bne.n	80011a2 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001100:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001104:	021b      	lsls	r3, r3, #8
 8001106:	b21a      	sxth	r2, r3
 8001108:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800110c:	b21b      	sxth	r3, r3
 800110e:	4313      	orrs	r3, r2
 8001110:	b21b      	sxth	r3, r3
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fa1e 	bl	8000554 <__aeabi_i2d>
 8001118:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800111c:	f7ff fbae 	bl	800087c <__aeabi_ddiv>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001128:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	b21a      	sxth	r2, r3
 8001130:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001134:	b21b      	sxth	r3, r3
 8001136:	4313      	orrs	r3, r2
 8001138:	b21b      	sxth	r3, r3
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fa0a 	bl	8000554 <__aeabi_i2d>
 8001140:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001144:	f7ff fb9a 	bl	800087c <__aeabi_ddiv>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001150:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001154:	021b      	lsls	r3, r3, #8
 8001156:	b21a      	sxth	r2, r3
 8001158:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800115c:	b21b      	sxth	r3, r3
 800115e:	4313      	orrs	r3, r2
 8001160:	b21b      	sxth	r3, r3
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff f9f6 	bl	8000554 <__aeabi_i2d>
 8001168:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800116c:	f7ff fb86 	bl	800087c <__aeabi_ddiv>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8001178:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800117c:	021b      	lsls	r3, r3, #8
 800117e:	b21a      	sxth	r2, r3
 8001180:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001184:	b21b      	sxth	r3, r3
 8001186:	4313      	orrs	r3, r2
 8001188:	b21b      	sxth	r3, r3
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f9e2 	bl	8000554 <__aeabi_i2d>
 8001190:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001194:	f7ff fb72 	bl	800087c <__aeabi_ddiv>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80011a0:	e03b      	b.n	800121a <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80011a2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	b21a      	sxth	r2, r3
 80011aa:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80011ae:	b21b      	sxth	r3, r3
 80011b0:	4313      	orrs	r3, r2
 80011b2:	b21b      	sxth	r3, r3
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f9cd 	bl	8000554 <__aeabi_i2d>
 80011ba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80011be:	f7ff fb5d 	bl	800087c <__aeabi_ddiv>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80011ca:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80011ce:	021b      	lsls	r3, r3, #8
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80011d6:	b21b      	sxth	r3, r3
 80011d8:	4313      	orrs	r3, r2
 80011da:	b21b      	sxth	r3, r3
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff f9b9 	bl	8000554 <__aeabi_i2d>
 80011e2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80011e6:	f7ff fb49 	bl	800087c <__aeabi_ddiv>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80011f2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80011f6:	021b      	lsls	r3, r3, #8
 80011f8:	b21a      	sxth	r2, r3
 80011fa:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80011fe:	b21b      	sxth	r3, r3
 8001200:	4313      	orrs	r3, r2
 8001202:	b21b      	sxth	r3, r3
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f9a5 	bl	8000554 <__aeabi_i2d>
 800120a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800120e:	f7ff fb35 	bl	800087c <__aeabi_ddiv>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 800121a:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800121e:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8001222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001226:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800122a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800122e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001232:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001236:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800123a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800123e:	ec49 8b14 	vmov	d4, r8, r9
 8001242:	ec45 4b15 	vmov	d5, r4, r5
 8001246:	ec41 0b16 	vmov	d6, r0, r1
 800124a:	ec43 2b17 	vmov	d7, r2, r3
}
 800124e:	eeb0 0a44 	vmov.f32	s0, s8
 8001252:	eef0 0a64 	vmov.f32	s1, s9
 8001256:	eeb0 1a45 	vmov.f32	s2, s10
 800125a:	eef0 1a65 	vmov.f32	s3, s11
 800125e:	eeb0 2a46 	vmov.f32	s4, s12
 8001262:	eef0 2a66 	vmov.f32	s5, s13
 8001266:	eeb0 3a47 	vmov.f32	s6, s14
 800126a:	eef0 3a67 	vmov.f32	s7, s15
 800126e:	3778      	adds	r7, #120	; 0x78
 8001270:	46bd      	mov	sp, r7
 8001272:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001276:	bf00      	nop
 8001278:	3ff00000 	.word	0x3ff00000
 800127c:	20000006 	.word	0x20000006
 8001280:	20000000 	.word	0x20000000
 8001284:	20000002 	.word	0x20000002
 8001288:	20000004 	.word	0x20000004
 800128c:	20000008 	.word	0x20000008

08001290 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 8001290:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001294:	b090      	sub	sp, #64	; 0x40
 8001296:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8001298:	201a      	movs	r0, #26
 800129a:	f7ff feb5 	bl	8001008 <bno055_getVector>
 800129e:	eeb0 4a40 	vmov.f32	s8, s0
 80012a2:	eef0 4a60 	vmov.f32	s9, s1
 80012a6:	eeb0 5a41 	vmov.f32	s10, s2
 80012aa:	eef0 5a61 	vmov.f32	s11, s3
 80012ae:	eeb0 6a42 	vmov.f32	s12, s4
 80012b2:	eef0 6a62 	vmov.f32	s13, s5
 80012b6:	eeb0 7a43 	vmov.f32	s14, s6
 80012ba:	eef0 7a63 	vmov.f32	s15, s7
 80012be:	ed87 4b08 	vstr	d4, [r7, #32]
 80012c2:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 80012c6:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 80012ca:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 80012ce:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80012d2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80012d6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80012da:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80012de:	ec49 8b14 	vmov	d4, r8, r9
 80012e2:	ec45 4b15 	vmov	d5, r4, r5
 80012e6:	ec41 0b16 	vmov	d6, r0, r1
 80012ea:	ec43 2b17 	vmov	d7, r2, r3
}
 80012ee:	eeb0 0a44 	vmov.f32	s0, s8
 80012f2:	eef0 0a64 	vmov.f32	s1, s9
 80012f6:	eeb0 1a45 	vmov.f32	s2, s10
 80012fa:	eef0 1a65 	vmov.f32	s3, s11
 80012fe:	eeb0 2a46 	vmov.f32	s4, s12
 8001302:	eef0 2a66 	vmov.f32	s5, s13
 8001306:	eeb0 3a47 	vmov.f32	s6, s14
 800130a:	eef0 3a67 	vmov.f32	s7, s15
 800130e:	3740      	adds	r7, #64	; 0x40
 8001310:	46bd      	mov	sp, r7
 8001312:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001316 <bno055_getVectorQuaternion>:
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
}
bno055_vector_t bno055_getVectorGravity() {
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
}
bno055_vector_t bno055_getVectorQuaternion() {
 8001316:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800131a:	b090      	sub	sp, #64	; 0x40
 800131c:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 800131e:	2020      	movs	r0, #32
 8001320:	f7ff fe72 	bl	8001008 <bno055_getVector>
 8001324:	eeb0 4a40 	vmov.f32	s8, s0
 8001328:	eef0 4a60 	vmov.f32	s9, s1
 800132c:	eeb0 5a41 	vmov.f32	s10, s2
 8001330:	eef0 5a61 	vmov.f32	s11, s3
 8001334:	eeb0 6a42 	vmov.f32	s12, s4
 8001338:	eef0 6a62 	vmov.f32	s13, s5
 800133c:	eeb0 7a43 	vmov.f32	s14, s6
 8001340:	eef0 7a63 	vmov.f32	s15, s7
 8001344:	ed87 4b08 	vstr	d4, [r7, #32]
 8001348:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 800134c:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001350:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8001354:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001358:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800135c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001360:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001364:	ec49 8b14 	vmov	d4, r8, r9
 8001368:	ec45 4b15 	vmov	d5, r4, r5
 800136c:	ec41 0b16 	vmov	d6, r0, r1
 8001370:	ec43 2b17 	vmov	d7, r2, r3
}
 8001374:	eeb0 0a44 	vmov.f32	s0, s8
 8001378:	eef0 0a64 	vmov.f32	s1, s9
 800137c:	eeb0 1a45 	vmov.f32	s2, s10
 8001380:	eef0 1a65 	vmov.f32	s3, s11
 8001384:	eeb0 2a46 	vmov.f32	s4, s12
 8001388:	eef0 2a66 	vmov.f32	s5, s13
 800138c:	eeb0 3a47 	vmov.f32	s6, s14
 8001390:	eef0 3a67 	vmov.f32	s7, s15
 8001394:	3740      	adds	r7, #64	; 0x40
 8001396:	46bd      	mov	sp, r7
 8001398:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800139c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	; 0x28
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80013a2:	4b26      	ldr	r3, [pc, #152]	; (800143c <MX_CAN1_Init+0xa0>)
 80013a4:	4a26      	ldr	r2, [pc, #152]	; (8001440 <MX_CAN1_Init+0xa4>)
 80013a6:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 80013a8:	4b24      	ldr	r3, [pc, #144]	; (800143c <MX_CAN1_Init+0xa0>)
 80013aa:	2209      	movs	r2, #9
 80013ac:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80013ae:	4b23      	ldr	r3, [pc, #140]	; (800143c <MX_CAN1_Init+0xa0>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013b4:	4b21      	ldr	r3, [pc, #132]	; (800143c <MX_CAN1_Init+0xa0>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80013ba:	4b20      	ldr	r3, [pc, #128]	; (800143c <MX_CAN1_Init+0xa0>)
 80013bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013c0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80013c2:	4b1e      	ldr	r3, [pc, #120]	; (800143c <MX_CAN1_Init+0xa0>)
 80013c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80013c8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80013ca:	4b1c      	ldr	r3, [pc, #112]	; (800143c <MX_CAN1_Init+0xa0>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80013d0:	4b1a      	ldr	r3, [pc, #104]	; (800143c <MX_CAN1_Init+0xa0>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80013d6:	4b19      	ldr	r3, [pc, #100]	; (800143c <MX_CAN1_Init+0xa0>)
 80013d8:	2200      	movs	r2, #0
 80013da:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <MX_CAN1_Init+0xa0>)
 80013de:	2200      	movs	r2, #0
 80013e0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80013e2:	4b16      	ldr	r3, [pc, #88]	; (800143c <MX_CAN1_Init+0xa0>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80013e8:	4b14      	ldr	r3, [pc, #80]	; (800143c <MX_CAN1_Init+0xa0>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80013ee:	4813      	ldr	r0, [pc, #76]	; (800143c <MX_CAN1_Init+0xa0>)
 80013f0:	f001 f8b0 	bl	8002554 <HAL_CAN_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80013fa:	f000 fd69 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

		CAN_FilterTypeDef canfilterconfig;

		canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80013fe:	2301      	movs	r3, #1
 8001400:	623b      	str	r3, [r7, #32]
		canfilterconfig.FilterBank = 18; // which filter bank to use from the assigned ones
 8001402:	2312      	movs	r3, #18
 8001404:	617b      	str	r3, [r7, #20]
		canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
		canfilterconfig.FilterIdHigh = 0x445 << 5;  //446<<5
 800140a:	f648 03a0 	movw	r3, #34976	; 0x88a0
 800140e:	603b      	str	r3, [r7, #0]
		canfilterconfig.FilterIdLow = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	607b      	str	r3, [r7, #4]
		canfilterconfig.FilterMaskIdHigh = 0x445 << 5;  //446<<5
 8001414:	f648 03a0 	movw	r3, #34976	; 0x88a0
 8001418:	60bb      	str	r3, [r7, #8]
		canfilterconfig.FilterMaskIdLow = 0x0000;
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
		canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800141e:	2300      	movs	r3, #0
 8001420:	61bb      	str	r3, [r7, #24]
		canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001422:	2301      	movs	r3, #1
 8001424:	61fb      	str	r3, [r7, #28]
		canfilterconfig.SlaveStartFilterBank = 20; // doesn't matter in single can controllers
 8001426:	2314      	movs	r3, #20
 8001428:	627b      	str	r3, [r7, #36]	; 0x24

		HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800142a:	463b      	mov	r3, r7
 800142c:	4619      	mov	r1, r3
 800142e:	4803      	ldr	r0, [pc, #12]	; (800143c <MX_CAN1_Init+0xa0>)
 8001430:	f001 f98c 	bl	800274c <HAL_CAN_ConfigFilter>



  /* USER CODE END CAN1_Init 2 */

}
 8001434:	bf00      	nop
 8001436:	3728      	adds	r7, #40	; 0x28
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000094 	.word	0x20000094
 8001440:	40006400 	.word	0x40006400

08001444 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a1d      	ldr	r2, [pc, #116]	; (80014d8 <HAL_CAN_MspInit+0x94>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d134      	bne.n	80014d0 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <HAL_CAN_MspInit+0x98>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	4a1b      	ldr	r2, [pc, #108]	; (80014dc <HAL_CAN_MspInit+0x98>)
 8001470:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001474:	6413      	str	r3, [r2, #64]	; 0x40
 8001476:	4b19      	ldr	r3, [pc, #100]	; (80014dc <HAL_CAN_MspInit+0x98>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	4b15      	ldr	r3, [pc, #84]	; (80014dc <HAL_CAN_MspInit+0x98>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a14      	ldr	r2, [pc, #80]	; (80014dc <HAL_CAN_MspInit+0x98>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_CAN_MspInit+0x98>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800149e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80014a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a4:	2302      	movs	r3, #2
 80014a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ac:	2303      	movs	r3, #3
 80014ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80014b0:	2309      	movs	r3, #9
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4619      	mov	r1, r3
 80014ba:	4809      	ldr	r0, [pc, #36]	; (80014e0 <HAL_CAN_MspInit+0x9c>)
 80014bc:	f001 ffbe 	bl	800343c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80014c0:	2200      	movs	r2, #0
 80014c2:	2105      	movs	r1, #5
 80014c4:	2014      	movs	r0, #20
 80014c6:	f001 ff82 	bl	80033ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80014ca:	2014      	movs	r0, #20
 80014cc:	f001 ff9b 	bl	8003406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80014d0:	bf00      	nop
 80014d2:	3728      	adds	r7, #40	; 0x28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40006400 	.word	0x40006400
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40020000 	.word	0x40020000

080014e4 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 80014ec:	4a04      	ldr	r2, [pc, #16]	; (8001500 <bno055_assignI2C+0x1c>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6013      	str	r3, [r2, #0]
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	200000bc 	.word	0x200000bc

08001504 <bno055_delay>:

void bno055_delay(int time) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4618      	mov	r0, r3
 8001510:	f000 fffc 	bl	800250c <HAL_Delay>
#endif
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af02      	add	r7, sp, #8
 8001522:	4603      	mov	r3, r0
 8001524:	460a      	mov	r2, r1
 8001526:	71fb      	strb	r3, [r7, #7]
 8001528:	4613      	mov	r3, r2
 800152a:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	733b      	strb	r3, [r7, #12]
 8001530:	79bb      	ldrb	r3, [r7, #6]
 8001532:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8001534:	4b5a      	ldr	r3, [pc, #360]	; (80016a0 <bno055_writeData+0x184>)
 8001536:	6818      	ldr	r0, [r3, #0]
 8001538:	f107 020c 	add.w	r2, r7, #12
 800153c:	230a      	movs	r3, #10
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	2302      	movs	r3, #2
 8001542:	2150      	movs	r1, #80	; 0x50
 8001544:	f002 fa9e 	bl	8003a84 <HAL_I2C_Master_Transmit>
 8001548:	4603      	mov	r3, r0
 800154a:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 800154c:	7dfb      	ldrb	r3, [r7, #23]
 800154e:	2b00      	cmp	r3, #0
 8001550:	f000 80a0 	beq.w	8001694 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8001554:	7dfb      	ldrb	r3, [r7, #23]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d103      	bne.n	8001562 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 800155a:	4852      	ldr	r0, [pc, #328]	; (80016a4 <bno055_writeData+0x188>)
 800155c:	f007 fd7e 	bl	800905c <puts>
 8001560:	e012      	b.n	8001588 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8001562:	7dfb      	ldrb	r3, [r7, #23]
 8001564:	2b03      	cmp	r3, #3
 8001566:	d103      	bne.n	8001570 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001568:	484f      	ldr	r0, [pc, #316]	; (80016a8 <bno055_writeData+0x18c>)
 800156a:	f007 fd77 	bl	800905c <puts>
 800156e:	e00b      	b.n	8001588 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001570:	7dfb      	ldrb	r3, [r7, #23]
 8001572:	2b02      	cmp	r3, #2
 8001574:	d103      	bne.n	800157e <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8001576:	484d      	ldr	r0, [pc, #308]	; (80016ac <bno055_writeData+0x190>)
 8001578:	f007 fd70 	bl	800905c <puts>
 800157c:	e004      	b.n	8001588 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 800157e:	7dfb      	ldrb	r3, [r7, #23]
 8001580:	4619      	mov	r1, r3
 8001582:	484b      	ldr	r0, [pc, #300]	; (80016b0 <bno055_writeData+0x194>)
 8001584:	f007 fd04 	bl	8008f90 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8001588:	4b45      	ldr	r3, [pc, #276]	; (80016a0 <bno055_writeData+0x184>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f002 fdab 	bl	80040e8 <HAL_I2C_GetError>
 8001592:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d07e      	beq.n	8001698 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d103      	bne.n	80015a8 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 80015a0:	4844      	ldr	r0, [pc, #272]	; (80016b4 <bno055_writeData+0x198>)
 80015a2:	f007 fd5b 	bl	800905c <puts>
 80015a6:	e021      	b.n	80015ec <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d103      	bne.n	80015b6 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 80015ae:	4842      	ldr	r0, [pc, #264]	; (80016b8 <bno055_writeData+0x19c>)
 80015b0:	f007 fd54 	bl	800905c <puts>
 80015b4:	e01a      	b.n	80015ec <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	2b04      	cmp	r3, #4
 80015ba:	d103      	bne.n	80015c4 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 80015bc:	483f      	ldr	r0, [pc, #252]	; (80016bc <bno055_writeData+0x1a0>)
 80015be:	f007 fd4d 	bl	800905c <puts>
 80015c2:	e013      	b.n	80015ec <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	2b08      	cmp	r3, #8
 80015c8:	d103      	bne.n	80015d2 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 80015ca:	483d      	ldr	r0, [pc, #244]	; (80016c0 <bno055_writeData+0x1a4>)
 80015cc:	f007 fd46 	bl	800905c <puts>
 80015d0:	e00c      	b.n	80015ec <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	2b10      	cmp	r3, #16
 80015d6:	d103      	bne.n	80015e0 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 80015d8:	483a      	ldr	r0, [pc, #232]	; (80016c4 <bno055_writeData+0x1a8>)
 80015da:	f007 fd3f 	bl	800905c <puts>
 80015de:	e005      	b.n	80015ec <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	2b20      	cmp	r3, #32
 80015e4:	d102      	bne.n	80015ec <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 80015e6:	4838      	ldr	r0, [pc, #224]	; (80016c8 <bno055_writeData+0x1ac>)
 80015e8:	f007 fd38 	bl	800905c <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 80015ec:	4b2c      	ldr	r3, [pc, #176]	; (80016a0 <bno055_writeData+0x184>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f002 fd6b 	bl	80040cc <HAL_I2C_GetState>
 80015f6:	4603      	mov	r3, r0
 80015f8:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d103      	bne.n	8001608 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001600:	4832      	ldr	r0, [pc, #200]	; (80016cc <bno055_writeData+0x1b0>)
 8001602:	f007 fd2b 	bl	800905c <puts>
 8001606:	e048      	b.n	800169a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	2b20      	cmp	r3, #32
 800160c:	d103      	bne.n	8001616 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 800160e:	482f      	ldr	r0, [pc, #188]	; (80016cc <bno055_writeData+0x1b0>)
 8001610:	f007 fd24 	bl	800905c <puts>
 8001614:	e041      	b.n	800169a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	2b24      	cmp	r3, #36	; 0x24
 800161a:	d103      	bne.n	8001624 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 800161c:	482c      	ldr	r0, [pc, #176]	; (80016d0 <bno055_writeData+0x1b4>)
 800161e:	f007 fd1d 	bl	800905c <puts>
 8001622:	e03a      	b.n	800169a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	2b21      	cmp	r3, #33	; 0x21
 8001628:	d103      	bne.n	8001632 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 800162a:	482a      	ldr	r0, [pc, #168]	; (80016d4 <bno055_writeData+0x1b8>)
 800162c:	f007 fd16 	bl	800905c <puts>
 8001630:	e033      	b.n	800169a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8001632:	7bfb      	ldrb	r3, [r7, #15]
 8001634:	2b22      	cmp	r3, #34	; 0x22
 8001636:	d103      	bne.n	8001640 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001638:	4827      	ldr	r0, [pc, #156]	; (80016d8 <bno055_writeData+0x1bc>)
 800163a:	f007 fd0f 	bl	800905c <puts>
 800163e:	e02c      	b.n	800169a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	2b28      	cmp	r3, #40	; 0x28
 8001644:	d103      	bne.n	800164e <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8001646:	4825      	ldr	r0, [pc, #148]	; (80016dc <bno055_writeData+0x1c0>)
 8001648:	f007 fd08 	bl	800905c <puts>
 800164c:	e025      	b.n	800169a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	2b29      	cmp	r3, #41	; 0x29
 8001652:	d103      	bne.n	800165c <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001654:	4822      	ldr	r0, [pc, #136]	; (80016e0 <bno055_writeData+0x1c4>)
 8001656:	f007 fd01 	bl	800905c <puts>
 800165a:	e01e      	b.n	800169a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	2b2a      	cmp	r3, #42	; 0x2a
 8001660:	d103      	bne.n	800166a <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8001662:	4820      	ldr	r0, [pc, #128]	; (80016e4 <bno055_writeData+0x1c8>)
 8001664:	f007 fcfa 	bl	800905c <puts>
 8001668:	e017      	b.n	800169a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 800166a:	7bfb      	ldrb	r3, [r7, #15]
 800166c:	2b60      	cmp	r3, #96	; 0x60
 800166e:	d103      	bne.n	8001678 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001670:	481d      	ldr	r0, [pc, #116]	; (80016e8 <bno055_writeData+0x1cc>)
 8001672:	f007 fcf3 	bl	800905c <puts>
 8001676:	e010      	b.n	800169a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	2ba0      	cmp	r3, #160	; 0xa0
 800167c:	d103      	bne.n	8001686 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 800167e:	481b      	ldr	r0, [pc, #108]	; (80016ec <bno055_writeData+0x1d0>)
 8001680:	f007 fcec 	bl	800905c <puts>
 8001684:	e009      	b.n	800169a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8001686:	7bfb      	ldrb	r3, [r7, #15]
 8001688:	2be0      	cmp	r3, #224	; 0xe0
 800168a:	d106      	bne.n	800169a <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 800168c:	4818      	ldr	r0, [pc, #96]	; (80016f0 <bno055_writeData+0x1d4>)
 800168e:	f007 fce5 	bl	800905c <puts>
 8001692:	e002      	b.n	800169a <bno055_writeData+0x17e>
    return;
 8001694:	bf00      	nop
 8001696:	e000      	b.n	800169a <bno055_writeData+0x17e>
    return;
 8001698:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	200000bc 	.word	0x200000bc
 80016a4:	08009da0 	.word	0x08009da0
 80016a8:	08009dc4 	.word	0x08009dc4
 80016ac:	08009dec 	.word	0x08009dec
 80016b0:	08009e10 	.word	0x08009e10
 80016b4:	08009e28 	.word	0x08009e28
 80016b8:	08009e3c 	.word	0x08009e3c
 80016bc:	08009e50 	.word	0x08009e50
 80016c0:	08009e64 	.word	0x08009e64
 80016c4:	08009e78 	.word	0x08009e78
 80016c8:	08009e8c 	.word	0x08009e8c
 80016cc:	08009ea4 	.word	0x08009ea4
 80016d0:	08009ebc 	.word	0x08009ebc
 80016d4:	08009ed0 	.word	0x08009ed0
 80016d8:	08009ee8 	.word	0x08009ee8
 80016dc:	08009f00 	.word	0x08009f00
 80016e0:	08009f18 	.word	0x08009f18
 80016e4:	08009f38 	.word	0x08009f38
 80016e8:	08009f58 	.word	0x08009f58
 80016ec:	08009f70 	.word	0x08009f70
 80016f0:	08009f88 	.word	0x08009f88

080016f4 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af02      	add	r7, sp, #8
 80016fa:	4603      	mov	r3, r0
 80016fc:	6039      	str	r1, [r7, #0]
 80016fe:	71fb      	strb	r3, [r7, #7]
 8001700:	4613      	mov	r3, r2
 8001702:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001704:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <bno055_readData+0x40>)
 8001706:	6818      	ldr	r0, [r3, #0]
 8001708:	1dfa      	adds	r2, r7, #7
 800170a:	2364      	movs	r3, #100	; 0x64
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	2301      	movs	r3, #1
 8001710:	2150      	movs	r1, #80	; 0x50
 8001712:	f002 f9b7 	bl	8003a84 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8001716:	4b07      	ldr	r3, [pc, #28]	; (8001734 <bno055_readData+0x40>)
 8001718:	6818      	ldr	r0, [r3, #0]
 800171a:	79bb      	ldrb	r3, [r7, #6]
 800171c:	b29b      	uxth	r3, r3
 800171e:	2264      	movs	r2, #100	; 0x64
 8001720:	9200      	str	r2, [sp, #0]
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	2150      	movs	r1, #80	; 0x50
 8001726:	f002 faab 	bl	8003c80 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200000bc 	.word	0x200000bc

08001738 <map>:
/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

/* MAP */

	float map(float Input, float Min_Input, float Max_Input, float Min_Output, float Max_Output) {
 8001738:	b480      	push	{r7}
 800173a:	b087      	sub	sp, #28
 800173c:	af00      	add	r7, sp, #0
 800173e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001742:	edc7 0a04 	vstr	s1, [r7, #16]
 8001746:	ed87 1a03 	vstr	s2, [r7, #12]
 800174a:	edc7 1a02 	vstr	s3, [r7, #8]
 800174e:	ed87 2a01 	vstr	s4, [r7, #4]
		return (float) ((Input - Min_Input) * (Max_Output - Min_Output) / (Max_Input - Min_Input) + Min_Output);
 8001752:	ed97 7a05 	vldr	s14, [r7, #20]
 8001756:	edd7 7a04 	vldr	s15, [r7, #16]
 800175a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800175e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001762:	edd7 7a02 	vldr	s15, [r7, #8]
 8001766:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800176a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800176e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001772:	edd7 7a04 	vldr	s15, [r7, #16]
 8001776:	ee77 7a67 	vsub.f32	s15, s14, s15
 800177a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800177e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001782:	ee77 7a27 	vadd.f32	s15, s14, s15
	}
 8001786:	eeb0 0a67 	vmov.f32	s0, s15
 800178a:	371c      	adds	r7, #28
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of IMU_BNO_055 */
  IMU_BNO_055Handle = osThreadNew(Task_IMU_BNO_055, NULL, &IMU_BNO_055_attributes);
 8001798:	4a0c      	ldr	r2, [pc, #48]	; (80017cc <MX_FREERTOS_Init+0x38>)
 800179a:	2100      	movs	r1, #0
 800179c:	480c      	ldr	r0, [pc, #48]	; (80017d0 <MX_FREERTOS_Init+0x3c>)
 800179e:	f004 fe2b 	bl	80063f8 <osThreadNew>
 80017a2:	4603      	mov	r3, r0
 80017a4:	4a0b      	ldr	r2, [pc, #44]	; (80017d4 <MX_FREERTOS_Init+0x40>)
 80017a6:	6013      	str	r3, [r2, #0]

  /* creation of RotaryEncoder */
  RotaryEncoderHandle = osThreadNew(Task_RotaryEncoder, NULL, &RotaryEncoder_attributes);
 80017a8:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <MX_FREERTOS_Init+0x44>)
 80017aa:	2100      	movs	r1, #0
 80017ac:	480b      	ldr	r0, [pc, #44]	; (80017dc <MX_FREERTOS_Init+0x48>)
 80017ae:	f004 fe23 	bl	80063f8 <osThreadNew>
 80017b2:	4603      	mov	r3, r0
 80017b4:	4a0a      	ldr	r2, [pc, #40]	; (80017e0 <MX_FREERTOS_Init+0x4c>)
 80017b6:	6013      	str	r3, [r2, #0]

  /* creation of LASER */
  LASERHandle = osThreadNew(Task_Laser, NULL, &LASER_attributes);
 80017b8:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <MX_FREERTOS_Init+0x50>)
 80017ba:	2100      	movs	r1, #0
 80017bc:	480a      	ldr	r0, [pc, #40]	; (80017e8 <MX_FREERTOS_Init+0x54>)
 80017be:	f004 fe1b 	bl	80063f8 <osThreadNew>
 80017c2:	4603      	mov	r3, r0
 80017c4:	4a09      	ldr	r2, [pc, #36]	; (80017ec <MX_FREERTOS_Init+0x58>)
 80017c6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	08009fdc 	.word	0x08009fdc
 80017d0:	080017f1 	.word	0x080017f1
 80017d4:	2000010c 	.word	0x2000010c
 80017d8:	0800a000 	.word	0x0800a000
 80017dc:	08001a0d 	.word	0x08001a0d
 80017e0:	20000110 	.word	0x20000110
 80017e4:	0800a024 	.word	0x0800a024
 80017e8:	08001a1d 	.word	0x08001a1d
 80017ec:	20000114 	.word	0x20000114

080017f0 <Task_IMU_BNO_055>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task_IMU_BNO_055 */
void Task_IMU_BNO_055(void *argument)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
//		uint16_t QuaX = 0;


   	/* IMU BNO 055 */

		  bno055_assignI2C(&hi2c1);
 80017f8:	4878      	ldr	r0, [pc, #480]	; (80019dc <Task_IMU_BNO_055+0x1ec>)
 80017fa:	f7ff fe73 	bl	80014e4 <bno055_assignI2C>
		  bno055_setup();
 80017fe:	f7ff fbdb 	bl	8000fb8 <bno055_setup>
		  bno055_setOperationModeNDOF();
 8001802:	f7ff fbc6 	bl	8000f92 <bno055_setOperationModeNDOF>
  {
	  /* IMU BNO 055 */



			  if (E.y>0)
 8001806:	4b76      	ldr	r3, [pc, #472]	; (80019e0 <Task_IMU_BNO_055+0x1f0>)
 8001808:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	f04f 0300 	mov.w	r3, #0
 8001814:	f7ff f998 	bl	8000b48 <__aeabi_dcmpgt>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00b      	beq.n	8001836 <Task_IMU_BNO_055+0x46>
			  {
				  y = E.y;
 800181e:	4b70      	ldr	r3, [pc, #448]	; (80019e0 <Task_IMU_BNO_055+0x1f0>)
 8001820:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	f7ff f998 	bl	8000b5c <__aeabi_d2uiz>
 800182c:	4603      	mov	r3, r0
 800182e:	b29a      	uxth	r2, r3
 8001830:	4b6c      	ldr	r3, [pc, #432]	; (80019e4 <Task_IMU_BNO_055+0x1f4>)
 8001832:	801a      	strh	r2, [r3, #0]
 8001834:	e01d      	b.n	8001872 <Task_IMU_BNO_055+0x82>
			  }
			  else if (E.y<0)
 8001836:	4b6a      	ldr	r3, [pc, #424]	; (80019e0 <Task_IMU_BNO_055+0x1f0>)
 8001838:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	f04f 0300 	mov.w	r3, #0
 8001844:	f7ff f962 	bl	8000b0c <__aeabi_dcmplt>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d011      	beq.n	8001872 <Task_IMU_BNO_055+0x82>
			  {
				  y = 360-(-1*E.y);
 800184e:	4b64      	ldr	r3, [pc, #400]	; (80019e0 <Task_IMU_BNO_055+0x1f0>)
 8001850:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001854:	f04f 0200 	mov.w	r2, #0
 8001858:	4b63      	ldr	r3, [pc, #396]	; (80019e8 <Task_IMU_BNO_055+0x1f8>)
 800185a:	f7fe fd2f 	bl	80002bc <__adddf3>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4610      	mov	r0, r2
 8001864:	4619      	mov	r1, r3
 8001866:	f7ff f979 	bl	8000b5c <__aeabi_d2uiz>
 800186a:	4603      	mov	r3, r0
 800186c:	b29a      	uxth	r2, r3
 800186e:	4b5d      	ldr	r3, [pc, #372]	; (80019e4 <Task_IMU_BNO_055+0x1f4>)
 8001870:	801a      	strh	r2, [r3, #0]
			  }

		  /* EULER */

			  heading = map (E.x, 0, 360, 0, 65535);
 8001872:	4b5b      	ldr	r3, [pc, #364]	; (80019e0 <Task_IMU_BNO_055+0x1f0>)
 8001874:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001878:	4610      	mov	r0, r2
 800187a:	4619      	mov	r1, r3
 800187c:	f7ff f98e 	bl	8000b9c <__aeabi_d2f>
 8001880:	4603      	mov	r3, r0
 8001882:	ed9f 2a5a 	vldr	s4, [pc, #360]	; 80019ec <Task_IMU_BNO_055+0x1fc>
 8001886:	eddf 1a5a 	vldr	s3, [pc, #360]	; 80019f0 <Task_IMU_BNO_055+0x200>
 800188a:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 80019f4 <Task_IMU_BNO_055+0x204>
 800188e:	eddf 0a58 	vldr	s1, [pc, #352]	; 80019f0 <Task_IMU_BNO_055+0x200>
 8001892:	ee00 3a10 	vmov	s0, r3
 8001896:	f7ff ff4f 	bl	8001738 <map>
 800189a:	eef0 7a40 	vmov.f32	s15, s0
 800189e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018a2:	ee17 3a90 	vmov	r3, s15
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	4b53      	ldr	r3, [pc, #332]	; (80019f8 <Task_IMU_BNO_055+0x208>)
 80018aa:	801a      	strh	r2, [r3, #0]
			  pitch   = map (E.y, 0, 360, 0, 65535);
 80018ac:	4b4c      	ldr	r3, [pc, #304]	; (80019e0 <Task_IMU_BNO_055+0x1f0>)
 80018ae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80018b2:	4610      	mov	r0, r2
 80018b4:	4619      	mov	r1, r3
 80018b6:	f7ff f971 	bl	8000b9c <__aeabi_d2f>
 80018ba:	4603      	mov	r3, r0
 80018bc:	ed9f 2a4b 	vldr	s4, [pc, #300]	; 80019ec <Task_IMU_BNO_055+0x1fc>
 80018c0:	eddf 1a4b 	vldr	s3, [pc, #300]	; 80019f0 <Task_IMU_BNO_055+0x200>
 80018c4:	ed9f 1a4b 	vldr	s2, [pc, #300]	; 80019f4 <Task_IMU_BNO_055+0x204>
 80018c8:	eddf 0a49 	vldr	s1, [pc, #292]	; 80019f0 <Task_IMU_BNO_055+0x200>
 80018cc:	ee00 3a10 	vmov	s0, r3
 80018d0:	f7ff ff32 	bl	8001738 <map>
 80018d4:	eef0 7a40 	vmov.f32	s15, s0
 80018d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018dc:	ee17 3a90 	vmov	r3, s15
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	4b46      	ldr	r3, [pc, #280]	; (80019fc <Task_IMU_BNO_055+0x20c>)
 80018e4:	801a      	strh	r2, [r3, #0]
			  roll    = map (E.z, 0, 360, 0, 65535);
 80018e6:	4b3e      	ldr	r3, [pc, #248]	; (80019e0 <Task_IMU_BNO_055+0x1f0>)
 80018e8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018ec:	4610      	mov	r0, r2
 80018ee:	4619      	mov	r1, r3
 80018f0:	f7ff f954 	bl	8000b9c <__aeabi_d2f>
 80018f4:	4603      	mov	r3, r0
 80018f6:	ed9f 2a3d 	vldr	s4, [pc, #244]	; 80019ec <Task_IMU_BNO_055+0x1fc>
 80018fa:	eddf 1a3d 	vldr	s3, [pc, #244]	; 80019f0 <Task_IMU_BNO_055+0x200>
 80018fe:	ed9f 1a3d 	vldr	s2, [pc, #244]	; 80019f4 <Task_IMU_BNO_055+0x204>
 8001902:	eddf 0a3b 	vldr	s1, [pc, #236]	; 80019f0 <Task_IMU_BNO_055+0x200>
 8001906:	ee00 3a10 	vmov	s0, r3
 800190a:	f7ff ff15 	bl	8001738 <map>
 800190e:	eef0 7a40 	vmov.f32	s15, s0
 8001912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001916:	ee17 3a90 	vmov	r3, s15
 800191a:	b29a      	uxth	r2, r3
 800191c:	4b38      	ldr	r3, [pc, #224]	; (8001a00 <Task_IMU_BNO_055+0x210>)
 800191e:	801a      	strh	r2, [r3, #0]

		  /* QUATERNION */

			  QuaX    = map (Q.x, 0, 360, 0, 65535);
 8001920:	4b38      	ldr	r3, [pc, #224]	; (8001a04 <Task_IMU_BNO_055+0x214>)
 8001922:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001926:	4610      	mov	r0, r2
 8001928:	4619      	mov	r1, r3
 800192a:	f7ff f937 	bl	8000b9c <__aeabi_d2f>
 800192e:	4603      	mov	r3, r0
 8001930:	ed9f 2a2e 	vldr	s4, [pc, #184]	; 80019ec <Task_IMU_BNO_055+0x1fc>
 8001934:	eddf 1a2e 	vldr	s3, [pc, #184]	; 80019f0 <Task_IMU_BNO_055+0x200>
 8001938:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 80019f4 <Task_IMU_BNO_055+0x204>
 800193c:	eddf 0a2c 	vldr	s1, [pc, #176]	; 80019f0 <Task_IMU_BNO_055+0x200>
 8001940:	ee00 3a10 	vmov	s0, r3
 8001944:	f7ff fef8 	bl	8001738 <map>
 8001948:	eef0 7a40 	vmov.f32	s15, s0
 800194c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001950:	ee17 3a90 	vmov	r3, s15
 8001954:	b29a      	uxth	r2, r3
 8001956:	4b2c      	ldr	r3, [pc, #176]	; (8001a08 <Task_IMU_BNO_055+0x218>)
 8001958:	801a      	strh	r2, [r3, #0]


		   /* EULER */

			  E	  = bno055_getVectorEuler();
 800195a:	f7ff fc99 	bl	8001290 <bno055_getVectorEuler>
 800195e:	eeb0 4a40 	vmov.f32	s8, s0
 8001962:	eef0 4a60 	vmov.f32	s9, s1
 8001966:	eeb0 5a41 	vmov.f32	s10, s2
 800196a:	eef0 5a61 	vmov.f32	s11, s3
 800196e:	eeb0 6a42 	vmov.f32	s12, s4
 8001972:	eef0 6a62 	vmov.f32	s13, s5
 8001976:	eeb0 7a43 	vmov.f32	s14, s6
 800197a:	eef0 7a63 	vmov.f32	s15, s7
 800197e:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <Task_IMU_BNO_055+0x1f0>)
 8001980:	ed83 4b00 	vstr	d4, [r3]
 8001984:	ed83 5b02 	vstr	d5, [r3, #8]
 8001988:	ed83 6b04 	vstr	d6, [r3, #16]
 800198c:	ed83 7b06 	vstr	d7, [r3, #24]
					HAL_Delay(5);
 8001990:	2005      	movs	r0, #5
 8001992:	f000 fdbb 	bl	800250c <HAL_Delay>

		    /* QUATERNION */

			  Q   = bno055_getVectorQuaternion();
 8001996:	f7ff fcbe 	bl	8001316 <bno055_getVectorQuaternion>
 800199a:	eeb0 4a40 	vmov.f32	s8, s0
 800199e:	eef0 4a60 	vmov.f32	s9, s1
 80019a2:	eeb0 5a41 	vmov.f32	s10, s2
 80019a6:	eef0 5a61 	vmov.f32	s11, s3
 80019aa:	eeb0 6a42 	vmov.f32	s12, s4
 80019ae:	eef0 6a62 	vmov.f32	s13, s5
 80019b2:	eeb0 7a43 	vmov.f32	s14, s6
 80019b6:	eef0 7a63 	vmov.f32	s15, s7
 80019ba:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <Task_IMU_BNO_055+0x214>)
 80019bc:	ed83 4b00 	vstr	d4, [r3]
 80019c0:	ed83 5b02 	vstr	d5, [r3, #8]
 80019c4:	ed83 6b04 	vstr	d6, [r3, #16]
 80019c8:	ed83 7b06 	vstr	d7, [r3, #24]
				    HAL_Delay(5);
 80019cc:	2005      	movs	r0, #5
 80019ce:	f000 fd9d 	bl	800250c <HAL_Delay>

    osDelay(1);
 80019d2:	2001      	movs	r0, #1
 80019d4:	f004 fda2 	bl	800651c <osDelay>
			  if (E.y>0)
 80019d8:	e715      	b.n	8001806 <Task_IMU_BNO_055+0x16>
 80019da:	bf00      	nop
 80019dc:	20000118 	.word	0x20000118
 80019e0:	200000c0 	.word	0x200000c0
 80019e4:	20000106 	.word	0x20000106
 80019e8:	40768000 	.word	0x40768000
 80019ec:	477fff00 	.word	0x477fff00
 80019f0:	00000000 	.word	0x00000000
 80019f4:	43b40000 	.word	0x43b40000
 80019f8:	20000100 	.word	0x20000100
 80019fc:	20000102 	.word	0x20000102
 8001a00:	20000104 	.word	0x20000104
 8001a04:	200000e0 	.word	0x200000e0
 8001a08:	20000108 	.word	0x20000108

08001a0c <Task_RotaryEncoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_RotaryEncoder */
void Task_RotaryEncoder(void *argument)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_RotaryEncoder */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001a14:	2001      	movs	r0, #1
 8001a16:	f004 fd81 	bl	800651c <osDelay>
 8001a1a:	e7fb      	b.n	8001a14 <Task_RotaryEncoder+0x8>

08001a1c <Task_Laser>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Laser */
void Task_Laser(void *argument)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_Laser */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001a24:	2001      	movs	r0, #1
 8001a26:	f004 fd79 	bl	800651c <osDelay>
 8001a2a:	e7fb      	b.n	8001a24 <Task_Laser+0x8>

08001a2c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a32:	f107 030c 	add.w	r3, r7, #12
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
 8001a40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	4b25      	ldr	r3, [pc, #148]	; (8001adc <MX_GPIO_Init+0xb0>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a24      	ldr	r2, [pc, #144]	; (8001adc <MX_GPIO_Init+0xb0>)
 8001a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b22      	ldr	r3, [pc, #136]	; (8001adc <MX_GPIO_Init+0xb0>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	607b      	str	r3, [r7, #4]
 8001a62:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <MX_GPIO_Init+0xb0>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a1d      	ldr	r2, [pc, #116]	; (8001adc <MX_GPIO_Init+0xb0>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <MX_GPIO_Init+0xb0>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	603b      	str	r3, [r7, #0]
 8001a7e:	4b17      	ldr	r3, [pc, #92]	; (8001adc <MX_GPIO_Init+0xb0>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a16      	ldr	r2, [pc, #88]	; (8001adc <MX_GPIO_Init+0xb0>)
 8001a84:	f043 0302 	orr.w	r3, r3, #2
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b14      	ldr	r3, [pc, #80]	; (8001adc <MX_GPIO_Init+0xb0>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	603b      	str	r3, [r7, #0]
 8001a94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2101      	movs	r1, #1
 8001a9a:	4811      	ldr	r0, [pc, #68]	; (8001ae0 <MX_GPIO_Init+0xb4>)
 8001a9c:	f001 fe7a 	bl	8003794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aac:	2300      	movs	r3, #0
 8001aae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001ab0:	f107 030c 	add.w	r3, r7, #12
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	480a      	ldr	r0, [pc, #40]	; (8001ae0 <MX_GPIO_Init+0xb4>)
 8001ab8:	f001 fcc0 	bl	800343c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001abc:	2302      	movs	r3, #2
 8001abe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001ac8:	f107 030c 	add.w	r3, r7, #12
 8001acc:	4619      	mov	r1, r3
 8001ace:	4804      	ldr	r0, [pc, #16]	; (8001ae0 <MX_GPIO_Init+0xb4>)
 8001ad0:	f001 fcb4 	bl	800343c <HAL_GPIO_Init>

}
 8001ad4:	bf00      	nop
 8001ad6:	3720      	adds	r7, #32
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40020000 	.word	0x40020000

08001ae4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ae8:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <MX_I2C1_Init+0x50>)
 8001aea:	4a13      	ldr	r2, [pc, #76]	; (8001b38 <MX_I2C1_Init+0x54>)
 8001aec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001aee:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <MX_I2C1_Init+0x50>)
 8001af0:	4a12      	ldr	r2, [pc, #72]	; (8001b3c <MX_I2C1_Init+0x58>)
 8001af2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001af4:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <MX_I2C1_Init+0x50>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <MX_I2C1_Init+0x50>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <MX_I2C1_Init+0x50>)
 8001b02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b08:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <MX_I2C1_Init+0x50>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b0e:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <MX_I2C1_Init+0x50>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b14:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <MX_I2C1_Init+0x50>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <MX_I2C1_Init+0x50>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b20:	4804      	ldr	r0, [pc, #16]	; (8001b34 <MX_I2C1_Init+0x50>)
 8001b22:	f001 fe6b 	bl	80037fc <HAL_I2C_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b2c:	f000 f9d0 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000118 	.word	0x20000118
 8001b38:	40005400 	.word	0x40005400
 8001b3c:	00061a80 	.word	0x00061a80

08001b40 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08a      	sub	sp, #40	; 0x28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a19      	ldr	r2, [pc, #100]	; (8001bc4 <HAL_I2C_MspInit+0x84>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d12b      	bne.n	8001bba <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	4b18      	ldr	r3, [pc, #96]	; (8001bc8 <HAL_I2C_MspInit+0x88>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a17      	ldr	r2, [pc, #92]	; (8001bc8 <HAL_I2C_MspInit+0x88>)
 8001b6c:	f043 0302 	orr.w	r3, r3, #2
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <HAL_I2C_MspInit+0x88>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b7e:	23c0      	movs	r3, #192	; 0xc0
 8001b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b82:	2312      	movs	r3, #18
 8001b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b8e:	2304      	movs	r3, #4
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	4619      	mov	r1, r3
 8001b98:	480c      	ldr	r0, [pc, #48]	; (8001bcc <HAL_I2C_MspInit+0x8c>)
 8001b9a:	f001 fc4f 	bl	800343c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <HAL_I2C_MspInit+0x88>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	4a08      	ldr	r2, [pc, #32]	; (8001bc8 <HAL_I2C_MspInit+0x88>)
 8001ba8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bac:	6413      	str	r3, [r2, #64]	; 0x40
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_I2C_MspInit+0x88>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001bba:	bf00      	nop
 8001bbc:	3728      	adds	r7, #40	; 0x28
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40005400 	.word	0x40005400
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40020400 	.word	0x40020400

08001bd0 <HAL_CAN_RxFifo0MsgPendingCallback>:
//		}


	/* STM32 INTERUPP RECEIVER FROM USB CAN */

		void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
			HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001bd8:	4b17      	ldr	r3, [pc, #92]	; (8001c38 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8001bda:	4a18      	ldr	r2, [pc, #96]	; (8001c3c <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8001bdc:	2100      	movs	r1, #0
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 ffb3 	bl	8002b4a <HAL_CAN_GetRxMessage>
			cntt++;
 8001be4:	4b16      	ldr	r3, [pc, #88]	; (8001c40 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	3301      	adds	r3, #1
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001bee:	701a      	strb	r2, [r3, #0]
			while (cntt - 100 > 0) {
 8001bf0:	e006      	b.n	8001c00 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	4813      	ldr	r0, [pc, #76]	; (8001c44 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8001bf6:	f001 fde6 	bl	80037c6 <HAL_GPIO_TogglePin>
				cntt = 0;
 8001bfa:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	701a      	strb	r2, [r3, #0]
			while (cntt - 100 > 0) {
 8001c00:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b64      	cmp	r3, #100	; 0x64
 8001c06:	d8f4      	bhi.n	8001bf2 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>

		/* TRANFER TO SPEED */

			/* V RGB */

				V1 = RxData1;
 8001c08:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a0f      	ldr	r2, [pc, #60]	; (8001c4c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001c0e:	6013      	str	r3, [r2, #0]
				V2 = RxData2;
 8001c10:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a0f      	ldr	r2, [pc, #60]	; (8001c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8001c16:	6013      	str	r3, [r2, #0]
				V3 = RxData3;
 8001c18:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a0f      	ldr	r2, [pc, #60]	; (8001c5c <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8001c1e:	6013      	str	r3, [r2, #0]
				V4 = RxData4;
 8001c20:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a0f      	ldr	r2, [pc, #60]	; (8001c64 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8001c26:	6013      	str	r3, [r2, #0]

				flag = 1;
 8001c28:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	701a      	strb	r2, [r3, #0]

		}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000188 	.word	0x20000188
 8001c3c:	2000016c 	.word	0x2000016c
 8001c40:	200001d5 	.word	0x200001d5
 8001c44:	40020000 	.word	0x40020000
 8001c48:	200001b4 	.word	0x200001b4
 8001c4c:	200001c4 	.word	0x200001c4
 8001c50:	200001b8 	.word	0x200001b8
 8001c54:	200001c8 	.word	0x200001c8
 8001c58:	200001bc 	.word	0x200001bc
 8001c5c:	200001cc 	.word	0x200001cc
 8001c60:	200001c0 	.word	0x200001c0
 8001c64:	200001d0 	.word	0x200001d0
 8001c68:	200001d4 	.word	0x200001d4

08001c6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c70:	f000 fbda 	bl	8002428 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c74:	f000 f83c 	bl	8001cf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c78:	f7ff fed8 	bl	8001a2c <MX_GPIO_Init>
  MX_CAN1_Init();
 8001c7c:	f7ff fb8e 	bl	800139c <MX_CAN1_Init>
  MX_TIM3_Init();
 8001c80:	f000 fa46 	bl	8002110 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001c84:	f000 fab4 	bl	80021f0 <MX_TIM4_Init>
  MX_I2C1_Init();
 8001c88:	f7ff ff2c 	bl	8001ae4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


	/* CAN */

		HAL_CAN_Start(&hcan1);
 8001c8c:	4814      	ldr	r0, [pc, #80]	; (8001ce0 <main+0x74>)
 8001c8e:	f000 fe3d 	bl	800290c <HAL_CAN_Start>

	/* STRUCTUR TRANSMITTER DATA */

		HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001c92:	2102      	movs	r1, #2
 8001c94:	4812      	ldr	r0, [pc, #72]	; (8001ce0 <main+0x74>)
 8001c96:	f001 f86a 	bl	8002d6e <HAL_CAN_ActivateNotification>
		TxHeader.DLC = 8;
 8001c9a:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <main+0x78>)
 8001c9c:	2208      	movs	r2, #8
 8001c9e:	611a      	str	r2, [r3, #16]
		TxHeader.IDE = CAN_ID_STD;
 8001ca0:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <main+0x78>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
		TxHeader.RTR = CAN_RTR_DATA;
 8001ca6:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <main+0x78>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	60da      	str	r2, [r3, #12]
		TxHeader.StdId = 0x446; //0b11001010001
 8001cac:	4b0d      	ldr	r3, [pc, #52]	; (8001ce4 <main+0x78>)
 8001cae:	f240 4246 	movw	r2, #1094	; 0x446
 8001cb2:	601a      	str	r2, [r3, #0]

	/* TIMER RGB */

		HAL_TIM_Base_Start_IT(&htim4);
 8001cb4:	480c      	ldr	r0, [pc, #48]	; (8001ce8 <main+0x7c>)
 8001cb6:	f003 fb3f 	bl	8005338 <HAL_TIM_Base_Start_IT>


		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001cba:	2100      	movs	r1, #0
 8001cbc:	480b      	ldr	r0, [pc, #44]	; (8001cec <main+0x80>)
 8001cbe:	f003 fbfb 	bl	80054b8 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001cc2:	2104      	movs	r1, #4
 8001cc4:	4809      	ldr	r0, [pc, #36]	; (8001cec <main+0x80>)
 8001cc6:	f003 fbf7 	bl	80054b8 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001cca:	2108      	movs	r1, #8
 8001ccc:	4807      	ldr	r0, [pc, #28]	; (8001cec <main+0x80>)
 8001cce:	f003 fbf3 	bl	80054b8 <HAL_TIM_PWM_Start>
//		bno055_setOperationModeNDOF();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001cd2:	f004 fb47 	bl	8006364 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001cd6:	f7ff fd5d 	bl	8001794 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001cda:	f004 fb67 	bl	80063ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001cde:	e7fe      	b.n	8001cde <main+0x72>
 8001ce0:	20000094 	.word	0x20000094
 8001ce4:	20000190 	.word	0x20000190
 8001ce8:	20000224 	.word	0x20000224
 8001cec:	200001dc 	.word	0x200001dc

08001cf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b094      	sub	sp, #80	; 0x50
 8001cf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cf6:	f107 031c 	add.w	r3, r7, #28
 8001cfa:	2234      	movs	r2, #52	; 0x34
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f007 fa8c 	bl	800921c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d04:	f107 0308 	add.w	r3, r7, #8
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d14:	2300      	movs	r3, #0
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	4b2c      	ldr	r3, [pc, #176]	; (8001dcc <SystemClock_Config+0xdc>)
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	4a2b      	ldr	r2, [pc, #172]	; (8001dcc <SystemClock_Config+0xdc>)
 8001d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d22:	6413      	str	r3, [r2, #64]	; 0x40
 8001d24:	4b29      	ldr	r3, [pc, #164]	; (8001dcc <SystemClock_Config+0xdc>)
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	607b      	str	r3, [r7, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d30:	2300      	movs	r3, #0
 8001d32:	603b      	str	r3, [r7, #0]
 8001d34:	4b26      	ldr	r3, [pc, #152]	; (8001dd0 <SystemClock_Config+0xe0>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a25      	ldr	r2, [pc, #148]	; (8001dd0 <SystemClock_Config+0xe0>)
 8001d3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	4b23      	ldr	r3, [pc, #140]	; (8001dd0 <SystemClock_Config+0xe0>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d48:	603b      	str	r3, [r7, #0]
 8001d4a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d50:	2301      	movs	r3, #1
 8001d52:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d54:	2310      	movs	r3, #16
 8001d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d60:	2308      	movs	r3, #8
 8001d62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001d64:	23b4      	movs	r3, #180	; 0xb4
 8001d66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d70:	2302      	movs	r3, #2
 8001d72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d74:	f107 031c 	add.w	r3, r7, #28
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f002 ffef 	bl	8004d5c <HAL_RCC_OscConfig>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001d84:	f000 f8a4 	bl	8001ed0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001d88:	f002 fce8 	bl	800475c <HAL_PWREx_EnableOverDrive>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001d92:	f000 f89d 	bl	8001ed0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d96:	230f      	movs	r3, #15
 8001d98:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001da2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001da6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001da8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dac:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001dae:	f107 0308 	add.w	r3, r7, #8
 8001db2:	2105      	movs	r1, #5
 8001db4:	4618      	mov	r0, r3
 8001db6:	f002 fd21 	bl	80047fc <HAL_RCC_ClockConfig>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001dc0:	f000 f886 	bl	8001ed0 <Error_Handler>
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	3750      	adds	r7, #80	; 0x50
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40007000 	.word	0x40007000

08001dd4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

/* MAKER TIMER INTERRUPP 1mS */

	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
		if (htim->Instance == TIM4) {
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a2e      	ldr	r2, [pc, #184]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d155      	bne.n	8001e92 <HAL_TIM_PeriodElapsedCallback+0xbe>

			TIM3->CCR1 = V1; // PWM BLINK LED
 8001de6:	4b2e      	ldr	r3, [pc, #184]	; (8001ea0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001de8:	edd3 7a00 	vldr	s15, [r3]
 8001dec:	4b2d      	ldr	r3, [pc, #180]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001dee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001df2:	ee17 2a90 	vmov	r2, s15
 8001df6:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = V2; // PWM BLINK LED
 8001df8:	4b2b      	ldr	r3, [pc, #172]	; (8001ea8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001dfa:	edd3 7a00 	vldr	s15, [r3]
 8001dfe:	4b29      	ldr	r3, [pc, #164]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001e00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e04:	ee17 2a90 	vmov	r2, s15
 8001e08:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3->CCR3 = V3; // PWM BLINK LED
 8001e0a:	4b28      	ldr	r3, [pc, #160]	; (8001eac <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001e0c:	edd3 7a00 	vldr	s15, [r3]
 8001e10:	4b24      	ldr	r3, [pc, #144]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001e12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e16:	ee17 2a90 	vmov	r2, s15
 8001e1a:	63da      	str	r2, [r3, #60]	; 0x3c
//
//					QuaX    = map (Q.x, 0, 360, 0, 65535);

				/* TxData SEND IMU EULER QUATERNION */

					TxData[0] = ((heading& 0xFF00) >> 8);
 8001e1c:	4b24      	ldr	r3, [pc, #144]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	0a1b      	lsrs	r3, r3, #8
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	4b23      	ldr	r3, [pc, #140]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001e28:	701a      	strb	r2, [r3, #0]
					TxData[1] = (heading& 0x00FF);
 8001e2a:	4b21      	ldr	r3, [pc, #132]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	4b20      	ldr	r3, [pc, #128]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001e32:	705a      	strb	r2, [r3, #1]
					TxData[2] = ((pitch& 0xFF00) >> 8);
 8001e34:	4b20      	ldr	r3, [pc, #128]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	0a1b      	lsrs	r3, r3, #8
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	4b1d      	ldr	r3, [pc, #116]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001e40:	709a      	strb	r2, [r3, #2]
					TxData[3] = (pitch& 0x00FF);
 8001e42:	4b1d      	ldr	r3, [pc, #116]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	4b1a      	ldr	r3, [pc, #104]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001e4a:	70da      	strb	r2, [r3, #3]
					TxData[4] = ((roll& 0xFF00) >> 8);
 8001e4c:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	0a1b      	lsrs	r3, r3, #8
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	4b17      	ldr	r3, [pc, #92]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001e58:	711a      	strb	r2, [r3, #4]
					TxData[5] = (roll& 0x00FF);
 8001e5a:	4b18      	ldr	r3, [pc, #96]	; (8001ebc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001e5c:	881b      	ldrh	r3, [r3, #0]
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	4b14      	ldr	r3, [pc, #80]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001e62:	715a      	strb	r2, [r3, #5]
					TxData[6] = ((-20& 0xFF00) >> 8);
 8001e64:	4b13      	ldr	r3, [pc, #76]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001e66:	22ff      	movs	r2, #255	; 0xff
 8001e68:	719a      	strb	r2, [r3, #6]
					TxData[7] = (-20& 0x00FF);
 8001e6a:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001e6c:	22ec      	movs	r2, #236	; 0xec
 8001e6e:	71da      	strb	r2, [r3, #7]
//					TxData[4] = ((V3_out & 0xFF00) >> 8);
//					TxData[5] = (V3_out & 0x00FF);
//					TxData[6] = ((V4_out & 0xFF00) >> 8);
//					TxData[7] = (V4_out & 0x00FF);

			if (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))) {
 8001e70:	2102      	movs	r1, #2
 8001e72:	4813      	ldr	r0, [pc, #76]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001e74:	f001 fc76 	bl	8003764 <HAL_GPIO_ReadPin>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d109      	bne.n	8001e92 <HAL_TIM_PeriodElapsedCallback+0xbe>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8001e7e:	2101      	movs	r1, #1
 8001e80:	480f      	ldr	r0, [pc, #60]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001e82:	f001 fca0 	bl	80037c6 <HAL_GPIO_TogglePin>
				HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001e88:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001e8a:	490f      	ldr	r1, [pc, #60]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001e8c:	480f      	ldr	r0, [pc, #60]	; (8001ecc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001e8e:	f000 fd81 	bl	8002994 <HAL_CAN_AddTxMessage>

			}
		}
	}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40000800 	.word	0x40000800
 8001ea0:	200001c4 	.word	0x200001c4
 8001ea4:	40000400 	.word	0x40000400
 8001ea8:	200001c8 	.word	0x200001c8
 8001eac:	200001cc 	.word	0x200001cc
 8001eb0:	20000100 	.word	0x20000100
 8001eb4:	200001a8 	.word	0x200001a8
 8001eb8:	20000102 	.word	0x20000102
 8001ebc:	20000104 	.word	0x20000104
 8001ec0:	40020000 	.word	0x40020000
 8001ec4:	200001b0 	.word	0x200001b0
 8001ec8:	20000190 	.word	0x20000190
 8001ecc:	20000094 	.word	0x20000094

08001ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed4:	b672      	cpsid	i
}
 8001ed6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed8:	e7fe      	b.n	8001ed8 <Error_Handler+0x8>
	...

08001edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	607b      	str	r3, [r7, #4]
 8001ee6:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <HAL_MspInit+0x54>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	4a11      	ldr	r2, [pc, #68]	; (8001f30 <HAL_MspInit+0x54>)
 8001eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef2:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <HAL_MspInit+0x54>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efa:	607b      	str	r3, [r7, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	603b      	str	r3, [r7, #0]
 8001f02:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <HAL_MspInit+0x54>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	4a0a      	ldr	r2, [pc, #40]	; (8001f30 <HAL_MspInit+0x54>)
 8001f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0e:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <HAL_MspInit+0x54>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f16:	603b      	str	r3, [r7, #0]
 8001f18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	210f      	movs	r1, #15
 8001f1e:	f06f 0001 	mvn.w	r0, #1
 8001f22:	f001 fa54 	bl	80033ce <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40023800 	.word	0x40023800

08001f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f38:	e7fe      	b.n	8001f38 <NMI_Handler+0x4>

08001f3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f3e:	e7fe      	b.n	8001f3e <HardFault_Handler+0x4>

08001f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f44:	e7fe      	b.n	8001f44 <MemManage_Handler+0x4>

08001f46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f4a:	e7fe      	b.n	8001f4a <BusFault_Handler+0x4>

08001f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f50:	e7fe      	b.n	8001f50 <UsageFault_Handler+0x4>

08001f52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f64:	f000 fab2 	bl	80024cc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001f68:	f005 fee6 	bl	8007d38 <xTaskGetSchedulerState>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d001      	beq.n	8001f76 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001f72:	f006 fcd1 	bl	8008918 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
	...

08001f7c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001f80:	4802      	ldr	r0, [pc, #8]	; (8001f8c <CAN1_RX0_IRQHandler+0x10>)
 8001f82:	f000 ff1a 	bl	8002dba <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000094 	.word	0x20000094

08001f90 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f94:	4802      	ldr	r0, [pc, #8]	; (8001fa0 <TIM4_IRQHandler+0x10>)
 8001f96:	f003 fb57 	bl	8005648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000224 	.word	0x20000224

08001fa4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	e00a      	b.n	8001fcc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fb6:	f3af 8000 	nop.w
 8001fba:	4601      	mov	r1, r0
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	1c5a      	adds	r2, r3, #1
 8001fc0:	60ba      	str	r2, [r7, #8]
 8001fc2:	b2ca      	uxtb	r2, r1
 8001fc4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	617b      	str	r3, [r7, #20]
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	dbf0      	blt.n	8001fb6 <_read+0x12>
  }

  return len;
 8001fd4:	687b      	ldr	r3, [r7, #4]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b086      	sub	sp, #24
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	60f8      	str	r0, [r7, #12]
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]
 8001fee:	e009      	b.n	8002004 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	1c5a      	adds	r2, r3, #1
 8001ff4:	60ba      	str	r2, [r7, #8]
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	3301      	adds	r3, #1
 8002002:	617b      	str	r3, [r7, #20]
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	429a      	cmp	r2, r3
 800200a:	dbf1      	blt.n	8001ff0 <_write+0x12>
  }
  return len;
 800200c:	687b      	ldr	r3, [r7, #4]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <_close>:

int _close(int file)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800201e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002022:	4618      	mov	r0, r3
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800203e:	605a      	str	r2, [r3, #4]
  return 0;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <_isatty>:

int _isatty(int file)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002056:	2301      	movs	r3, #1
}
 8002058:	4618      	mov	r0, r3
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
	...

08002080 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002088:	4a14      	ldr	r2, [pc, #80]	; (80020dc <_sbrk+0x5c>)
 800208a:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <_sbrk+0x60>)
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002094:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <_sbrk+0x64>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d102      	bne.n	80020a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800209c:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <_sbrk+0x64>)
 800209e:	4a12      	ldr	r2, [pc, #72]	; (80020e8 <_sbrk+0x68>)
 80020a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020a2:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <_sbrk+0x64>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4413      	add	r3, r2
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d207      	bcs.n	80020c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020b0:	f007 f902 	bl	80092b8 <__errno>
 80020b4:	4603      	mov	r3, r0
 80020b6:	220c      	movs	r2, #12
 80020b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020be:	e009      	b.n	80020d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020c0:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <_sbrk+0x64>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020c6:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <_sbrk+0x64>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4413      	add	r3, r2
 80020ce:	4a05      	ldr	r2, [pc, #20]	; (80020e4 <_sbrk+0x64>)
 80020d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020d2:	68fb      	ldr	r3, [r7, #12]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20020000 	.word	0x20020000
 80020e0:	00000400 	.word	0x00000400
 80020e4:	200001d8 	.word	0x200001d8
 80020e8:	20004d10 	.word	0x20004d10

080020ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020f0:	4b06      	ldr	r3, [pc, #24]	; (800210c <SystemInit+0x20>)
 80020f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f6:	4a05      	ldr	r2, [pc, #20]	; (800210c <SystemInit+0x20>)
 80020f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002100:	bf00      	nop
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08a      	sub	sp, #40	; 0x28
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002116:	f107 0320 	add.w	r3, r7, #32
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002120:	1d3b      	adds	r3, r7, #4
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	605a      	str	r2, [r3, #4]
 8002128:	609a      	str	r2, [r3, #8]
 800212a:	60da      	str	r2, [r3, #12]
 800212c:	611a      	str	r2, [r3, #16]
 800212e:	615a      	str	r2, [r3, #20]
 8002130:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002132:	4b2d      	ldr	r3, [pc, #180]	; (80021e8 <MX_TIM3_Init+0xd8>)
 8002134:	4a2d      	ldr	r2, [pc, #180]	; (80021ec <MX_TIM3_Init+0xdc>)
 8002136:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002138:	4b2b      	ldr	r3, [pc, #172]	; (80021e8 <MX_TIM3_Init+0xd8>)
 800213a:	2200      	movs	r2, #0
 800213c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800213e:	4b2a      	ldr	r3, [pc, #168]	; (80021e8 <MX_TIM3_Init+0xd8>)
 8002140:	2200      	movs	r2, #0
 8002142:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002144:	4b28      	ldr	r3, [pc, #160]	; (80021e8 <MX_TIM3_Init+0xd8>)
 8002146:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800214a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800214c:	4b26      	ldr	r3, [pc, #152]	; (80021e8 <MX_TIM3_Init+0xd8>)
 800214e:	2200      	movs	r2, #0
 8002150:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002152:	4b25      	ldr	r3, [pc, #148]	; (80021e8 <MX_TIM3_Init+0xd8>)
 8002154:	2280      	movs	r2, #128	; 0x80
 8002156:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002158:	4823      	ldr	r0, [pc, #140]	; (80021e8 <MX_TIM3_Init+0xd8>)
 800215a:	f003 f95d 	bl	8005418 <HAL_TIM_PWM_Init>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002164:	f7ff feb4 	bl	8001ed0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002168:	2300      	movs	r3, #0
 800216a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800216c:	2300      	movs	r3, #0
 800216e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002170:	f107 0320 	add.w	r3, r7, #32
 8002174:	4619      	mov	r1, r3
 8002176:	481c      	ldr	r0, [pc, #112]	; (80021e8 <MX_TIM3_Init+0xd8>)
 8002178:	f004 f830 	bl	80061dc <HAL_TIMEx_MasterConfigSynchronization>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002182:	f7ff fea5 	bl	8001ed0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002186:	2360      	movs	r3, #96	; 0x60
 8002188:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800218a:	2300      	movs	r3, #0
 800218c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002196:	1d3b      	adds	r3, r7, #4
 8002198:	2200      	movs	r2, #0
 800219a:	4619      	mov	r1, r3
 800219c:	4812      	ldr	r0, [pc, #72]	; (80021e8 <MX_TIM3_Init+0xd8>)
 800219e:	f003 fb5b 	bl	8005858 <HAL_TIM_PWM_ConfigChannel>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80021a8:	f7ff fe92 	bl	8001ed0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021ac:	1d3b      	adds	r3, r7, #4
 80021ae:	2204      	movs	r2, #4
 80021b0:	4619      	mov	r1, r3
 80021b2:	480d      	ldr	r0, [pc, #52]	; (80021e8 <MX_TIM3_Init+0xd8>)
 80021b4:	f003 fb50 	bl	8005858 <HAL_TIM_PWM_ConfigChannel>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80021be:	f7ff fe87 	bl	8001ed0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021c2:	1d3b      	adds	r3, r7, #4
 80021c4:	2208      	movs	r2, #8
 80021c6:	4619      	mov	r1, r3
 80021c8:	4807      	ldr	r0, [pc, #28]	; (80021e8 <MX_TIM3_Init+0xd8>)
 80021ca:	f003 fb45 	bl	8005858 <HAL_TIM_PWM_ConfigChannel>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80021d4:	f7ff fe7c 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80021d8:	4803      	ldr	r0, [pc, #12]	; (80021e8 <MX_TIM3_Init+0xd8>)
 80021da:	f000 f8a1 	bl	8002320 <HAL_TIM_MspPostInit>

}
 80021de:	bf00      	nop
 80021e0:	3728      	adds	r7, #40	; 0x28
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	200001dc 	.word	0x200001dc
 80021ec:	40000400 	.word	0x40000400

080021f0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021f6:	f107 0308 	add.w	r3, r7, #8
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	605a      	str	r2, [r3, #4]
 8002200:	609a      	str	r2, [r3, #8]
 8002202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002204:	463b      	mov	r3, r7
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800220c:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <MX_TIM4_Init+0x94>)
 800220e:	4a1e      	ldr	r2, [pc, #120]	; (8002288 <MX_TIM4_Init+0x98>)
 8002210:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 89;
 8002212:	4b1c      	ldr	r3, [pc, #112]	; (8002284 <MX_TIM4_Init+0x94>)
 8002214:	2259      	movs	r2, #89	; 0x59
 8002216:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002218:	4b1a      	ldr	r3, [pc, #104]	; (8002284 <MX_TIM4_Init+0x94>)
 800221a:	2200      	movs	r2, #0
 800221c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800221e:	4b19      	ldr	r3, [pc, #100]	; (8002284 <MX_TIM4_Init+0x94>)
 8002220:	f242 720f 	movw	r2, #9999	; 0x270f
 8002224:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002226:	4b17      	ldr	r3, [pc, #92]	; (8002284 <MX_TIM4_Init+0x94>)
 8002228:	2200      	movs	r2, #0
 800222a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800222c:	4b15      	ldr	r3, [pc, #84]	; (8002284 <MX_TIM4_Init+0x94>)
 800222e:	2280      	movs	r2, #128	; 0x80
 8002230:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002232:	4814      	ldr	r0, [pc, #80]	; (8002284 <MX_TIM4_Init+0x94>)
 8002234:	f003 f830 	bl	8005298 <HAL_TIM_Base_Init>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800223e:	f7ff fe47 	bl	8001ed0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002242:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002246:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002248:	f107 0308 	add.w	r3, r7, #8
 800224c:	4619      	mov	r1, r3
 800224e:	480d      	ldr	r0, [pc, #52]	; (8002284 <MX_TIM4_Init+0x94>)
 8002250:	f003 fbc4 	bl	80059dc <HAL_TIM_ConfigClockSource>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800225a:	f7ff fe39 	bl	8001ed0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800225e:	2300      	movs	r3, #0
 8002260:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002262:	2300      	movs	r3, #0
 8002264:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002266:	463b      	mov	r3, r7
 8002268:	4619      	mov	r1, r3
 800226a:	4806      	ldr	r0, [pc, #24]	; (8002284 <MX_TIM4_Init+0x94>)
 800226c:	f003 ffb6 	bl	80061dc <HAL_TIMEx_MasterConfigSynchronization>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002276:	f7ff fe2b 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800227a:	bf00      	nop
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20000224 	.word	0x20000224
 8002288:	40000800 	.word	0x40000800

0800228c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a0b      	ldr	r2, [pc, #44]	; (80022c8 <HAL_TIM_PWM_MspInit+0x3c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d10d      	bne.n	80022ba <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <HAL_TIM_PWM_MspInit+0x40>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	4a09      	ldr	r2, [pc, #36]	; (80022cc <HAL_TIM_PWM_MspInit+0x40>)
 80022a8:	f043 0302 	orr.w	r3, r3, #2
 80022ac:	6413      	str	r3, [r2, #64]	; 0x40
 80022ae:	4b07      	ldr	r3, [pc, #28]	; (80022cc <HAL_TIM_PWM_MspInit+0x40>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80022ba:	bf00      	nop
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	40000400 	.word	0x40000400
 80022cc:	40023800 	.word	0x40023800

080022d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a0e      	ldr	r2, [pc, #56]	; (8002318 <HAL_TIM_Base_MspInit+0x48>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d115      	bne.n	800230e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	4b0d      	ldr	r3, [pc, #52]	; (800231c <HAL_TIM_Base_MspInit+0x4c>)
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	4a0c      	ldr	r2, [pc, #48]	; (800231c <HAL_TIM_Base_MspInit+0x4c>)
 80022ec:	f043 0304 	orr.w	r3, r3, #4
 80022f0:	6413      	str	r3, [r2, #64]	; 0x40
 80022f2:	4b0a      	ldr	r3, [pc, #40]	; (800231c <HAL_TIM_Base_MspInit+0x4c>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80022fe:	2200      	movs	r2, #0
 8002300:	2105      	movs	r1, #5
 8002302:	201e      	movs	r0, #30
 8002304:	f001 f863 	bl	80033ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002308:	201e      	movs	r0, #30
 800230a:	f001 f87c 	bl	8003406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800230e:	bf00      	nop
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40000800 	.word	0x40000800
 800231c:	40023800 	.word	0x40023800

08002320 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08a      	sub	sp, #40	; 0x28
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a21      	ldr	r2, [pc, #132]	; (80023c4 <HAL_TIM_MspPostInit+0xa4>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d13b      	bne.n	80023ba <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	4b20      	ldr	r3, [pc, #128]	; (80023c8 <HAL_TIM_MspPostInit+0xa8>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	4a1f      	ldr	r2, [pc, #124]	; (80023c8 <HAL_TIM_MspPostInit+0xa8>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	6313      	str	r3, [r2, #48]	; 0x30
 8002352:	4b1d      	ldr	r3, [pc, #116]	; (80023c8 <HAL_TIM_MspPostInit+0xa8>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	4b19      	ldr	r3, [pc, #100]	; (80023c8 <HAL_TIM_MspPostInit+0xa8>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	4a18      	ldr	r2, [pc, #96]	; (80023c8 <HAL_TIM_MspPostInit+0xa8>)
 8002368:	f043 0302 	orr.w	r3, r3, #2
 800236c:	6313      	str	r3, [r2, #48]	; 0x30
 800236e:	4b16      	ldr	r3, [pc, #88]	; (80023c8 <HAL_TIM_MspPostInit+0xa8>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = RGB1_Pin|RGB2_Pin;
 800237a:	23c0      	movs	r3, #192	; 0xc0
 800237c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237e:	2302      	movs	r3, #2
 8002380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002386:	2300      	movs	r3, #0
 8002388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800238a:	2302      	movs	r3, #2
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238e:	f107 0314 	add.w	r3, r7, #20
 8002392:	4619      	mov	r1, r3
 8002394:	480d      	ldr	r0, [pc, #52]	; (80023cc <HAL_TIM_MspPostInit+0xac>)
 8002396:	f001 f851 	bl	800343c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RGB3_Pin;
 800239a:	2301      	movs	r3, #1
 800239c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239e:	2302      	movs	r3, #2
 80023a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a6:	2300      	movs	r3, #0
 80023a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023aa:	2302      	movs	r3, #2
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RGB3_GPIO_Port, &GPIO_InitStruct);
 80023ae:	f107 0314 	add.w	r3, r7, #20
 80023b2:	4619      	mov	r1, r3
 80023b4:	4806      	ldr	r0, [pc, #24]	; (80023d0 <HAL_TIM_MspPostInit+0xb0>)
 80023b6:	f001 f841 	bl	800343c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80023ba:	bf00      	nop
 80023bc:	3728      	adds	r7, #40	; 0x28
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40000400 	.word	0x40000400
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40020000 	.word	0x40020000
 80023d0:	40020400 	.word	0x40020400

080023d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800240c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023d8:	480d      	ldr	r0, [pc, #52]	; (8002410 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023da:	490e      	ldr	r1, [pc, #56]	; (8002414 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023dc:	4a0e      	ldr	r2, [pc, #56]	; (8002418 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023e0:	e002      	b.n	80023e8 <LoopCopyDataInit>

080023e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023e6:	3304      	adds	r3, #4

080023e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023ec:	d3f9      	bcc.n	80023e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ee:	4a0b      	ldr	r2, [pc, #44]	; (800241c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023f0:	4c0b      	ldr	r4, [pc, #44]	; (8002420 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023f4:	e001      	b.n	80023fa <LoopFillZerobss>

080023f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f8:	3204      	adds	r2, #4

080023fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023fc:	d3fb      	bcc.n	80023f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023fe:	f7ff fe75 	bl	80020ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002402:	f006 ff5f 	bl	80092c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002406:	f7ff fc31 	bl	8001c6c <main>
  bx  lr    
 800240a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800240c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002414:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002418:	0800a0a4 	.word	0x0800a0a4
  ldr r2, =_sbss
 800241c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002420:	20004d0c 	.word	0x20004d0c

08002424 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002424:	e7fe      	b.n	8002424 <ADC_IRQHandler>
	...

08002428 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800242c:	4b0e      	ldr	r3, [pc, #56]	; (8002468 <HAL_Init+0x40>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a0d      	ldr	r2, [pc, #52]	; (8002468 <HAL_Init+0x40>)
 8002432:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002436:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002438:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <HAL_Init+0x40>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <HAL_Init+0x40>)
 800243e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002442:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002444:	4b08      	ldr	r3, [pc, #32]	; (8002468 <HAL_Init+0x40>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a07      	ldr	r2, [pc, #28]	; (8002468 <HAL_Init+0x40>)
 800244a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002450:	2003      	movs	r0, #3
 8002452:	f000 ffb1 	bl	80033b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002456:	200f      	movs	r0, #15
 8002458:	f000 f808 	bl	800246c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800245c:	f7ff fd3e 	bl	8001edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40023c00 	.word	0x40023c00

0800246c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002474:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <HAL_InitTick+0x54>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <HAL_InitTick+0x58>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	4619      	mov	r1, r3
 800247e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002482:	fbb3 f3f1 	udiv	r3, r3, r1
 8002486:	fbb2 f3f3 	udiv	r3, r2, r3
 800248a:	4618      	mov	r0, r3
 800248c:	f000 ffc9 	bl	8003422 <HAL_SYSTICK_Config>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e00e      	b.n	80024b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b0f      	cmp	r3, #15
 800249e:	d80a      	bhi.n	80024b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024a0:	2200      	movs	r2, #0
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024a8:	f000 ff91 	bl	80033ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024ac:	4a06      	ldr	r2, [pc, #24]	; (80024c8 <HAL_InitTick+0x5c>)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	e000      	b.n	80024b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	2000000c 	.word	0x2000000c
 80024c4:	20000014 	.word	0x20000014
 80024c8:	20000010 	.word	0x20000010

080024cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d0:	4b06      	ldr	r3, [pc, #24]	; (80024ec <HAL_IncTick+0x20>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <HAL_IncTick+0x24>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4413      	add	r3, r2
 80024dc:	4a04      	ldr	r2, [pc, #16]	; (80024f0 <HAL_IncTick+0x24>)
 80024de:	6013      	str	r3, [r2, #0]
}
 80024e0:	bf00      	nop
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	20000014 	.word	0x20000014
 80024f0:	2000026c 	.word	0x2000026c

080024f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return uwTick;
 80024f8:	4b03      	ldr	r3, [pc, #12]	; (8002508 <HAL_GetTick+0x14>)
 80024fa:	681b      	ldr	r3, [r3, #0]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	2000026c 	.word	0x2000026c

0800250c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002514:	f7ff ffee 	bl	80024f4 <HAL_GetTick>
 8002518:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002524:	d005      	beq.n	8002532 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002526:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <HAL_Delay+0x44>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4413      	add	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002532:	bf00      	nop
 8002534:	f7ff ffde 	bl	80024f4 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	429a      	cmp	r2, r3
 8002542:	d8f7      	bhi.n	8002534 <HAL_Delay+0x28>
  {
  }
}
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20000014 	.word	0x20000014

08002554 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e0ed      	b.n	8002742 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 3020 	ldrb.w	r3, [r3, #32]
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d102      	bne.n	8002578 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7fe ff66 	bl	8001444 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f042 0201 	orr.w	r2, r2, #1
 8002586:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002588:	f7ff ffb4 	bl	80024f4 <HAL_GetTick>
 800258c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800258e:	e012      	b.n	80025b6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002590:	f7ff ffb0 	bl	80024f4 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b0a      	cmp	r3, #10
 800259c:	d90b      	bls.n	80025b6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2205      	movs	r2, #5
 80025ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e0c5      	b.n	8002742 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0e5      	beq.n	8002590 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0202 	bic.w	r2, r2, #2
 80025d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025d4:	f7ff ff8e 	bl	80024f4 <HAL_GetTick>
 80025d8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025da:	e012      	b.n	8002602 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025dc:	f7ff ff8a 	bl	80024f4 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b0a      	cmp	r3, #10
 80025e8:	d90b      	bls.n	8002602 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2205      	movs	r2, #5
 80025fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e09f      	b.n	8002742 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1e5      	bne.n	80025dc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	7e1b      	ldrb	r3, [r3, #24]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d108      	bne.n	800262a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	e007      	b.n	800263a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002638:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	7e5b      	ldrb	r3, [r3, #25]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d108      	bne.n	8002654 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	e007      	b.n	8002664 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002662:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	7e9b      	ldrb	r3, [r3, #26]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d108      	bne.n	800267e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0220 	orr.w	r2, r2, #32
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	e007      	b.n	800268e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 0220 	bic.w	r2, r2, #32
 800268c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	7edb      	ldrb	r3, [r3, #27]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d108      	bne.n	80026a8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0210 	bic.w	r2, r2, #16
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	e007      	b.n	80026b8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 0210 	orr.w	r2, r2, #16
 80026b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	7f1b      	ldrb	r3, [r3, #28]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d108      	bne.n	80026d2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0208 	orr.w	r2, r2, #8
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	e007      	b.n	80026e2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0208 	bic.w	r2, r2, #8
 80026e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	7f5b      	ldrb	r3, [r3, #29]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d108      	bne.n	80026fc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f042 0204 	orr.w	r2, r2, #4
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	e007      	b.n	800270c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0204 	bic.w	r2, r2, #4
 800270a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	431a      	orrs	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	ea42 0103 	orr.w	r1, r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	1e5a      	subs	r2, r3, #1
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800274c:	b480      	push	{r7}
 800274e:	b087      	sub	sp, #28
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002762:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002764:	7cfb      	ldrb	r3, [r7, #19]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d003      	beq.n	8002772 <HAL_CAN_ConfigFilter+0x26>
 800276a:	7cfb      	ldrb	r3, [r7, #19]
 800276c:	2b02      	cmp	r3, #2
 800276e:	f040 80be 	bne.w	80028ee <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002772:	4b65      	ldr	r3, [pc, #404]	; (8002908 <HAL_CAN_ConfigFilter+0x1bc>)
 8002774:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800277c:	f043 0201 	orr.w	r2, r3, #1
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800278c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	021b      	lsls	r3, r3, #8
 80027a2:	431a      	orrs	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	f003 031f 	and.w	r3, r3, #31
 80027b2:	2201      	movs	r2, #1
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	43db      	mvns	r3, r3
 80027c4:	401a      	ands	r2, r3
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d123      	bne.n	800281c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	43db      	mvns	r3, r3
 80027de:	401a      	ands	r2, r3
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80027f6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	3248      	adds	r2, #72	; 0x48
 80027fc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002810:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002812:	6979      	ldr	r1, [r7, #20]
 8002814:	3348      	adds	r3, #72	; 0x48
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	440b      	add	r3, r1
 800281a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d122      	bne.n	800286a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	431a      	orrs	r2, r3
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002844:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	3248      	adds	r2, #72	; 0x48
 800284a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800285e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002860:	6979      	ldr	r1, [r7, #20]
 8002862:	3348      	adds	r3, #72	; 0x48
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	440b      	add	r3, r1
 8002868:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d109      	bne.n	8002886 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	43db      	mvns	r3, r3
 800287c:	401a      	ands	r2, r3
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002884:	e007      	b.n	8002896 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	431a      	orrs	r2, r3
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d109      	bne.n	80028b2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	43db      	mvns	r3, r3
 80028a8:	401a      	ands	r2, r3
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80028b0:	e007      	b.n	80028c2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	431a      	orrs	r2, r3
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d107      	bne.n	80028da <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	431a      	orrs	r2, r3
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028e0:	f023 0201 	bic.w	r2, r3, #1
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	e006      	b.n	80028fc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
  }
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	371c      	adds	r7, #28
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	40006400 	.word	0x40006400

0800290c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 3020 	ldrb.w	r3, [r3, #32]
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b01      	cmp	r3, #1
 800291e:	d12e      	bne.n	800297e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2202      	movs	r2, #2
 8002924:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0201 	bic.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002938:	f7ff fddc 	bl	80024f4 <HAL_GetTick>
 800293c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800293e:	e012      	b.n	8002966 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002940:	f7ff fdd8 	bl	80024f4 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b0a      	cmp	r3, #10
 800294c:	d90b      	bls.n	8002966 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2205      	movs	r2, #5
 800295e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e012      	b.n	800298c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1e5      	bne.n	8002940 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	e006      	b.n	800298c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
  }
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002994:	b480      	push	{r7}
 8002996:	b089      	sub	sp, #36	; 0x24
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
 80029a0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029a8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80029b2:	7ffb      	ldrb	r3, [r7, #31]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d003      	beq.n	80029c0 <HAL_CAN_AddTxMessage+0x2c>
 80029b8:	7ffb      	ldrb	r3, [r7, #31]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	f040 80b8 	bne.w	8002b30 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10a      	bne.n	80029e0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d105      	bne.n	80029e0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f000 80a0 	beq.w	8002b20 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	0e1b      	lsrs	r3, r3, #24
 80029e4:	f003 0303 	and.w	r3, r3, #3
 80029e8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d907      	bls.n	8002a00 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e09e      	b.n	8002b3e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002a00:	2201      	movs	r2, #1
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	409a      	lsls	r2, r3
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10d      	bne.n	8002a2e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a1c:	68f9      	ldr	r1, [r7, #12]
 8002a1e:	6809      	ldr	r1, [r1, #0]
 8002a20:	431a      	orrs	r2, r3
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	3318      	adds	r3, #24
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	440b      	add	r3, r1
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	e00f      	b.n	8002a4e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a38:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a3e:	68f9      	ldr	r1, [r7, #12]
 8002a40:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002a42:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	3318      	adds	r3, #24
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	440b      	add	r3, r1
 8002a4c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6819      	ldr	r1, [r3, #0]
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	691a      	ldr	r2, [r3, #16]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	3318      	adds	r3, #24
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	440b      	add	r3, r1
 8002a5e:	3304      	adds	r3, #4
 8002a60:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	7d1b      	ldrb	r3, [r3, #20]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d111      	bne.n	8002a8e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	3318      	adds	r3, #24
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	4413      	add	r3, r2
 8002a76:	3304      	adds	r3, #4
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	6811      	ldr	r1, [r2, #0]
 8002a7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	3318      	adds	r3, #24
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	440b      	add	r3, r1
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	3307      	adds	r3, #7
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	061a      	lsls	r2, r3, #24
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3306      	adds	r3, #6
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	041b      	lsls	r3, r3, #16
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3305      	adds	r3, #5
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	021b      	lsls	r3, r3, #8
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	3204      	adds	r2, #4
 8002aae:	7812      	ldrb	r2, [r2, #0]
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	6811      	ldr	r1, [r2, #0]
 8002ab6:	ea43 0200 	orr.w	r2, r3, r0
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	440b      	add	r3, r1
 8002ac0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002ac4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	3303      	adds	r3, #3
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	061a      	lsls	r2, r3, #24
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	3302      	adds	r3, #2
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	041b      	lsls	r3, r3, #16
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3301      	adds	r3, #1
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	021b      	lsls	r3, r3, #8
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	7812      	ldrb	r2, [r2, #0]
 8002ae6:	4610      	mov	r0, r2
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	6811      	ldr	r1, [r2, #0]
 8002aec:	ea43 0200 	orr.w	r2, r3, r0
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	440b      	add	r3, r1
 8002af6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002afa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	3318      	adds	r3, #24
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	4413      	add	r3, r2
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	6811      	ldr	r1, [r2, #0]
 8002b0e:	f043 0201 	orr.w	r2, r3, #1
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	3318      	adds	r3, #24
 8002b16:	011b      	lsls	r3, r3, #4
 8002b18:	440b      	add	r3, r1
 8002b1a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	e00e      	b.n	8002b3e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e006      	b.n	8002b3e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
  }
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3724      	adds	r7, #36	; 0x24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b087      	sub	sp, #28
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	60f8      	str	r0, [r7, #12]
 8002b52:	60b9      	str	r1, [r7, #8]
 8002b54:	607a      	str	r2, [r7, #4]
 8002b56:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b5e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b60:	7dfb      	ldrb	r3, [r7, #23]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d003      	beq.n	8002b6e <HAL_CAN_GetRxMessage+0x24>
 8002b66:	7dfb      	ldrb	r3, [r7, #23]
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	f040 80f3 	bne.w	8002d54 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10e      	bne.n	8002b92 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d116      	bne.n	8002bb0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e0e7      	b.n	8002d62 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	f003 0303 	and.w	r3, r3, #3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d107      	bne.n	8002bb0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0d8      	b.n	8002d62 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	331b      	adds	r3, #27
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	4413      	add	r3, r2
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0204 	and.w	r2, r3, #4
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10c      	bne.n	8002be8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	331b      	adds	r3, #27
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	4413      	add	r3, r2
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	0d5b      	lsrs	r3, r3, #21
 8002bde:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	e00b      	b.n	8002c00 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	331b      	adds	r3, #27
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	4413      	add	r3, r2
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	08db      	lsrs	r3, r3, #3
 8002bf8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	331b      	adds	r3, #27
 8002c08:	011b      	lsls	r3, r3, #4
 8002c0a:	4413      	add	r3, r2
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0202 	and.w	r2, r3, #2
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	331b      	adds	r3, #27
 8002c1e:	011b      	lsls	r3, r3, #4
 8002c20:	4413      	add	r3, r2
 8002c22:	3304      	adds	r3, #4
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 020f 	and.w	r2, r3, #15
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	331b      	adds	r3, #27
 8002c36:	011b      	lsls	r3, r3, #4
 8002c38:	4413      	add	r3, r2
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	0a1b      	lsrs	r3, r3, #8
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	331b      	adds	r3, #27
 8002c4e:	011b      	lsls	r3, r3, #4
 8002c50:	4413      	add	r3, r2
 8002c52:	3304      	adds	r3, #4
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	0c1b      	lsrs	r3, r3, #16
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	011b      	lsls	r3, r3, #4
 8002c66:	4413      	add	r3, r2
 8002c68:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	011b      	lsls	r3, r3, #4
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	0a1a      	lsrs	r2, r3, #8
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	011b      	lsls	r3, r3, #4
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	0c1a      	lsrs	r2, r3, #16
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	3302      	adds	r3, #2
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	0e1a      	lsrs	r2, r3, #24
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	3303      	adds	r3, #3
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	011b      	lsls	r3, r3, #4
 8002cca:	4413      	add	r3, r2
 8002ccc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	0a1a      	lsrs	r2, r3, #8
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	3305      	adds	r3, #5
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	011b      	lsls	r3, r3, #4
 8002cfc:	4413      	add	r3, r2
 8002cfe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	0c1a      	lsrs	r2, r3, #16
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	3306      	adds	r3, #6
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	4413      	add	r3, r2
 8002d18:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	0e1a      	lsrs	r2, r3, #24
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	3307      	adds	r3, #7
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d108      	bne.n	8002d40 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68da      	ldr	r2, [r3, #12]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f042 0220 	orr.w	r2, r2, #32
 8002d3c:	60da      	str	r2, [r3, #12]
 8002d3e:	e007      	b.n	8002d50 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	691a      	ldr	r2, [r3, #16]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0220 	orr.w	r2, r2, #32
 8002d4e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002d50:	2300      	movs	r3, #0
 8002d52:	e006      	b.n	8002d62 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
  }
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	371c      	adds	r7, #28
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b085      	sub	sp, #20
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
 8002d76:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d7e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d002      	beq.n	8002d8c <HAL_CAN_ActivateNotification+0x1e>
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d109      	bne.n	8002da0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6959      	ldr	r1, [r3, #20]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	e006      	b.n	8002dae <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
  }
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b08a      	sub	sp, #40	; 0x28
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d07c      	beq.n	8002efa <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d023      	beq.n	8002e52 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 f983 	bl	8003128 <HAL_CAN_TxMailbox0CompleteCallback>
 8002e22:	e016      	b.n	8002e52 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	f003 0304 	and.w	r3, r3, #4
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d004      	beq.n	8002e38 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e34:	627b      	str	r3, [r7, #36]	; 0x24
 8002e36:	e00c      	b.n	8002e52 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d004      	beq.n	8002e4c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24
 8002e4a:	e002      	b.n	8002e52 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f989 	bl	8003164 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d024      	beq.n	8002ea6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e64:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f963 	bl	800313c <HAL_CAN_TxMailbox1CompleteCallback>
 8002e76:	e016      	b.n	8002ea6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d004      	beq.n	8002e8c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e84:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24
 8002e8a:	e00c      	b.n	8002ea6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d004      	beq.n	8002ea0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e9e:	e002      	b.n	8002ea6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f969 	bl	8003178 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d024      	beq.n	8002efa <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002eb8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f943 	bl	8003150 <HAL_CAN_TxMailbox2CompleteCallback>
 8002eca:	e016      	b.n	8002efa <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d004      	beq.n	8002ee0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002edc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ede:	e00c      	b.n	8002efa <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d004      	beq.n	8002ef4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef2:	e002      	b.n	8002efa <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f949 	bl	800318c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	f003 0308 	and.w	r3, r3, #8
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00c      	beq.n	8002f1e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f003 0310 	and.w	r3, r3, #16
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d007      	beq.n	8002f1e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2210      	movs	r2, #16
 8002f1c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00b      	beq.n	8002f40 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d006      	beq.n	8002f40 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2208      	movs	r2, #8
 8002f38:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f930 	bl	80031a0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d009      	beq.n	8002f5e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f003 0303 	and.w	r3, r3, #3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d002      	beq.n	8002f5e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f7fe fe39 	bl	8001bd0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00c      	beq.n	8002f82 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d007      	beq.n	8002f82 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2210      	movs	r2, #16
 8002f80:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	f003 0320 	and.w	r3, r3, #32
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00b      	beq.n	8002fa4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d006      	beq.n	8002fa4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2208      	movs	r2, #8
 8002f9c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f912 	bl	80031c8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002fa4:	6a3b      	ldr	r3, [r7, #32]
 8002fa6:	f003 0310 	and.w	r3, r3, #16
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d009      	beq.n	8002fc2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d002      	beq.n	8002fc2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f8f9 	bl	80031b4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002fc2:	6a3b      	ldr	r3, [r7, #32]
 8002fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00b      	beq.n	8002fe4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	f003 0310 	and.w	r3, r3, #16
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d006      	beq.n	8002fe4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2210      	movs	r2, #16
 8002fdc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f8fc 	bl	80031dc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00b      	beq.n	8003006 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	f003 0308 	and.w	r3, r3, #8
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d006      	beq.n	8003006 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2208      	movs	r2, #8
 8002ffe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f8f5 	bl	80031f0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d07b      	beq.n	8003108 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	2b00      	cmp	r3, #0
 8003018:	d072      	beq.n	8003100 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800301a:	6a3b      	ldr	r3, [r7, #32]
 800301c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003020:	2b00      	cmp	r3, #0
 8003022:	d008      	beq.n	8003036 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	f043 0301 	orr.w	r3, r3, #1
 8003034:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003036:	6a3b      	ldr	r3, [r7, #32]
 8003038:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800303c:	2b00      	cmp	r3, #0
 800303e:	d008      	beq.n	8003052 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	f043 0302 	orr.w	r3, r3, #2
 8003050:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003058:	2b00      	cmp	r3, #0
 800305a:	d008      	beq.n	800306e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	f043 0304 	orr.w	r3, r3, #4
 800306c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003074:	2b00      	cmp	r3, #0
 8003076:	d043      	beq.n	8003100 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800307e:	2b00      	cmp	r3, #0
 8003080:	d03e      	beq.n	8003100 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003088:	2b60      	cmp	r3, #96	; 0x60
 800308a:	d02b      	beq.n	80030e4 <HAL_CAN_IRQHandler+0x32a>
 800308c:	2b60      	cmp	r3, #96	; 0x60
 800308e:	d82e      	bhi.n	80030ee <HAL_CAN_IRQHandler+0x334>
 8003090:	2b50      	cmp	r3, #80	; 0x50
 8003092:	d022      	beq.n	80030da <HAL_CAN_IRQHandler+0x320>
 8003094:	2b50      	cmp	r3, #80	; 0x50
 8003096:	d82a      	bhi.n	80030ee <HAL_CAN_IRQHandler+0x334>
 8003098:	2b40      	cmp	r3, #64	; 0x40
 800309a:	d019      	beq.n	80030d0 <HAL_CAN_IRQHandler+0x316>
 800309c:	2b40      	cmp	r3, #64	; 0x40
 800309e:	d826      	bhi.n	80030ee <HAL_CAN_IRQHandler+0x334>
 80030a0:	2b30      	cmp	r3, #48	; 0x30
 80030a2:	d010      	beq.n	80030c6 <HAL_CAN_IRQHandler+0x30c>
 80030a4:	2b30      	cmp	r3, #48	; 0x30
 80030a6:	d822      	bhi.n	80030ee <HAL_CAN_IRQHandler+0x334>
 80030a8:	2b10      	cmp	r3, #16
 80030aa:	d002      	beq.n	80030b2 <HAL_CAN_IRQHandler+0x2f8>
 80030ac:	2b20      	cmp	r3, #32
 80030ae:	d005      	beq.n	80030bc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80030b0:	e01d      	b.n	80030ee <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	f043 0308 	orr.w	r3, r3, #8
 80030b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030ba:	e019      	b.n	80030f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	f043 0310 	orr.w	r3, r3, #16
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030c4:	e014      	b.n	80030f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	f043 0320 	orr.w	r3, r3, #32
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030ce:	e00f      	b.n	80030f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030d8:	e00a      	b.n	80030f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030e2:	e005      	b.n	80030f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030ec:	e000      	b.n	80030f0 <HAL_CAN_IRQHandler+0x336>
            break;
 80030ee:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	699a      	ldr	r2, [r3, #24]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80030fe:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2204      	movs	r2, #4
 8003106:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	2b00      	cmp	r3, #0
 800310c:	d008      	beq.n	8003120 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f872 	bl	8003204 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003120:	bf00      	nop
 8003122:	3728      	adds	r7, #40	; 0x28
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003228:	4b0c      	ldr	r3, [pc, #48]	; (800325c <__NVIC_SetPriorityGrouping+0x44>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003234:	4013      	ands	r3, r2
 8003236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003240:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800324a:	4a04      	ldr	r2, [pc, #16]	; (800325c <__NVIC_SetPriorityGrouping+0x44>)
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	60d3      	str	r3, [r2, #12]
}
 8003250:	bf00      	nop
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	e000ed00 	.word	0xe000ed00

08003260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003264:	4b04      	ldr	r3, [pc, #16]	; (8003278 <__NVIC_GetPriorityGrouping+0x18>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	0a1b      	lsrs	r3, r3, #8
 800326a:	f003 0307 	and.w	r3, r3, #7
}
 800326e:	4618      	mov	r0, r3
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	e000ed00 	.word	0xe000ed00

0800327c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328a:	2b00      	cmp	r3, #0
 800328c:	db0b      	blt.n	80032a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800328e:	79fb      	ldrb	r3, [r7, #7]
 8003290:	f003 021f 	and.w	r2, r3, #31
 8003294:	4907      	ldr	r1, [pc, #28]	; (80032b4 <__NVIC_EnableIRQ+0x38>)
 8003296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329a:	095b      	lsrs	r3, r3, #5
 800329c:	2001      	movs	r0, #1
 800329e:	fa00 f202 	lsl.w	r2, r0, r2
 80032a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	e000e100 	.word	0xe000e100

080032b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	6039      	str	r1, [r7, #0]
 80032c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	db0a      	blt.n	80032e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	b2da      	uxtb	r2, r3
 80032d0:	490c      	ldr	r1, [pc, #48]	; (8003304 <__NVIC_SetPriority+0x4c>)
 80032d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d6:	0112      	lsls	r2, r2, #4
 80032d8:	b2d2      	uxtb	r2, r2
 80032da:	440b      	add	r3, r1
 80032dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032e0:	e00a      	b.n	80032f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	4908      	ldr	r1, [pc, #32]	; (8003308 <__NVIC_SetPriority+0x50>)
 80032e8:	79fb      	ldrb	r3, [r7, #7]
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	3b04      	subs	r3, #4
 80032f0:	0112      	lsls	r2, r2, #4
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	440b      	add	r3, r1
 80032f6:	761a      	strb	r2, [r3, #24]
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	e000e100 	.word	0xe000e100
 8003308:	e000ed00 	.word	0xe000ed00

0800330c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800330c:	b480      	push	{r7}
 800330e:	b089      	sub	sp, #36	; 0x24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f1c3 0307 	rsb	r3, r3, #7
 8003326:	2b04      	cmp	r3, #4
 8003328:	bf28      	it	cs
 800332a:	2304      	movcs	r3, #4
 800332c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	3304      	adds	r3, #4
 8003332:	2b06      	cmp	r3, #6
 8003334:	d902      	bls.n	800333c <NVIC_EncodePriority+0x30>
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	3b03      	subs	r3, #3
 800333a:	e000      	b.n	800333e <NVIC_EncodePriority+0x32>
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003340:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43da      	mvns	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	401a      	ands	r2, r3
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003354:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	fa01 f303 	lsl.w	r3, r1, r3
 800335e:	43d9      	mvns	r1, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003364:	4313      	orrs	r3, r2
         );
}
 8003366:	4618      	mov	r0, r3
 8003368:	3724      	adds	r7, #36	; 0x24
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
	...

08003374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3b01      	subs	r3, #1
 8003380:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003384:	d301      	bcc.n	800338a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003386:	2301      	movs	r3, #1
 8003388:	e00f      	b.n	80033aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800338a:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <SysTick_Config+0x40>)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3b01      	subs	r3, #1
 8003390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003392:	210f      	movs	r1, #15
 8003394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003398:	f7ff ff8e 	bl	80032b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800339c:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <SysTick_Config+0x40>)
 800339e:	2200      	movs	r2, #0
 80033a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033a2:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <SysTick_Config+0x40>)
 80033a4:	2207      	movs	r2, #7
 80033a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	e000e010 	.word	0xe000e010

080033b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff ff29 	bl	8003218 <__NVIC_SetPriorityGrouping>
}
 80033c6:	bf00      	nop
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b086      	sub	sp, #24
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	4603      	mov	r3, r0
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
 80033da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033e0:	f7ff ff3e 	bl	8003260 <__NVIC_GetPriorityGrouping>
 80033e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	6978      	ldr	r0, [r7, #20]
 80033ec:	f7ff ff8e 	bl	800330c <NVIC_EncodePriority>
 80033f0:	4602      	mov	r2, r0
 80033f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033f6:	4611      	mov	r1, r2
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff ff5d 	bl	80032b8 <__NVIC_SetPriority>
}
 80033fe:	bf00      	nop
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
 800340c:	4603      	mov	r3, r0
 800340e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff ff31 	bl	800327c <__NVIC_EnableIRQ>
}
 800341a:	bf00      	nop
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b082      	sub	sp, #8
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7ff ffa2 	bl	8003374 <SysTick_Config>
 8003430:	4603      	mov	r3, r0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
	...

0800343c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800343c:	b480      	push	{r7}
 800343e:	b089      	sub	sp, #36	; 0x24
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003446:	2300      	movs	r3, #0
 8003448:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800344a:	2300      	movs	r3, #0
 800344c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800344e:	2300      	movs	r3, #0
 8003450:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003452:	2300      	movs	r3, #0
 8003454:	61fb      	str	r3, [r7, #28]
 8003456:	e165      	b.n	8003724 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003458:	2201      	movs	r2, #1
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	4013      	ands	r3, r2
 800346a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	429a      	cmp	r2, r3
 8003472:	f040 8154 	bne.w	800371e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	2b01      	cmp	r3, #1
 8003480:	d005      	beq.n	800348e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800348a:	2b02      	cmp	r3, #2
 800348c:	d130      	bne.n	80034f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	2203      	movs	r2, #3
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	43db      	mvns	r3, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4013      	ands	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034c4:	2201      	movs	r2, #1
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	43db      	mvns	r3, r3
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4013      	ands	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	091b      	lsrs	r3, r3, #4
 80034da:	f003 0201 	and.w	r2, r3, #1
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	2b03      	cmp	r3, #3
 80034fa:	d017      	beq.n	800352c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	2203      	movs	r2, #3
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	43db      	mvns	r3, r3
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	4013      	ands	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4313      	orrs	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f003 0303 	and.w	r3, r3, #3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d123      	bne.n	8003580 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	08da      	lsrs	r2, r3, #3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3208      	adds	r2, #8
 8003540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003544:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	220f      	movs	r2, #15
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	43db      	mvns	r3, r3
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4013      	ands	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	691a      	ldr	r2, [r3, #16]
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4313      	orrs	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	08da      	lsrs	r2, r3, #3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3208      	adds	r2, #8
 800357a:	69b9      	ldr	r1, [r7, #24]
 800357c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	2203      	movs	r2, #3
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	43db      	mvns	r3, r3
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	4013      	ands	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f003 0203 	and.w	r2, r3, #3
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 80ae 	beq.w	800371e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035c2:	2300      	movs	r3, #0
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	4b5d      	ldr	r3, [pc, #372]	; (800373c <HAL_GPIO_Init+0x300>)
 80035c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ca:	4a5c      	ldr	r2, [pc, #368]	; (800373c <HAL_GPIO_Init+0x300>)
 80035cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035d0:	6453      	str	r3, [r2, #68]	; 0x44
 80035d2:	4b5a      	ldr	r3, [pc, #360]	; (800373c <HAL_GPIO_Init+0x300>)
 80035d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035de:	4a58      	ldr	r2, [pc, #352]	; (8003740 <HAL_GPIO_Init+0x304>)
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	089b      	lsrs	r3, r3, #2
 80035e4:	3302      	adds	r3, #2
 80035e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	220f      	movs	r2, #15
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	43db      	mvns	r3, r3
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	4013      	ands	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a4f      	ldr	r2, [pc, #316]	; (8003744 <HAL_GPIO_Init+0x308>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d025      	beq.n	8003656 <HAL_GPIO_Init+0x21a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a4e      	ldr	r2, [pc, #312]	; (8003748 <HAL_GPIO_Init+0x30c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d01f      	beq.n	8003652 <HAL_GPIO_Init+0x216>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a4d      	ldr	r2, [pc, #308]	; (800374c <HAL_GPIO_Init+0x310>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d019      	beq.n	800364e <HAL_GPIO_Init+0x212>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a4c      	ldr	r2, [pc, #304]	; (8003750 <HAL_GPIO_Init+0x314>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d013      	beq.n	800364a <HAL_GPIO_Init+0x20e>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a4b      	ldr	r2, [pc, #300]	; (8003754 <HAL_GPIO_Init+0x318>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d00d      	beq.n	8003646 <HAL_GPIO_Init+0x20a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a4a      	ldr	r2, [pc, #296]	; (8003758 <HAL_GPIO_Init+0x31c>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d007      	beq.n	8003642 <HAL_GPIO_Init+0x206>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a49      	ldr	r2, [pc, #292]	; (800375c <HAL_GPIO_Init+0x320>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d101      	bne.n	800363e <HAL_GPIO_Init+0x202>
 800363a:	2306      	movs	r3, #6
 800363c:	e00c      	b.n	8003658 <HAL_GPIO_Init+0x21c>
 800363e:	2307      	movs	r3, #7
 8003640:	e00a      	b.n	8003658 <HAL_GPIO_Init+0x21c>
 8003642:	2305      	movs	r3, #5
 8003644:	e008      	b.n	8003658 <HAL_GPIO_Init+0x21c>
 8003646:	2304      	movs	r3, #4
 8003648:	e006      	b.n	8003658 <HAL_GPIO_Init+0x21c>
 800364a:	2303      	movs	r3, #3
 800364c:	e004      	b.n	8003658 <HAL_GPIO_Init+0x21c>
 800364e:	2302      	movs	r3, #2
 8003650:	e002      	b.n	8003658 <HAL_GPIO_Init+0x21c>
 8003652:	2301      	movs	r3, #1
 8003654:	e000      	b.n	8003658 <HAL_GPIO_Init+0x21c>
 8003656:	2300      	movs	r3, #0
 8003658:	69fa      	ldr	r2, [r7, #28]
 800365a:	f002 0203 	and.w	r2, r2, #3
 800365e:	0092      	lsls	r2, r2, #2
 8003660:	4093      	lsls	r3, r2
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	4313      	orrs	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003668:	4935      	ldr	r1, [pc, #212]	; (8003740 <HAL_GPIO_Init+0x304>)
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	089b      	lsrs	r3, r3, #2
 800366e:	3302      	adds	r3, #2
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003676:	4b3a      	ldr	r3, [pc, #232]	; (8003760 <HAL_GPIO_Init+0x324>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	43db      	mvns	r3, r3
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	4013      	ands	r3, r2
 8003684:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	4313      	orrs	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800369a:	4a31      	ldr	r2, [pc, #196]	; (8003760 <HAL_GPIO_Init+0x324>)
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036a0:	4b2f      	ldr	r3, [pc, #188]	; (8003760 <HAL_GPIO_Init+0x324>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	43db      	mvns	r3, r3
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	4013      	ands	r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036c4:	4a26      	ldr	r2, [pc, #152]	; (8003760 <HAL_GPIO_Init+0x324>)
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036ca:	4b25      	ldr	r3, [pc, #148]	; (8003760 <HAL_GPIO_Init+0x324>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	43db      	mvns	r3, r3
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	4013      	ands	r3, r2
 80036d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036ee:	4a1c      	ldr	r2, [pc, #112]	; (8003760 <HAL_GPIO_Init+0x324>)
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036f4:	4b1a      	ldr	r3, [pc, #104]	; (8003760 <HAL_GPIO_Init+0x324>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	43db      	mvns	r3, r3
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	4013      	ands	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	4313      	orrs	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003718:	4a11      	ldr	r2, [pc, #68]	; (8003760 <HAL_GPIO_Init+0x324>)
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	3301      	adds	r3, #1
 8003722:	61fb      	str	r3, [r7, #28]
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	2b0f      	cmp	r3, #15
 8003728:	f67f ae96 	bls.w	8003458 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800372c:	bf00      	nop
 800372e:	bf00      	nop
 8003730:	3724      	adds	r7, #36	; 0x24
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	40023800 	.word	0x40023800
 8003740:	40013800 	.word	0x40013800
 8003744:	40020000 	.word	0x40020000
 8003748:	40020400 	.word	0x40020400
 800374c:	40020800 	.word	0x40020800
 8003750:	40020c00 	.word	0x40020c00
 8003754:	40021000 	.word	0x40021000
 8003758:	40021400 	.word	0x40021400
 800375c:	40021800 	.word	0x40021800
 8003760:	40013c00 	.word	0x40013c00

08003764 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	460b      	mov	r3, r1
 800376e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	691a      	ldr	r2, [r3, #16]
 8003774:	887b      	ldrh	r3, [r7, #2]
 8003776:	4013      	ands	r3, r2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d002      	beq.n	8003782 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800377c:	2301      	movs	r3, #1
 800377e:	73fb      	strb	r3, [r7, #15]
 8003780:	e001      	b.n	8003786 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003782:	2300      	movs	r3, #0
 8003784:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003786:	7bfb      	ldrb	r3, [r7, #15]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	460b      	mov	r3, r1
 800379e:	807b      	strh	r3, [r7, #2]
 80037a0:	4613      	mov	r3, r2
 80037a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037a4:	787b      	ldrb	r3, [r7, #1]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037aa:	887a      	ldrh	r2, [r7, #2]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037b0:	e003      	b.n	80037ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037b2:	887b      	ldrh	r3, [r7, #2]
 80037b4:	041a      	lsls	r2, r3, #16
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	619a      	str	r2, [r3, #24]
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b085      	sub	sp, #20
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
 80037ce:	460b      	mov	r3, r1
 80037d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037d8:	887a      	ldrh	r2, [r7, #2]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	4013      	ands	r3, r2
 80037de:	041a      	lsls	r2, r3, #16
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	43d9      	mvns	r1, r3
 80037e4:	887b      	ldrh	r3, [r7, #2]
 80037e6:	400b      	ands	r3, r1
 80037e8:	431a      	orrs	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	619a      	str	r2, [r3, #24]
}
 80037ee:	bf00      	nop
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
	...

080037fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e12b      	b.n	8003a66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d106      	bne.n	8003828 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7fe f98c 	bl	8001b40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2224      	movs	r2, #36	; 0x24
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0201 	bic.w	r2, r2, #1
 800383e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800384e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800385e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003860:	f001 f8be 	bl	80049e0 <HAL_RCC_GetPCLK1Freq>
 8003864:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	4a81      	ldr	r2, [pc, #516]	; (8003a70 <HAL_I2C_Init+0x274>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d807      	bhi.n	8003880 <HAL_I2C_Init+0x84>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	4a80      	ldr	r2, [pc, #512]	; (8003a74 <HAL_I2C_Init+0x278>)
 8003874:	4293      	cmp	r3, r2
 8003876:	bf94      	ite	ls
 8003878:	2301      	movls	r3, #1
 800387a:	2300      	movhi	r3, #0
 800387c:	b2db      	uxtb	r3, r3
 800387e:	e006      	b.n	800388e <HAL_I2C_Init+0x92>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4a7d      	ldr	r2, [pc, #500]	; (8003a78 <HAL_I2C_Init+0x27c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	bf94      	ite	ls
 8003888:	2301      	movls	r3, #1
 800388a:	2300      	movhi	r3, #0
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e0e7      	b.n	8003a66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4a78      	ldr	r2, [pc, #480]	; (8003a7c <HAL_I2C_Init+0x280>)
 800389a:	fba2 2303 	umull	r2, r3, r2, r3
 800389e:	0c9b      	lsrs	r3, r3, #18
 80038a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	4a6a      	ldr	r2, [pc, #424]	; (8003a70 <HAL_I2C_Init+0x274>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d802      	bhi.n	80038d0 <HAL_I2C_Init+0xd4>
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	3301      	adds	r3, #1
 80038ce:	e009      	b.n	80038e4 <HAL_I2C_Init+0xe8>
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038d6:	fb02 f303 	mul.w	r3, r2, r3
 80038da:	4a69      	ldr	r2, [pc, #420]	; (8003a80 <HAL_I2C_Init+0x284>)
 80038dc:	fba2 2303 	umull	r2, r3, r2, r3
 80038e0:	099b      	lsrs	r3, r3, #6
 80038e2:	3301      	adds	r3, #1
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6812      	ldr	r2, [r2, #0]
 80038e8:	430b      	orrs	r3, r1
 80038ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80038f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	495c      	ldr	r1, [pc, #368]	; (8003a70 <HAL_I2C_Init+0x274>)
 8003900:	428b      	cmp	r3, r1
 8003902:	d819      	bhi.n	8003938 <HAL_I2C_Init+0x13c>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	1e59      	subs	r1, r3, #1
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003912:	1c59      	adds	r1, r3, #1
 8003914:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003918:	400b      	ands	r3, r1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <HAL_I2C_Init+0x138>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	1e59      	subs	r1, r3, #1
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	fbb1 f3f3 	udiv	r3, r1, r3
 800392c:	3301      	adds	r3, #1
 800392e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003932:	e051      	b.n	80039d8 <HAL_I2C_Init+0x1dc>
 8003934:	2304      	movs	r3, #4
 8003936:	e04f      	b.n	80039d8 <HAL_I2C_Init+0x1dc>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d111      	bne.n	8003964 <HAL_I2C_Init+0x168>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	1e58      	subs	r0, r3, #1
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6859      	ldr	r1, [r3, #4]
 8003948:	460b      	mov	r3, r1
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	440b      	add	r3, r1
 800394e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003952:	3301      	adds	r3, #1
 8003954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003958:	2b00      	cmp	r3, #0
 800395a:	bf0c      	ite	eq
 800395c:	2301      	moveq	r3, #1
 800395e:	2300      	movne	r3, #0
 8003960:	b2db      	uxtb	r3, r3
 8003962:	e012      	b.n	800398a <HAL_I2C_Init+0x18e>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	1e58      	subs	r0, r3, #1
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6859      	ldr	r1, [r3, #4]
 800396c:	460b      	mov	r3, r1
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	0099      	lsls	r1, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	fbb0 f3f3 	udiv	r3, r0, r3
 800397a:	3301      	adds	r3, #1
 800397c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003980:	2b00      	cmp	r3, #0
 8003982:	bf0c      	ite	eq
 8003984:	2301      	moveq	r3, #1
 8003986:	2300      	movne	r3, #0
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_I2C_Init+0x196>
 800398e:	2301      	movs	r3, #1
 8003990:	e022      	b.n	80039d8 <HAL_I2C_Init+0x1dc>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10e      	bne.n	80039b8 <HAL_I2C_Init+0x1bc>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	1e58      	subs	r0, r3, #1
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6859      	ldr	r1, [r3, #4]
 80039a2:	460b      	mov	r3, r1
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	440b      	add	r3, r1
 80039a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ac:	3301      	adds	r3, #1
 80039ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039b6:	e00f      	b.n	80039d8 <HAL_I2C_Init+0x1dc>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	1e58      	subs	r0, r3, #1
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6859      	ldr	r1, [r3, #4]
 80039c0:	460b      	mov	r3, r1
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	0099      	lsls	r1, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ce:	3301      	adds	r3, #1
 80039d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039d8:	6879      	ldr	r1, [r7, #4]
 80039da:	6809      	ldr	r1, [r1, #0]
 80039dc:	4313      	orrs	r3, r2
 80039de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	69da      	ldr	r2, [r3, #28]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6911      	ldr	r1, [r2, #16]
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	68d2      	ldr	r2, [r2, #12]
 8003a12:	4311      	orrs	r1, r2
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6812      	ldr	r2, [r2, #0]
 8003a18:	430b      	orrs	r3, r1
 8003a1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	695a      	ldr	r2, [r3, #20]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0201 	orr.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2220      	movs	r2, #32
 8003a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	000186a0 	.word	0x000186a0
 8003a74:	001e847f 	.word	0x001e847f
 8003a78:	003d08ff 	.word	0x003d08ff
 8003a7c:	431bde83 	.word	0x431bde83
 8003a80:	10624dd3 	.word	0x10624dd3

08003a84 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b088      	sub	sp, #32
 8003a88:	af02      	add	r7, sp, #8
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	607a      	str	r2, [r7, #4]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	460b      	mov	r3, r1
 8003a92:	817b      	strh	r3, [r7, #10]
 8003a94:	4613      	mov	r3, r2
 8003a96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a98:	f7fe fd2c 	bl	80024f4 <HAL_GetTick>
 8003a9c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b20      	cmp	r3, #32
 8003aa8:	f040 80e0 	bne.w	8003c6c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	2319      	movs	r3, #25
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	4970      	ldr	r1, [pc, #448]	; (8003c78 <HAL_I2C_Master_Transmit+0x1f4>)
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 fc72 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	e0d3      	b.n	8003c6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d101      	bne.n	8003ad4 <HAL_I2C_Master_Transmit+0x50>
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	e0cc      	b.n	8003c6e <HAL_I2C_Master_Transmit+0x1ea>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d007      	beq.n	8003afa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f042 0201 	orr.w	r2, r2, #1
 8003af8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2221      	movs	r2, #33	; 0x21
 8003b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2210      	movs	r2, #16
 8003b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	893a      	ldrh	r2, [r7, #8]
 8003b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	4a50      	ldr	r2, [pc, #320]	; (8003c7c <HAL_I2C_Master_Transmit+0x1f8>)
 8003b3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b3c:	8979      	ldrh	r1, [r7, #10]
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	6a3a      	ldr	r2, [r7, #32]
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 fadc 	bl	8004100 <I2C_MasterRequestWrite>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e08d      	b.n	8003c6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b52:	2300      	movs	r3, #0
 8003b54:	613b      	str	r3, [r7, #16]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	613b      	str	r3, [r7, #16]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003b68:	e066      	b.n	8003c38 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	6a39      	ldr	r1, [r7, #32]
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 fcec 	bl	800454c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00d      	beq.n	8003b96 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d107      	bne.n	8003b92 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e06b      	b.n	8003c6e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	781a      	ldrb	r2, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	d11b      	bne.n	8003c0c <HAL_I2C_Master_Transmit+0x188>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d017      	beq.n	8003c0c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	781a      	ldrb	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	1c5a      	adds	r2, r3, #1
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	6a39      	ldr	r1, [r7, #32]
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 fcdc 	bl	80045ce <I2C_WaitOnBTFFlagUntilTimeout>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00d      	beq.n	8003c38 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	2b04      	cmp	r3, #4
 8003c22:	d107      	bne.n	8003c34 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c32:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e01a      	b.n	8003c6e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d194      	bne.n	8003b6a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2220      	movs	r2, #32
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	e000      	b.n	8003c6e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003c6c:	2302      	movs	r3, #2
  }
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	00100002 	.word	0x00100002
 8003c7c:	ffff0000 	.word	0xffff0000

08003c80 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08c      	sub	sp, #48	; 0x30
 8003c84:	af02      	add	r7, sp, #8
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	607a      	str	r2, [r7, #4]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	817b      	strh	r3, [r7, #10]
 8003c90:	4613      	mov	r3, r2
 8003c92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c94:	f7fe fc2e 	bl	80024f4 <HAL_GetTick>
 8003c98:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b20      	cmp	r3, #32
 8003ca4:	f040 820b 	bne.w	80040be <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	2319      	movs	r3, #25
 8003cae:	2201      	movs	r2, #1
 8003cb0:	497c      	ldr	r1, [pc, #496]	; (8003ea4 <HAL_I2C_Master_Receive+0x224>)
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 fb74 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	e1fe      	b.n	80040c0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <HAL_I2C_Master_Receive+0x50>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e1f7      	b.n	80040c0 <HAL_I2C_Master_Receive+0x440>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d007      	beq.n	8003cf6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f042 0201 	orr.w	r2, r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2222      	movs	r2, #34	; 0x22
 8003d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2210      	movs	r2, #16
 8003d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	893a      	ldrh	r2, [r7, #8]
 8003d26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	4a5c      	ldr	r2, [pc, #368]	; (8003ea8 <HAL_I2C_Master_Receive+0x228>)
 8003d36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d38:	8979      	ldrh	r1, [r7, #10]
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 fa60 	bl	8004204 <I2C_MasterRequestRead>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e1b8      	b.n	80040c0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d113      	bne.n	8003d7e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d56:	2300      	movs	r3, #0
 8003d58:	623b      	str	r3, [r7, #32]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	623b      	str	r3, [r7, #32]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	623b      	str	r3, [r7, #32]
 8003d6a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	e18c      	b.n	8004098 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d11b      	bne.n	8003dbe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d96:	2300      	movs	r3, #0
 8003d98:	61fb      	str	r3, [r7, #28]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	61fb      	str	r3, [r7, #28]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	61fb      	str	r3, [r7, #28]
 8003daa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	e16c      	b.n	8004098 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d11b      	bne.n	8003dfe <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dd4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003de4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003de6:	2300      	movs	r3, #0
 8003de8:	61bb      	str	r3, [r7, #24]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	61bb      	str	r3, [r7, #24]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	61bb      	str	r3, [r7, #24]
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	e14c      	b.n	8004098 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e0e:	2300      	movs	r3, #0
 8003e10:	617b      	str	r3, [r7, #20]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	617b      	str	r3, [r7, #20]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	617b      	str	r3, [r7, #20]
 8003e22:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003e24:	e138      	b.n	8004098 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e2a:	2b03      	cmp	r3, #3
 8003e2c:	f200 80f1 	bhi.w	8004012 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d123      	bne.n	8003e80 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 fc07 	bl	8004650 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e139      	b.n	80040c0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	691a      	ldr	r2, [r3, #16]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e7e:	e10b      	b.n	8004098 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d14e      	bne.n	8003f26 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8e:	2200      	movs	r2, #0
 8003e90:	4906      	ldr	r1, [pc, #24]	; (8003eac <HAL_I2C_Master_Receive+0x22c>)
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 fa84 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d008      	beq.n	8003eb0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e10e      	b.n	80040c0 <HAL_I2C_Master_Receive+0x440>
 8003ea2:	bf00      	nop
 8003ea4:	00100002 	.word	0x00100002
 8003ea8:	ffff0000 	.word	0xffff0000
 8003eac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ebe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691a      	ldr	r2, [r3, #16]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	3b01      	subs	r3, #1
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	691a      	ldr	r2, [r3, #16]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	b2d2      	uxtb	r2, r2
 8003efe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f24:	e0b8      	b.n	8004098 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	4966      	ldr	r1, [pc, #408]	; (80040c8 <HAL_I2C_Master_Receive+0x448>)
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 fa35 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e0bf      	b.n	80040c0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	691a      	ldr	r2, [r3, #16]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	b2d2      	uxtb	r2, r2
 8003f5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	1c5a      	adds	r2, r3, #1
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f88:	2200      	movs	r2, #0
 8003f8a:	494f      	ldr	r1, [pc, #316]	; (80040c8 <HAL_I2C_Master_Receive+0x448>)
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 fa07 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e091      	b.n	80040c0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003faa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691a      	ldr	r2, [r3, #16]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	1c5a      	adds	r2, r3, #1
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	691a      	ldr	r2, [r3, #16]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	b2d2      	uxtb	r2, r2
 8003fea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004006:	b29b      	uxth	r3, r3
 8004008:	3b01      	subs	r3, #1
 800400a:	b29a      	uxth	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004010:	e042      	b.n	8004098 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004014:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 fb1a 	bl	8004650 <I2C_WaitOnRXNEFlagUntilTimeout>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e04c      	b.n	80040c0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	691a      	ldr	r2, [r3, #16]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	b2d2      	uxtb	r2, r2
 8004032:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	1c5a      	adds	r2, r3, #1
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004042:	3b01      	subs	r3, #1
 8004044:	b29a      	uxth	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404e:	b29b      	uxth	r3, r3
 8004050:	3b01      	subs	r3, #1
 8004052:	b29a      	uxth	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	f003 0304 	and.w	r3, r3, #4
 8004062:	2b04      	cmp	r3, #4
 8004064:	d118      	bne.n	8004098 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	691a      	ldr	r2, [r3, #16]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	b2d2      	uxtb	r2, r2
 8004072:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	1c5a      	adds	r2, r3, #1
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004082:	3b01      	subs	r3, #1
 8004084:	b29a      	uxth	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408e:	b29b      	uxth	r3, r3
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409c:	2b00      	cmp	r3, #0
 800409e:	f47f aec2 	bne.w	8003e26 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80040ba:	2300      	movs	r3, #0
 80040bc:	e000      	b.n	80040c0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80040be:	2302      	movs	r3, #2
  }
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3728      	adds	r7, #40	; 0x28
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	00010004 	.word	0x00010004

080040cc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040da:	b2db      	uxtb	r3, r3
}
 80040dc:	4618      	mov	r0, r3
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b088      	sub	sp, #32
 8004104:	af02      	add	r7, sp, #8
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	607a      	str	r2, [r7, #4]
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	460b      	mov	r3, r1
 800410e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004114:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2b08      	cmp	r3, #8
 800411a:	d006      	beq.n	800412a <I2C_MasterRequestWrite+0x2a>
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d003      	beq.n	800412a <I2C_MasterRequestWrite+0x2a>
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004128:	d108      	bne.n	800413c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	e00b      	b.n	8004154 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004140:	2b12      	cmp	r3, #18
 8004142:	d107      	bne.n	8004154 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004152:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 f91d 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00d      	beq.n	8004188 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800417a:	d103      	bne.n	8004184 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004182:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e035      	b.n	80041f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004190:	d108      	bne.n	80041a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004192:	897b      	ldrh	r3, [r7, #10]
 8004194:	b2db      	uxtb	r3, r3
 8004196:	461a      	mov	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041a0:	611a      	str	r2, [r3, #16]
 80041a2:	e01b      	b.n	80041dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80041a4:	897b      	ldrh	r3, [r7, #10]
 80041a6:	11db      	asrs	r3, r3, #7
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	f003 0306 	and.w	r3, r3, #6
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	f063 030f 	orn	r3, r3, #15
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	490e      	ldr	r1, [pc, #56]	; (80041fc <I2C_MasterRequestWrite+0xfc>)
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 f943 	bl	800444e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e010      	b.n	80041f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80041d2:	897b      	ldrh	r3, [r7, #10]
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	4907      	ldr	r1, [pc, #28]	; (8004200 <I2C_MasterRequestWrite+0x100>)
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 f933 	bl	800444e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e000      	b.n	80041f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3718      	adds	r7, #24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	00010008 	.word	0x00010008
 8004200:	00010002 	.word	0x00010002

08004204 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af02      	add	r7, sp, #8
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	607a      	str	r2, [r7, #4]
 800420e:	603b      	str	r3, [r7, #0]
 8004210:	460b      	mov	r3, r1
 8004212:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004218:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004228:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	2b08      	cmp	r3, #8
 800422e:	d006      	beq.n	800423e <I2C_MasterRequestRead+0x3a>
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d003      	beq.n	800423e <I2C_MasterRequestRead+0x3a>
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800423c:	d108      	bne.n	8004250 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	e00b      	b.n	8004268 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004254:	2b11      	cmp	r3, #17
 8004256:	d107      	bne.n	8004268 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004266:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 f893 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00d      	beq.n	800429c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800428e:	d103      	bne.n	8004298 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004296:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e079      	b.n	8004390 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042a4:	d108      	bne.n	80042b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80042a6:	897b      	ldrh	r3, [r7, #10]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	f043 0301 	orr.w	r3, r3, #1
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	611a      	str	r2, [r3, #16]
 80042b6:	e05f      	b.n	8004378 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80042b8:	897b      	ldrh	r3, [r7, #10]
 80042ba:	11db      	asrs	r3, r3, #7
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	f003 0306 	and.w	r3, r3, #6
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	f063 030f 	orn	r3, r3, #15
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	4930      	ldr	r1, [pc, #192]	; (8004398 <I2C_MasterRequestRead+0x194>)
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f000 f8b9 	bl	800444e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e054      	b.n	8004390 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80042e6:	897b      	ldrh	r3, [r7, #10]
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	4929      	ldr	r1, [pc, #164]	; (800439c <I2C_MasterRequestRead+0x198>)
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 f8a9 	bl	800444e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e044      	b.n	8004390 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004306:	2300      	movs	r3, #0
 8004308:	613b      	str	r3, [r7, #16]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	613b      	str	r3, [r7, #16]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	613b      	str	r3, [r7, #16]
 800431a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800432a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 f831 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00d      	beq.n	8004360 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004352:	d103      	bne.n	800435c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f44f 7200 	mov.w	r2, #512	; 0x200
 800435a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e017      	b.n	8004390 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004360:	897b      	ldrh	r3, [r7, #10]
 8004362:	11db      	asrs	r3, r3, #7
 8004364:	b2db      	uxtb	r3, r3
 8004366:	f003 0306 	and.w	r3, r3, #6
 800436a:	b2db      	uxtb	r3, r3
 800436c:	f063 030e 	orn	r3, r3, #14
 8004370:	b2da      	uxtb	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	4907      	ldr	r1, [pc, #28]	; (800439c <I2C_MasterRequestRead+0x198>)
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 f865 	bl	800444e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e000      	b.n	8004390 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3718      	adds	r7, #24
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	00010008 	.word	0x00010008
 800439c:	00010002 	.word	0x00010002

080043a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	603b      	str	r3, [r7, #0]
 80043ac:	4613      	mov	r3, r2
 80043ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043b0:	e025      	b.n	80043fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043b8:	d021      	beq.n	80043fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ba:	f7fe f89b 	bl	80024f4 <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d302      	bcc.n	80043d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d116      	bne.n	80043fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2220      	movs	r2, #32
 80043da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	f043 0220 	orr.w	r2, r3, #32
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e023      	b.n	8004446 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	0c1b      	lsrs	r3, r3, #16
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b01      	cmp	r3, #1
 8004406:	d10d      	bne.n	8004424 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	43da      	mvns	r2, r3
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	4013      	ands	r3, r2
 8004414:	b29b      	uxth	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	bf0c      	ite	eq
 800441a:	2301      	moveq	r3, #1
 800441c:	2300      	movne	r3, #0
 800441e:	b2db      	uxtb	r3, r3
 8004420:	461a      	mov	r2, r3
 8004422:	e00c      	b.n	800443e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	43da      	mvns	r2, r3
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	4013      	ands	r3, r2
 8004430:	b29b      	uxth	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	bf0c      	ite	eq
 8004436:	2301      	moveq	r3, #1
 8004438:	2300      	movne	r3, #0
 800443a:	b2db      	uxtb	r3, r3
 800443c:	461a      	mov	r2, r3
 800443e:	79fb      	ldrb	r3, [r7, #7]
 8004440:	429a      	cmp	r2, r3
 8004442:	d0b6      	beq.n	80043b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b084      	sub	sp, #16
 8004452:	af00      	add	r7, sp, #0
 8004454:	60f8      	str	r0, [r7, #12]
 8004456:	60b9      	str	r1, [r7, #8]
 8004458:	607a      	str	r2, [r7, #4]
 800445a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800445c:	e051      	b.n	8004502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800446c:	d123      	bne.n	80044b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800447c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004486:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2220      	movs	r2, #32
 8004492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	f043 0204 	orr.w	r2, r3, #4
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e046      	b.n	8004544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044bc:	d021      	beq.n	8004502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044be:	f7fe f819 	bl	80024f4 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d302      	bcc.n	80044d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d116      	bne.n	8004502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2220      	movs	r2, #32
 80044de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	f043 0220 	orr.w	r2, r3, #32
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e020      	b.n	8004544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	0c1b      	lsrs	r3, r3, #16
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b01      	cmp	r3, #1
 800450a:	d10c      	bne.n	8004526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	43da      	mvns	r2, r3
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	4013      	ands	r3, r2
 8004518:	b29b      	uxth	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	bf14      	ite	ne
 800451e:	2301      	movne	r3, #1
 8004520:	2300      	moveq	r3, #0
 8004522:	b2db      	uxtb	r3, r3
 8004524:	e00b      	b.n	800453e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	43da      	mvns	r2, r3
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	4013      	ands	r3, r2
 8004532:	b29b      	uxth	r3, r3
 8004534:	2b00      	cmp	r3, #0
 8004536:	bf14      	ite	ne
 8004538:	2301      	movne	r3, #1
 800453a:	2300      	moveq	r3, #0
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d18d      	bne.n	800445e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004558:	e02d      	b.n	80045b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 f8ce 	bl	80046fc <I2C_IsAcknowledgeFailed>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e02d      	b.n	80045c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004570:	d021      	beq.n	80045b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004572:	f7fd ffbf 	bl	80024f4 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	429a      	cmp	r2, r3
 8004580:	d302      	bcc.n	8004588 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d116      	bne.n	80045b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2220      	movs	r2, #32
 8004592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	f043 0220 	orr.w	r2, r3, #32
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e007      	b.n	80045c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c0:	2b80      	cmp	r3, #128	; 0x80
 80045c2:	d1ca      	bne.n	800455a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b084      	sub	sp, #16
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	60f8      	str	r0, [r7, #12]
 80045d6:	60b9      	str	r1, [r7, #8]
 80045d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045da:	e02d      	b.n	8004638 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 f88d 	bl	80046fc <I2C_IsAcknowledgeFailed>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e02d      	b.n	8004648 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045f2:	d021      	beq.n	8004638 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f4:	f7fd ff7e 	bl	80024f4 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	429a      	cmp	r2, r3
 8004602:	d302      	bcc.n	800460a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d116      	bne.n	8004638 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2220      	movs	r2, #32
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	f043 0220 	orr.w	r2, r3, #32
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e007      	b.n	8004648 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	f003 0304 	and.w	r3, r3, #4
 8004642:	2b04      	cmp	r3, #4
 8004644:	d1ca      	bne.n	80045dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800465c:	e042      	b.n	80046e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	f003 0310 	and.w	r3, r3, #16
 8004668:	2b10      	cmp	r3, #16
 800466a:	d119      	bne.n	80046a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f06f 0210 	mvn.w	r2, #16
 8004674:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2220      	movs	r2, #32
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e029      	b.n	80046f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a0:	f7fd ff28 	bl	80024f4 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d302      	bcc.n	80046b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d116      	bne.n	80046e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2220      	movs	r2, #32
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d0:	f043 0220 	orr.w	r2, r3, #32
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e007      	b.n	80046f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ee:	2b40      	cmp	r3, #64	; 0x40
 80046f0:	d1b5      	bne.n	800465e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800470e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004712:	d11b      	bne.n	800474c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800471c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2220      	movs	r2, #32
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004738:	f043 0204 	orr.w	r2, r3, #4
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e000      	b.n	800474e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
	...

0800475c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004762:	2300      	movs	r3, #0
 8004764:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004766:	2300      	movs	r3, #0
 8004768:	603b      	str	r3, [r7, #0]
 800476a:	4b20      	ldr	r3, [pc, #128]	; (80047ec <HAL_PWREx_EnableOverDrive+0x90>)
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	4a1f      	ldr	r2, [pc, #124]	; (80047ec <HAL_PWREx_EnableOverDrive+0x90>)
 8004770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004774:	6413      	str	r3, [r2, #64]	; 0x40
 8004776:	4b1d      	ldr	r3, [pc, #116]	; (80047ec <HAL_PWREx_EnableOverDrive+0x90>)
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800477e:	603b      	str	r3, [r7, #0]
 8004780:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004782:	4b1b      	ldr	r3, [pc, #108]	; (80047f0 <HAL_PWREx_EnableOverDrive+0x94>)
 8004784:	2201      	movs	r2, #1
 8004786:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004788:	f7fd feb4 	bl	80024f4 <HAL_GetTick>
 800478c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800478e:	e009      	b.n	80047a4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004790:	f7fd feb0 	bl	80024f4 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800479e:	d901      	bls.n	80047a4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e01f      	b.n	80047e4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80047a4:	4b13      	ldr	r3, [pc, #76]	; (80047f4 <HAL_PWREx_EnableOverDrive+0x98>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047b0:	d1ee      	bne.n	8004790 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80047b2:	4b11      	ldr	r3, [pc, #68]	; (80047f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80047b4:	2201      	movs	r2, #1
 80047b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047b8:	f7fd fe9c 	bl	80024f4 <HAL_GetTick>
 80047bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80047be:	e009      	b.n	80047d4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80047c0:	f7fd fe98 	bl	80024f4 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047ce:	d901      	bls.n	80047d4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e007      	b.n	80047e4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80047d4:	4b07      	ldr	r3, [pc, #28]	; (80047f4 <HAL_PWREx_EnableOverDrive+0x98>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047e0:	d1ee      	bne.n	80047c0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3708      	adds	r7, #8
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	40023800 	.word	0x40023800
 80047f0:	420e0040 	.word	0x420e0040
 80047f4:	40007000 	.word	0x40007000
 80047f8:	420e0044 	.word	0x420e0044

080047fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e0cc      	b.n	80049aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004810:	4b68      	ldr	r3, [pc, #416]	; (80049b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 030f 	and.w	r3, r3, #15
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	429a      	cmp	r2, r3
 800481c:	d90c      	bls.n	8004838 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800481e:	4b65      	ldr	r3, [pc, #404]	; (80049b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	b2d2      	uxtb	r2, r2
 8004824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004826:	4b63      	ldr	r3, [pc, #396]	; (80049b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	429a      	cmp	r2, r3
 8004832:	d001      	beq.n	8004838 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e0b8      	b.n	80049aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d020      	beq.n	8004886 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	2b00      	cmp	r3, #0
 800484e:	d005      	beq.n	800485c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004850:	4b59      	ldr	r3, [pc, #356]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	4a58      	ldr	r2, [pc, #352]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004856:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800485a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0308 	and.w	r3, r3, #8
 8004864:	2b00      	cmp	r3, #0
 8004866:	d005      	beq.n	8004874 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004868:	4b53      	ldr	r3, [pc, #332]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	4a52      	ldr	r2, [pc, #328]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 800486e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004872:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004874:	4b50      	ldr	r3, [pc, #320]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	494d      	ldr	r1, [pc, #308]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004882:	4313      	orrs	r3, r2
 8004884:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d044      	beq.n	800491c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d107      	bne.n	80048aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800489a:	4b47      	ldr	r3, [pc, #284]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d119      	bne.n	80048da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e07f      	b.n	80049aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d003      	beq.n	80048ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048b6:	2b03      	cmp	r3, #3
 80048b8:	d107      	bne.n	80048ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ba:	4b3f      	ldr	r3, [pc, #252]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d109      	bne.n	80048da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e06f      	b.n	80049aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ca:	4b3b      	ldr	r3, [pc, #236]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e067      	b.n	80049aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048da:	4b37      	ldr	r3, [pc, #220]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f023 0203 	bic.w	r2, r3, #3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	4934      	ldr	r1, [pc, #208]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048ec:	f7fd fe02 	bl	80024f4 <HAL_GetTick>
 80048f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048f2:	e00a      	b.n	800490a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048f4:	f7fd fdfe 	bl	80024f4 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004902:	4293      	cmp	r3, r2
 8004904:	d901      	bls.n	800490a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e04f      	b.n	80049aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800490a:	4b2b      	ldr	r3, [pc, #172]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 020c 	and.w	r2, r3, #12
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	429a      	cmp	r2, r3
 800491a:	d1eb      	bne.n	80048f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800491c:	4b25      	ldr	r3, [pc, #148]	; (80049b4 <HAL_RCC_ClockConfig+0x1b8>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 030f 	and.w	r3, r3, #15
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	429a      	cmp	r2, r3
 8004928:	d20c      	bcs.n	8004944 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800492a:	4b22      	ldr	r3, [pc, #136]	; (80049b4 <HAL_RCC_ClockConfig+0x1b8>)
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004932:	4b20      	ldr	r3, [pc, #128]	; (80049b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	429a      	cmp	r2, r3
 800493e:	d001      	beq.n	8004944 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e032      	b.n	80049aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	d008      	beq.n	8004962 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004950:	4b19      	ldr	r3, [pc, #100]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	4916      	ldr	r1, [pc, #88]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 800495e:	4313      	orrs	r3, r2
 8004960:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0308 	and.w	r3, r3, #8
 800496a:	2b00      	cmp	r3, #0
 800496c:	d009      	beq.n	8004982 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800496e:	4b12      	ldr	r3, [pc, #72]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	490e      	ldr	r1, [pc, #56]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 800497e:	4313      	orrs	r3, r2
 8004980:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004982:	f000 f841 	bl	8004a08 <HAL_RCC_GetSysClockFreq>
 8004986:	4602      	mov	r2, r0
 8004988:	4b0b      	ldr	r3, [pc, #44]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	091b      	lsrs	r3, r3, #4
 800498e:	f003 030f 	and.w	r3, r3, #15
 8004992:	490a      	ldr	r1, [pc, #40]	; (80049bc <HAL_RCC_ClockConfig+0x1c0>)
 8004994:	5ccb      	ldrb	r3, [r1, r3]
 8004996:	fa22 f303 	lsr.w	r3, r2, r3
 800499a:	4a09      	ldr	r2, [pc, #36]	; (80049c0 <HAL_RCC_ClockConfig+0x1c4>)
 800499c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800499e:	4b09      	ldr	r3, [pc, #36]	; (80049c4 <HAL_RCC_ClockConfig+0x1c8>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fd fd62 	bl	800246c <HAL_InitTick>

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	40023c00 	.word	0x40023c00
 80049b8:	40023800 	.word	0x40023800
 80049bc:	0800a048 	.word	0x0800a048
 80049c0:	2000000c 	.word	0x2000000c
 80049c4:	20000010 	.word	0x20000010

080049c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049cc:	4b03      	ldr	r3, [pc, #12]	; (80049dc <HAL_RCC_GetHCLKFreq+0x14>)
 80049ce:	681b      	ldr	r3, [r3, #0]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	2000000c 	.word	0x2000000c

080049e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049e4:	f7ff fff0 	bl	80049c8 <HAL_RCC_GetHCLKFreq>
 80049e8:	4602      	mov	r2, r0
 80049ea:	4b05      	ldr	r3, [pc, #20]	; (8004a00 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	0a9b      	lsrs	r3, r3, #10
 80049f0:	f003 0307 	and.w	r3, r3, #7
 80049f4:	4903      	ldr	r1, [pc, #12]	; (8004a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049f6:	5ccb      	ldrb	r3, [r1, r3]
 80049f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	40023800 	.word	0x40023800
 8004a04:	0800a058 	.word	0x0800a058

08004a08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a0c:	b0a6      	sub	sp, #152	; 0x98
 8004a0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a10:	2300      	movs	r3, #0
 8004a12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8004a16:	2300      	movs	r3, #0
 8004a18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8004a22:	2300      	movs	r3, #0
 8004a24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a2e:	4bc8      	ldr	r3, [pc, #800]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x348>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 030c 	and.w	r3, r3, #12
 8004a36:	2b0c      	cmp	r3, #12
 8004a38:	f200 817e 	bhi.w	8004d38 <HAL_RCC_GetSysClockFreq+0x330>
 8004a3c:	a201      	add	r2, pc, #4	; (adr r2, 8004a44 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a42:	bf00      	nop
 8004a44:	08004a79 	.word	0x08004a79
 8004a48:	08004d39 	.word	0x08004d39
 8004a4c:	08004d39 	.word	0x08004d39
 8004a50:	08004d39 	.word	0x08004d39
 8004a54:	08004a81 	.word	0x08004a81
 8004a58:	08004d39 	.word	0x08004d39
 8004a5c:	08004d39 	.word	0x08004d39
 8004a60:	08004d39 	.word	0x08004d39
 8004a64:	08004a89 	.word	0x08004a89
 8004a68:	08004d39 	.word	0x08004d39
 8004a6c:	08004d39 	.word	0x08004d39
 8004a70:	08004d39 	.word	0x08004d39
 8004a74:	08004bf3 	.word	0x08004bf3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a78:	4bb6      	ldr	r3, [pc, #728]	; (8004d54 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004a7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8004a7e:	e15f      	b.n	8004d40 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a80:	4bb5      	ldr	r3, [pc, #724]	; (8004d58 <HAL_RCC_GetSysClockFreq+0x350>)
 8004a82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004a86:	e15b      	b.n	8004d40 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a88:	4bb1      	ldr	r3, [pc, #708]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x348>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a94:	4bae      	ldr	r3, [pc, #696]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x348>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d031      	beq.n	8004b04 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aa0:	4bab      	ldr	r3, [pc, #684]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x348>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	099b      	lsrs	r3, r3, #6
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004aaa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004aac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ab2:	663b      	str	r3, [r7, #96]	; 0x60
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	667b      	str	r3, [r7, #100]	; 0x64
 8004ab8:	4ba7      	ldr	r3, [pc, #668]	; (8004d58 <HAL_RCC_GetSysClockFreq+0x350>)
 8004aba:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004abe:	462a      	mov	r2, r5
 8004ac0:	fb03 f202 	mul.w	r2, r3, r2
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	4621      	mov	r1, r4
 8004ac8:	fb01 f303 	mul.w	r3, r1, r3
 8004acc:	4413      	add	r3, r2
 8004ace:	4aa2      	ldr	r2, [pc, #648]	; (8004d58 <HAL_RCC_GetSysClockFreq+0x350>)
 8004ad0:	4621      	mov	r1, r4
 8004ad2:	fba1 1202 	umull	r1, r2, r1, r2
 8004ad6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ad8:	460a      	mov	r2, r1
 8004ada:	67ba      	str	r2, [r7, #120]	; 0x78
 8004adc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004ade:	4413      	add	r3, r2
 8004ae0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ae2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004aea:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004aec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004af0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004af4:	f7fc f8a2 	bl	8000c3c <__aeabi_uldivmod>
 8004af8:	4602      	mov	r2, r0
 8004afa:	460b      	mov	r3, r1
 8004afc:	4613      	mov	r3, r2
 8004afe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b02:	e064      	b.n	8004bce <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b04:	4b92      	ldr	r3, [pc, #584]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x348>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	099b      	lsrs	r3, r3, #6
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	653b      	str	r3, [r7, #80]	; 0x50
 8004b0e:	657a      	str	r2, [r7, #84]	; 0x54
 8004b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b16:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b18:	2300      	movs	r3, #0
 8004b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b1c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8004b20:	4622      	mov	r2, r4
 8004b22:	462b      	mov	r3, r5
 8004b24:	f04f 0000 	mov.w	r0, #0
 8004b28:	f04f 0100 	mov.w	r1, #0
 8004b2c:	0159      	lsls	r1, r3, #5
 8004b2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b32:	0150      	lsls	r0, r2, #5
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	4621      	mov	r1, r4
 8004b3a:	1a51      	subs	r1, r2, r1
 8004b3c:	6139      	str	r1, [r7, #16]
 8004b3e:	4629      	mov	r1, r5
 8004b40:	eb63 0301 	sbc.w	r3, r3, r1
 8004b44:	617b      	str	r3, [r7, #20]
 8004b46:	f04f 0200 	mov.w	r2, #0
 8004b4a:	f04f 0300 	mov.w	r3, #0
 8004b4e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b52:	4659      	mov	r1, fp
 8004b54:	018b      	lsls	r3, r1, #6
 8004b56:	4651      	mov	r1, sl
 8004b58:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b5c:	4651      	mov	r1, sl
 8004b5e:	018a      	lsls	r2, r1, #6
 8004b60:	4651      	mov	r1, sl
 8004b62:	ebb2 0801 	subs.w	r8, r2, r1
 8004b66:	4659      	mov	r1, fp
 8004b68:	eb63 0901 	sbc.w	r9, r3, r1
 8004b6c:	f04f 0200 	mov.w	r2, #0
 8004b70:	f04f 0300 	mov.w	r3, #0
 8004b74:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b78:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b7c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b80:	4690      	mov	r8, r2
 8004b82:	4699      	mov	r9, r3
 8004b84:	4623      	mov	r3, r4
 8004b86:	eb18 0303 	adds.w	r3, r8, r3
 8004b8a:	60bb      	str	r3, [r7, #8]
 8004b8c:	462b      	mov	r3, r5
 8004b8e:	eb49 0303 	adc.w	r3, r9, r3
 8004b92:	60fb      	str	r3, [r7, #12]
 8004b94:	f04f 0200 	mov.w	r2, #0
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ba0:	4629      	mov	r1, r5
 8004ba2:	028b      	lsls	r3, r1, #10
 8004ba4:	4621      	mov	r1, r4
 8004ba6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004baa:	4621      	mov	r1, r4
 8004bac:	028a      	lsls	r2, r1, #10
 8004bae:	4610      	mov	r0, r2
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	643b      	str	r3, [r7, #64]	; 0x40
 8004bba:	647a      	str	r2, [r7, #68]	; 0x44
 8004bbc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004bc0:	f7fc f83c 	bl	8000c3c <__aeabi_uldivmod>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	4613      	mov	r3, r2
 8004bca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bce:	4b60      	ldr	r3, [pc, #384]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x348>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	0c1b      	lsrs	r3, r3, #16
 8004bd4:	f003 0303 	and.w	r3, r3, #3
 8004bd8:	3301      	adds	r3, #1
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8004be0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004be4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004bf0:	e0a6      	b.n	8004d40 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bf2:	4b57      	ldr	r3, [pc, #348]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x348>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bfe:	4b54      	ldr	r3, [pc, #336]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x348>)
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d02a      	beq.n	8004c60 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c0a:	4b51      	ldr	r3, [pc, #324]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x348>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	099b      	lsrs	r3, r3, #6
 8004c10:	2200      	movs	r2, #0
 8004c12:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c18:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	4b4e      	ldr	r3, [pc, #312]	; (8004d58 <HAL_RCC_GetSysClockFreq+0x350>)
 8004c20:	fb03 f201 	mul.w	r2, r3, r1
 8004c24:	2300      	movs	r3, #0
 8004c26:	fb00 f303 	mul.w	r3, r0, r3
 8004c2a:	4413      	add	r3, r2
 8004c2c:	4a4a      	ldr	r2, [pc, #296]	; (8004d58 <HAL_RCC_GetSysClockFreq+0x350>)
 8004c2e:	fba0 1202 	umull	r1, r2, r0, r2
 8004c32:	677a      	str	r2, [r7, #116]	; 0x74
 8004c34:	460a      	mov	r2, r1
 8004c36:	673a      	str	r2, [r7, #112]	; 0x70
 8004c38:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004c3a:	4413      	add	r3, r2
 8004c3c:	677b      	str	r3, [r7, #116]	; 0x74
 8004c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c42:	2200      	movs	r2, #0
 8004c44:	633b      	str	r3, [r7, #48]	; 0x30
 8004c46:	637a      	str	r2, [r7, #52]	; 0x34
 8004c48:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004c4c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004c50:	f7fb fff4 	bl	8000c3c <__aeabi_uldivmod>
 8004c54:	4602      	mov	r2, r0
 8004c56:	460b      	mov	r3, r1
 8004c58:	4613      	mov	r3, r2
 8004c5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c5e:	e05b      	b.n	8004d18 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c60:	4b3b      	ldr	r3, [pc, #236]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x348>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	099b      	lsrs	r3, r3, #6
 8004c66:	2200      	movs	r2, #0
 8004c68:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c72:	623b      	str	r3, [r7, #32]
 8004c74:	2300      	movs	r3, #0
 8004c76:	627b      	str	r3, [r7, #36]	; 0x24
 8004c78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c7c:	4642      	mov	r2, r8
 8004c7e:	464b      	mov	r3, r9
 8004c80:	f04f 0000 	mov.w	r0, #0
 8004c84:	f04f 0100 	mov.w	r1, #0
 8004c88:	0159      	lsls	r1, r3, #5
 8004c8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c8e:	0150      	lsls	r0, r2, #5
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	4641      	mov	r1, r8
 8004c96:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c9a:	4649      	mov	r1, r9
 8004c9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ca0:	f04f 0200 	mov.w	r2, #0
 8004ca4:	f04f 0300 	mov.w	r3, #0
 8004ca8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004cac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cb0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004cb4:	ebb2 040a 	subs.w	r4, r2, sl
 8004cb8:	eb63 050b 	sbc.w	r5, r3, fp
 8004cbc:	f04f 0200 	mov.w	r2, #0
 8004cc0:	f04f 0300 	mov.w	r3, #0
 8004cc4:	00eb      	lsls	r3, r5, #3
 8004cc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cca:	00e2      	lsls	r2, r4, #3
 8004ccc:	4614      	mov	r4, r2
 8004cce:	461d      	mov	r5, r3
 8004cd0:	4643      	mov	r3, r8
 8004cd2:	18e3      	adds	r3, r4, r3
 8004cd4:	603b      	str	r3, [r7, #0]
 8004cd6:	464b      	mov	r3, r9
 8004cd8:	eb45 0303 	adc.w	r3, r5, r3
 8004cdc:	607b      	str	r3, [r7, #4]
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cea:	4629      	mov	r1, r5
 8004cec:	028b      	lsls	r3, r1, #10
 8004cee:	4621      	mov	r1, r4
 8004cf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cf4:	4621      	mov	r1, r4
 8004cf6:	028a      	lsls	r2, r1, #10
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d00:	2200      	movs	r2, #0
 8004d02:	61bb      	str	r3, [r7, #24]
 8004d04:	61fa      	str	r2, [r7, #28]
 8004d06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d0a:	f7fb ff97 	bl	8000c3c <__aeabi_uldivmod>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	460b      	mov	r3, r1
 8004d12:	4613      	mov	r3, r2
 8004d14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004d18:	4b0d      	ldr	r3, [pc, #52]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x348>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	0f1b      	lsrs	r3, r3, #28
 8004d1e:	f003 0307 	and.w	r3, r3, #7
 8004d22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8004d26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004d36:	e003      	b.n	8004d40 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d38:	4b06      	ldr	r3, [pc, #24]	; (8004d54 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004d3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004d3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3798      	adds	r7, #152	; 0x98
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d4e:	bf00      	nop
 8004d50:	40023800 	.word	0x40023800
 8004d54:	00f42400 	.word	0x00f42400
 8004d58:	017d7840 	.word	0x017d7840

08004d5c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e28d      	b.n	800528a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f000 8083 	beq.w	8004e82 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004d7c:	4b94      	ldr	r3, [pc, #592]	; (8004fd0 <HAL_RCC_OscConfig+0x274>)
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f003 030c 	and.w	r3, r3, #12
 8004d84:	2b04      	cmp	r3, #4
 8004d86:	d019      	beq.n	8004dbc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004d88:	4b91      	ldr	r3, [pc, #580]	; (8004fd0 <HAL_RCC_OscConfig+0x274>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004d90:	2b08      	cmp	r3, #8
 8004d92:	d106      	bne.n	8004da2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004d94:	4b8e      	ldr	r3, [pc, #568]	; (8004fd0 <HAL_RCC_OscConfig+0x274>)
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004da0:	d00c      	beq.n	8004dbc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004da2:	4b8b      	ldr	r3, [pc, #556]	; (8004fd0 <HAL_RCC_OscConfig+0x274>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004daa:	2b0c      	cmp	r3, #12
 8004dac:	d112      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dae:	4b88      	ldr	r3, [pc, #544]	; (8004fd0 <HAL_RCC_OscConfig+0x274>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004db6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dba:	d10b      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dbc:	4b84      	ldr	r3, [pc, #528]	; (8004fd0 <HAL_RCC_OscConfig+0x274>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d05b      	beq.n	8004e80 <HAL_RCC_OscConfig+0x124>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d157      	bne.n	8004e80 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e25a      	b.n	800528a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ddc:	d106      	bne.n	8004dec <HAL_RCC_OscConfig+0x90>
 8004dde:	4b7c      	ldr	r3, [pc, #496]	; (8004fd0 <HAL_RCC_OscConfig+0x274>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a7b      	ldr	r2, [pc, #492]	; (8004fd0 <HAL_RCC_OscConfig+0x274>)
 8004de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004de8:	6013      	str	r3, [r2, #0]
 8004dea:	e01d      	b.n	8004e28 <HAL_RCC_OscConfig+0xcc>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004df4:	d10c      	bne.n	8004e10 <HAL_RCC_OscConfig+0xb4>
 8004df6:	4b76      	ldr	r3, [pc, #472]	; (8004fd0 <HAL_RCC_OscConfig+0x274>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a75      	ldr	r2, [pc, #468]	; (8004fd0 <HAL_RCC_OscConfig+0x274>)
 8004dfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e00:	6013      	str	r3, [r2, #0]
 8004e02:	4b73      	ldr	r3, [pc, #460]	; (8004fd0 <HAL_RCC_OscConfig+0x274>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a72      	ldr	r2, [pc, #456]	; (8004fd0 <HAL_RCC_OscConfig+0x274>)
 8004e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e0c:	6013      	str	r3, [r2, #0]
 8004e0e:	e00b      	b.n	8004e28 <HAL_RCC_OscConfig+0xcc>
 8004e10:	4b6f      	ldr	r3, [pc, #444]	; (8004fd0 <HAL_RCC_OscConfig+0x274>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a6e      	ldr	r2, [pc, #440]	; (8004fd0 <HAL_RCC_OscConfig+0x274>)
 8004e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e1a:	6013      	str	r3, [r2, #0]
 8004e1c:	4b6c      	ldr	r3, [pc, #432]	; (8004fd0 <HAL_RCC_OscConfig+0x274>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a6b      	ldr	r2, [pc, #428]	; (8004fd0 <HAL_RCC_OscConfig+0x274>)
 8004e22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d013      	beq.n	8004e58 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e30:	f7fd fb60 	bl	80024f4 <HAL_GetTick>
 8004e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e38:	f7fd fb5c 	bl	80024f4 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b64      	cmp	r3, #100	; 0x64
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e21f      	b.n	800528a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e4a:	4b61      	ldr	r3, [pc, #388]	; (8004fd0 <HAL_RCC_OscConfig+0x274>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0f0      	beq.n	8004e38 <HAL_RCC_OscConfig+0xdc>
 8004e56:	e014      	b.n	8004e82 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e58:	f7fd fb4c 	bl	80024f4 <HAL_GetTick>
 8004e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e60:	f7fd fb48 	bl	80024f4 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b64      	cmp	r3, #100	; 0x64
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e20b      	b.n	800528a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e72:	4b57      	ldr	r3, [pc, #348]	; (8004fd0 <HAL_RCC_OscConfig+0x274>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1f0      	bne.n	8004e60 <HAL_RCC_OscConfig+0x104>
 8004e7e:	e000      	b.n	8004e82 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d06f      	beq.n	8004f6e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004e8e:	4b50      	ldr	r3, [pc, #320]	; (8004fd0 <HAL_RCC_OscConfig+0x274>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f003 030c 	and.w	r3, r3, #12
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d017      	beq.n	8004eca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004e9a:	4b4d      	ldr	r3, [pc, #308]	; (8004fd0 <HAL_RCC_OscConfig+0x274>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004ea2:	2b08      	cmp	r3, #8
 8004ea4:	d105      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004ea6:	4b4a      	ldr	r3, [pc, #296]	; (8004fd0 <HAL_RCC_OscConfig+0x274>)
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00b      	beq.n	8004eca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eb2:	4b47      	ldr	r3, [pc, #284]	; (8004fd0 <HAL_RCC_OscConfig+0x274>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004eba:	2b0c      	cmp	r3, #12
 8004ebc:	d11c      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ebe:	4b44      	ldr	r3, [pc, #272]	; (8004fd0 <HAL_RCC_OscConfig+0x274>)
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d116      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eca:	4b41      	ldr	r3, [pc, #260]	; (8004fd0 <HAL_RCC_OscConfig+0x274>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d005      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x186>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d001      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e1d3      	b.n	800528a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ee2:	4b3b      	ldr	r3, [pc, #236]	; (8004fd0 <HAL_RCC_OscConfig+0x274>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	00db      	lsls	r3, r3, #3
 8004ef0:	4937      	ldr	r1, [pc, #220]	; (8004fd0 <HAL_RCC_OscConfig+0x274>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ef6:	e03a      	b.n	8004f6e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d020      	beq.n	8004f42 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f00:	4b34      	ldr	r3, [pc, #208]	; (8004fd4 <HAL_RCC_OscConfig+0x278>)
 8004f02:	2201      	movs	r2, #1
 8004f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f06:	f7fd faf5 	bl	80024f4 <HAL_GetTick>
 8004f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f0c:	e008      	b.n	8004f20 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f0e:	f7fd faf1 	bl	80024f4 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e1b4      	b.n	800528a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f20:	4b2b      	ldr	r3, [pc, #172]	; (8004fd0 <HAL_RCC_OscConfig+0x274>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0302 	and.w	r3, r3, #2
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0f0      	beq.n	8004f0e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f2c:	4b28      	ldr	r3, [pc, #160]	; (8004fd0 <HAL_RCC_OscConfig+0x274>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	4925      	ldr	r1, [pc, #148]	; (8004fd0 <HAL_RCC_OscConfig+0x274>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	600b      	str	r3, [r1, #0]
 8004f40:	e015      	b.n	8004f6e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f42:	4b24      	ldr	r3, [pc, #144]	; (8004fd4 <HAL_RCC_OscConfig+0x278>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f48:	f7fd fad4 	bl	80024f4 <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f50:	f7fd fad0 	bl	80024f4 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e193      	b.n	800528a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f62:	4b1b      	ldr	r3, [pc, #108]	; (8004fd0 <HAL_RCC_OscConfig+0x274>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1f0      	bne.n	8004f50 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0308 	and.w	r3, r3, #8
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d036      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d016      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f82:	4b15      	ldr	r3, [pc, #84]	; (8004fd8 <HAL_RCC_OscConfig+0x27c>)
 8004f84:	2201      	movs	r2, #1
 8004f86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f88:	f7fd fab4 	bl	80024f4 <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f90:	f7fd fab0 	bl	80024f4 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e173      	b.n	800528a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fa2:	4b0b      	ldr	r3, [pc, #44]	; (8004fd0 <HAL_RCC_OscConfig+0x274>)
 8004fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d0f0      	beq.n	8004f90 <HAL_RCC_OscConfig+0x234>
 8004fae:	e01b      	b.n	8004fe8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fb0:	4b09      	ldr	r3, [pc, #36]	; (8004fd8 <HAL_RCC_OscConfig+0x27c>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb6:	f7fd fa9d 	bl	80024f4 <HAL_GetTick>
 8004fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fbc:	e00e      	b.n	8004fdc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fbe:	f7fd fa99 	bl	80024f4 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d907      	bls.n	8004fdc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e15c      	b.n	800528a <HAL_RCC_OscConfig+0x52e>
 8004fd0:	40023800 	.word	0x40023800
 8004fd4:	42470000 	.word	0x42470000
 8004fd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fdc:	4b8a      	ldr	r3, [pc, #552]	; (8005208 <HAL_RCC_OscConfig+0x4ac>)
 8004fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1ea      	bne.n	8004fbe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0304 	and.w	r3, r3, #4
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 8097 	beq.w	8005124 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ffa:	4b83      	ldr	r3, [pc, #524]	; (8005208 <HAL_RCC_OscConfig+0x4ac>)
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10f      	bne.n	8005026 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005006:	2300      	movs	r3, #0
 8005008:	60bb      	str	r3, [r7, #8]
 800500a:	4b7f      	ldr	r3, [pc, #508]	; (8005208 <HAL_RCC_OscConfig+0x4ac>)
 800500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500e:	4a7e      	ldr	r2, [pc, #504]	; (8005208 <HAL_RCC_OscConfig+0x4ac>)
 8005010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005014:	6413      	str	r3, [r2, #64]	; 0x40
 8005016:	4b7c      	ldr	r3, [pc, #496]	; (8005208 <HAL_RCC_OscConfig+0x4ac>)
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800501e:	60bb      	str	r3, [r7, #8]
 8005020:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005022:	2301      	movs	r3, #1
 8005024:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005026:	4b79      	ldr	r3, [pc, #484]	; (800520c <HAL_RCC_OscConfig+0x4b0>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502e:	2b00      	cmp	r3, #0
 8005030:	d118      	bne.n	8005064 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005032:	4b76      	ldr	r3, [pc, #472]	; (800520c <HAL_RCC_OscConfig+0x4b0>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a75      	ldr	r2, [pc, #468]	; (800520c <HAL_RCC_OscConfig+0x4b0>)
 8005038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800503c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800503e:	f7fd fa59 	bl	80024f4 <HAL_GetTick>
 8005042:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005044:	e008      	b.n	8005058 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005046:	f7fd fa55 	bl	80024f4 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b02      	cmp	r3, #2
 8005052:	d901      	bls.n	8005058 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e118      	b.n	800528a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005058:	4b6c      	ldr	r3, [pc, #432]	; (800520c <HAL_RCC_OscConfig+0x4b0>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005060:	2b00      	cmp	r3, #0
 8005062:	d0f0      	beq.n	8005046 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d106      	bne.n	800507a <HAL_RCC_OscConfig+0x31e>
 800506c:	4b66      	ldr	r3, [pc, #408]	; (8005208 <HAL_RCC_OscConfig+0x4ac>)
 800506e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005070:	4a65      	ldr	r2, [pc, #404]	; (8005208 <HAL_RCC_OscConfig+0x4ac>)
 8005072:	f043 0301 	orr.w	r3, r3, #1
 8005076:	6713      	str	r3, [r2, #112]	; 0x70
 8005078:	e01c      	b.n	80050b4 <HAL_RCC_OscConfig+0x358>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	2b05      	cmp	r3, #5
 8005080:	d10c      	bne.n	800509c <HAL_RCC_OscConfig+0x340>
 8005082:	4b61      	ldr	r3, [pc, #388]	; (8005208 <HAL_RCC_OscConfig+0x4ac>)
 8005084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005086:	4a60      	ldr	r2, [pc, #384]	; (8005208 <HAL_RCC_OscConfig+0x4ac>)
 8005088:	f043 0304 	orr.w	r3, r3, #4
 800508c:	6713      	str	r3, [r2, #112]	; 0x70
 800508e:	4b5e      	ldr	r3, [pc, #376]	; (8005208 <HAL_RCC_OscConfig+0x4ac>)
 8005090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005092:	4a5d      	ldr	r2, [pc, #372]	; (8005208 <HAL_RCC_OscConfig+0x4ac>)
 8005094:	f043 0301 	orr.w	r3, r3, #1
 8005098:	6713      	str	r3, [r2, #112]	; 0x70
 800509a:	e00b      	b.n	80050b4 <HAL_RCC_OscConfig+0x358>
 800509c:	4b5a      	ldr	r3, [pc, #360]	; (8005208 <HAL_RCC_OscConfig+0x4ac>)
 800509e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a0:	4a59      	ldr	r2, [pc, #356]	; (8005208 <HAL_RCC_OscConfig+0x4ac>)
 80050a2:	f023 0301 	bic.w	r3, r3, #1
 80050a6:	6713      	str	r3, [r2, #112]	; 0x70
 80050a8:	4b57      	ldr	r3, [pc, #348]	; (8005208 <HAL_RCC_OscConfig+0x4ac>)
 80050aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ac:	4a56      	ldr	r2, [pc, #344]	; (8005208 <HAL_RCC_OscConfig+0x4ac>)
 80050ae:	f023 0304 	bic.w	r3, r3, #4
 80050b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d015      	beq.n	80050e8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050bc:	f7fd fa1a 	bl	80024f4 <HAL_GetTick>
 80050c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050c2:	e00a      	b.n	80050da <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050c4:	f7fd fa16 	bl	80024f4 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e0d7      	b.n	800528a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050da:	4b4b      	ldr	r3, [pc, #300]	; (8005208 <HAL_RCC_OscConfig+0x4ac>)
 80050dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d0ee      	beq.n	80050c4 <HAL_RCC_OscConfig+0x368>
 80050e6:	e014      	b.n	8005112 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e8:	f7fd fa04 	bl	80024f4 <HAL_GetTick>
 80050ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050ee:	e00a      	b.n	8005106 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050f0:	f7fd fa00 	bl	80024f4 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80050fe:	4293      	cmp	r3, r2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e0c1      	b.n	800528a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005106:	4b40      	ldr	r3, [pc, #256]	; (8005208 <HAL_RCC_OscConfig+0x4ac>)
 8005108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1ee      	bne.n	80050f0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005112:	7dfb      	ldrb	r3, [r7, #23]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d105      	bne.n	8005124 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005118:	4b3b      	ldr	r3, [pc, #236]	; (8005208 <HAL_RCC_OscConfig+0x4ac>)
 800511a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511c:	4a3a      	ldr	r2, [pc, #232]	; (8005208 <HAL_RCC_OscConfig+0x4ac>)
 800511e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005122:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 80ad 	beq.w	8005288 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800512e:	4b36      	ldr	r3, [pc, #216]	; (8005208 <HAL_RCC_OscConfig+0x4ac>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 030c 	and.w	r3, r3, #12
 8005136:	2b08      	cmp	r3, #8
 8005138:	d060      	beq.n	80051fc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	2b02      	cmp	r3, #2
 8005140:	d145      	bne.n	80051ce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005142:	4b33      	ldr	r3, [pc, #204]	; (8005210 <HAL_RCC_OscConfig+0x4b4>)
 8005144:	2200      	movs	r2, #0
 8005146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005148:	f7fd f9d4 	bl	80024f4 <HAL_GetTick>
 800514c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800514e:	e008      	b.n	8005162 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005150:	f7fd f9d0 	bl	80024f4 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	2b02      	cmp	r3, #2
 800515c:	d901      	bls.n	8005162 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e093      	b.n	800528a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005162:	4b29      	ldr	r3, [pc, #164]	; (8005208 <HAL_RCC_OscConfig+0x4ac>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1f0      	bne.n	8005150 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	69da      	ldr	r2, [r3, #28]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	431a      	orrs	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	019b      	lsls	r3, r3, #6
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005184:	085b      	lsrs	r3, r3, #1
 8005186:	3b01      	subs	r3, #1
 8005188:	041b      	lsls	r3, r3, #16
 800518a:	431a      	orrs	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005190:	061b      	lsls	r3, r3, #24
 8005192:	431a      	orrs	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005198:	071b      	lsls	r3, r3, #28
 800519a:	491b      	ldr	r1, [pc, #108]	; (8005208 <HAL_RCC_OscConfig+0x4ac>)
 800519c:	4313      	orrs	r3, r2
 800519e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051a0:	4b1b      	ldr	r3, [pc, #108]	; (8005210 <HAL_RCC_OscConfig+0x4b4>)
 80051a2:	2201      	movs	r2, #1
 80051a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a6:	f7fd f9a5 	bl	80024f4 <HAL_GetTick>
 80051aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ac:	e008      	b.n	80051c0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051ae:	f7fd f9a1 	bl	80024f4 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d901      	bls.n	80051c0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e064      	b.n	800528a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051c0:	4b11      	ldr	r3, [pc, #68]	; (8005208 <HAL_RCC_OscConfig+0x4ac>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d0f0      	beq.n	80051ae <HAL_RCC_OscConfig+0x452>
 80051cc:	e05c      	b.n	8005288 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ce:	4b10      	ldr	r3, [pc, #64]	; (8005210 <HAL_RCC_OscConfig+0x4b4>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d4:	f7fd f98e 	bl	80024f4 <HAL_GetTick>
 80051d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051da:	e008      	b.n	80051ee <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051dc:	f7fd f98a 	bl	80024f4 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e04d      	b.n	800528a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ee:	4b06      	ldr	r3, [pc, #24]	; (8005208 <HAL_RCC_OscConfig+0x4ac>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1f0      	bne.n	80051dc <HAL_RCC_OscConfig+0x480>
 80051fa:	e045      	b.n	8005288 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d107      	bne.n	8005214 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e040      	b.n	800528a <HAL_RCC_OscConfig+0x52e>
 8005208:	40023800 	.word	0x40023800
 800520c:	40007000 	.word	0x40007000
 8005210:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005214:	4b1f      	ldr	r3, [pc, #124]	; (8005294 <HAL_RCC_OscConfig+0x538>)
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d030      	beq.n	8005284 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800522c:	429a      	cmp	r2, r3
 800522e:	d129      	bne.n	8005284 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800523a:	429a      	cmp	r2, r3
 800523c:	d122      	bne.n	8005284 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005244:	4013      	ands	r3, r2
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800524a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800524c:	4293      	cmp	r3, r2
 800524e:	d119      	bne.n	8005284 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525a:	085b      	lsrs	r3, r3, #1
 800525c:	3b01      	subs	r3, #1
 800525e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005260:	429a      	cmp	r2, r3
 8005262:	d10f      	bne.n	8005284 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005270:	429a      	cmp	r2, r3
 8005272:	d107      	bne.n	8005284 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005280:	429a      	cmp	r2, r3
 8005282:	d001      	beq.n	8005288 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e000      	b.n	800528a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3718      	adds	r7, #24
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	40023800 	.word	0x40023800

08005298 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e041      	b.n	800532e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d106      	bne.n	80052c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7fd f806 	bl	80022d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2202      	movs	r2, #2
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	3304      	adds	r3, #4
 80052d4:	4619      	mov	r1, r3
 80052d6:	4610      	mov	r0, r2
 80052d8:	f000 fc70 	bl	8005bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
	...

08005338 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b01      	cmp	r3, #1
 800534a:	d001      	beq.n	8005350 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e04e      	b.n	80053ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68da      	ldr	r2, [r3, #12]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f042 0201 	orr.w	r2, r2, #1
 8005366:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a23      	ldr	r2, [pc, #140]	; (80053fc <HAL_TIM_Base_Start_IT+0xc4>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d022      	beq.n	80053b8 <HAL_TIM_Base_Start_IT+0x80>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800537a:	d01d      	beq.n	80053b8 <HAL_TIM_Base_Start_IT+0x80>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a1f      	ldr	r2, [pc, #124]	; (8005400 <HAL_TIM_Base_Start_IT+0xc8>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d018      	beq.n	80053b8 <HAL_TIM_Base_Start_IT+0x80>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a1e      	ldr	r2, [pc, #120]	; (8005404 <HAL_TIM_Base_Start_IT+0xcc>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d013      	beq.n	80053b8 <HAL_TIM_Base_Start_IT+0x80>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a1c      	ldr	r2, [pc, #112]	; (8005408 <HAL_TIM_Base_Start_IT+0xd0>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d00e      	beq.n	80053b8 <HAL_TIM_Base_Start_IT+0x80>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a1b      	ldr	r2, [pc, #108]	; (800540c <HAL_TIM_Base_Start_IT+0xd4>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d009      	beq.n	80053b8 <HAL_TIM_Base_Start_IT+0x80>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a19      	ldr	r2, [pc, #100]	; (8005410 <HAL_TIM_Base_Start_IT+0xd8>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d004      	beq.n	80053b8 <HAL_TIM_Base_Start_IT+0x80>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a18      	ldr	r2, [pc, #96]	; (8005414 <HAL_TIM_Base_Start_IT+0xdc>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d111      	bne.n	80053dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f003 0307 	and.w	r3, r3, #7
 80053c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2b06      	cmp	r3, #6
 80053c8:	d010      	beq.n	80053ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f042 0201 	orr.w	r2, r2, #1
 80053d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053da:	e007      	b.n	80053ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f042 0201 	orr.w	r2, r2, #1
 80053ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	40010000 	.word	0x40010000
 8005400:	40000400 	.word	0x40000400
 8005404:	40000800 	.word	0x40000800
 8005408:	40000c00 	.word	0x40000c00
 800540c:	40010400 	.word	0x40010400
 8005410:	40014000 	.word	0x40014000
 8005414:	40001800 	.word	0x40001800

08005418 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e041      	b.n	80054ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d106      	bne.n	8005444 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7fc ff24 	bl	800228c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	3304      	adds	r3, #4
 8005454:	4619      	mov	r1, r3
 8005456:	4610      	mov	r0, r2
 8005458:	f000 fbb0 	bl	8005bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
	...

080054b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d109      	bne.n	80054dc <HAL_TIM_PWM_Start+0x24>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	bf14      	ite	ne
 80054d4:	2301      	movne	r3, #1
 80054d6:	2300      	moveq	r3, #0
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	e022      	b.n	8005522 <HAL_TIM_PWM_Start+0x6a>
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	2b04      	cmp	r3, #4
 80054e0:	d109      	bne.n	80054f6 <HAL_TIM_PWM_Start+0x3e>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	bf14      	ite	ne
 80054ee:	2301      	movne	r3, #1
 80054f0:	2300      	moveq	r3, #0
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	e015      	b.n	8005522 <HAL_TIM_PWM_Start+0x6a>
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d109      	bne.n	8005510 <HAL_TIM_PWM_Start+0x58>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b01      	cmp	r3, #1
 8005506:	bf14      	ite	ne
 8005508:	2301      	movne	r3, #1
 800550a:	2300      	moveq	r3, #0
 800550c:	b2db      	uxtb	r3, r3
 800550e:	e008      	b.n	8005522 <HAL_TIM_PWM_Start+0x6a>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b01      	cmp	r3, #1
 800551a:	bf14      	ite	ne
 800551c:	2301      	movne	r3, #1
 800551e:	2300      	moveq	r3, #0
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e07c      	b.n	8005624 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d104      	bne.n	800553a <HAL_TIM_PWM_Start+0x82>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005538:	e013      	b.n	8005562 <HAL_TIM_PWM_Start+0xaa>
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b04      	cmp	r3, #4
 800553e:	d104      	bne.n	800554a <HAL_TIM_PWM_Start+0x92>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2202      	movs	r2, #2
 8005544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005548:	e00b      	b.n	8005562 <HAL_TIM_PWM_Start+0xaa>
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b08      	cmp	r3, #8
 800554e:	d104      	bne.n	800555a <HAL_TIM_PWM_Start+0xa2>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005558:	e003      	b.n	8005562 <HAL_TIM_PWM_Start+0xaa>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2202      	movs	r2, #2
 800555e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2201      	movs	r2, #1
 8005568:	6839      	ldr	r1, [r7, #0]
 800556a:	4618      	mov	r0, r3
 800556c:	f000 fe10 	bl	8006190 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a2d      	ldr	r2, [pc, #180]	; (800562c <HAL_TIM_PWM_Start+0x174>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d004      	beq.n	8005584 <HAL_TIM_PWM_Start+0xcc>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a2c      	ldr	r2, [pc, #176]	; (8005630 <HAL_TIM_PWM_Start+0x178>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d101      	bne.n	8005588 <HAL_TIM_PWM_Start+0xd0>
 8005584:	2301      	movs	r3, #1
 8005586:	e000      	b.n	800558a <HAL_TIM_PWM_Start+0xd2>
 8005588:	2300      	movs	r3, #0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d007      	beq.n	800559e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800559c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a22      	ldr	r2, [pc, #136]	; (800562c <HAL_TIM_PWM_Start+0x174>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d022      	beq.n	80055ee <HAL_TIM_PWM_Start+0x136>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055b0:	d01d      	beq.n	80055ee <HAL_TIM_PWM_Start+0x136>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a1f      	ldr	r2, [pc, #124]	; (8005634 <HAL_TIM_PWM_Start+0x17c>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d018      	beq.n	80055ee <HAL_TIM_PWM_Start+0x136>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a1d      	ldr	r2, [pc, #116]	; (8005638 <HAL_TIM_PWM_Start+0x180>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d013      	beq.n	80055ee <HAL_TIM_PWM_Start+0x136>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a1c      	ldr	r2, [pc, #112]	; (800563c <HAL_TIM_PWM_Start+0x184>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d00e      	beq.n	80055ee <HAL_TIM_PWM_Start+0x136>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a16      	ldr	r2, [pc, #88]	; (8005630 <HAL_TIM_PWM_Start+0x178>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d009      	beq.n	80055ee <HAL_TIM_PWM_Start+0x136>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a18      	ldr	r2, [pc, #96]	; (8005640 <HAL_TIM_PWM_Start+0x188>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d004      	beq.n	80055ee <HAL_TIM_PWM_Start+0x136>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a16      	ldr	r2, [pc, #88]	; (8005644 <HAL_TIM_PWM_Start+0x18c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d111      	bne.n	8005612 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f003 0307 	and.w	r3, r3, #7
 80055f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2b06      	cmp	r3, #6
 80055fe:	d010      	beq.n	8005622 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f042 0201 	orr.w	r2, r2, #1
 800560e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005610:	e007      	b.n	8005622 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f042 0201 	orr.w	r2, r2, #1
 8005620:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	40010000 	.word	0x40010000
 8005630:	40010400 	.word	0x40010400
 8005634:	40000400 	.word	0x40000400
 8005638:	40000800 	.word	0x40000800
 800563c:	40000c00 	.word	0x40000c00
 8005640:	40014000 	.word	0x40014000
 8005644:	40001800 	.word	0x40001800

08005648 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	f003 0302 	and.w	r3, r3, #2
 800565a:	2b02      	cmp	r3, #2
 800565c:	d122      	bne.n	80056a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b02      	cmp	r3, #2
 800566a:	d11b      	bne.n	80056a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f06f 0202 	mvn.w	r2, #2
 8005674:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	f003 0303 	and.w	r3, r3, #3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fa77 	bl	8005b7e <HAL_TIM_IC_CaptureCallback>
 8005690:	e005      	b.n	800569e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 fa69 	bl	8005b6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 fa7a 	bl	8005b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	f003 0304 	and.w	r3, r3, #4
 80056ae:	2b04      	cmp	r3, #4
 80056b0:	d122      	bne.n	80056f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f003 0304 	and.w	r3, r3, #4
 80056bc:	2b04      	cmp	r3, #4
 80056be:	d11b      	bne.n	80056f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f06f 0204 	mvn.w	r2, #4
 80056c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2202      	movs	r2, #2
 80056ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 fa4d 	bl	8005b7e <HAL_TIM_IC_CaptureCallback>
 80056e4:	e005      	b.n	80056f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 fa3f 	bl	8005b6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 fa50 	bl	8005b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	f003 0308 	and.w	r3, r3, #8
 8005702:	2b08      	cmp	r3, #8
 8005704:	d122      	bne.n	800574c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f003 0308 	and.w	r3, r3, #8
 8005710:	2b08      	cmp	r3, #8
 8005712:	d11b      	bne.n	800574c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f06f 0208 	mvn.w	r2, #8
 800571c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2204      	movs	r2, #4
 8005722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	f003 0303 	and.w	r3, r3, #3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 fa23 	bl	8005b7e <HAL_TIM_IC_CaptureCallback>
 8005738:	e005      	b.n	8005746 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 fa15 	bl	8005b6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 fa26 	bl	8005b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	f003 0310 	and.w	r3, r3, #16
 8005756:	2b10      	cmp	r3, #16
 8005758:	d122      	bne.n	80057a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f003 0310 	and.w	r3, r3, #16
 8005764:	2b10      	cmp	r3, #16
 8005766:	d11b      	bne.n	80057a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f06f 0210 	mvn.w	r2, #16
 8005770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2208      	movs	r2, #8
 8005776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 f9f9 	bl	8005b7e <HAL_TIM_IC_CaptureCallback>
 800578c:	e005      	b.n	800579a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f9eb 	bl	8005b6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f9fc 	bl	8005b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d10e      	bne.n	80057cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d107      	bne.n	80057cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f06f 0201 	mvn.w	r2, #1
 80057c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7fc fb04 	bl	8001dd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d6:	2b80      	cmp	r3, #128	; 0x80
 80057d8:	d10e      	bne.n	80057f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e4:	2b80      	cmp	r3, #128	; 0x80
 80057e6:	d107      	bne.n	80057f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 fd78 	bl	80062e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005802:	2b40      	cmp	r3, #64	; 0x40
 8005804:	d10e      	bne.n	8005824 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005810:	2b40      	cmp	r3, #64	; 0x40
 8005812:	d107      	bne.n	8005824 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800581c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f9c1 	bl	8005ba6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	f003 0320 	and.w	r3, r3, #32
 800582e:	2b20      	cmp	r3, #32
 8005830:	d10e      	bne.n	8005850 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f003 0320 	and.w	r3, r3, #32
 800583c:	2b20      	cmp	r3, #32
 800583e:	d107      	bne.n	8005850 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f06f 0220 	mvn.w	r2, #32
 8005848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 fd42 	bl	80062d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005850:	bf00      	nop
 8005852:	3708      	adds	r7, #8
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005864:	2300      	movs	r3, #0
 8005866:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800586e:	2b01      	cmp	r3, #1
 8005870:	d101      	bne.n	8005876 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005872:	2302      	movs	r3, #2
 8005874:	e0ae      	b.n	80059d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2b0c      	cmp	r3, #12
 8005882:	f200 809f 	bhi.w	80059c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005886:	a201      	add	r2, pc, #4	; (adr r2, 800588c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588c:	080058c1 	.word	0x080058c1
 8005890:	080059c5 	.word	0x080059c5
 8005894:	080059c5 	.word	0x080059c5
 8005898:	080059c5 	.word	0x080059c5
 800589c:	08005901 	.word	0x08005901
 80058a0:	080059c5 	.word	0x080059c5
 80058a4:	080059c5 	.word	0x080059c5
 80058a8:	080059c5 	.word	0x080059c5
 80058ac:	08005943 	.word	0x08005943
 80058b0:	080059c5 	.word	0x080059c5
 80058b4:	080059c5 	.word	0x080059c5
 80058b8:	080059c5 	.word	0x080059c5
 80058bc:	08005983 	.word	0x08005983
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68b9      	ldr	r1, [r7, #8]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 fa18 	bl	8005cfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699a      	ldr	r2, [r3, #24]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0208 	orr.w	r2, r2, #8
 80058da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	699a      	ldr	r2, [r3, #24]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f022 0204 	bic.w	r2, r2, #4
 80058ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6999      	ldr	r1, [r3, #24]
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	691a      	ldr	r2, [r3, #16]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	430a      	orrs	r2, r1
 80058fc:	619a      	str	r2, [r3, #24]
      break;
 80058fe:	e064      	b.n	80059ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68b9      	ldr	r1, [r7, #8]
 8005906:	4618      	mov	r0, r3
 8005908:	f000 fa68 	bl	8005ddc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	699a      	ldr	r2, [r3, #24]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800591a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	699a      	ldr	r2, [r3, #24]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800592a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6999      	ldr	r1, [r3, #24]
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	021a      	lsls	r2, r3, #8
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	430a      	orrs	r2, r1
 800593e:	619a      	str	r2, [r3, #24]
      break;
 8005940:	e043      	b.n	80059ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68b9      	ldr	r1, [r7, #8]
 8005948:	4618      	mov	r0, r3
 800594a:	f000 fabd 	bl	8005ec8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	69da      	ldr	r2, [r3, #28]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f042 0208 	orr.w	r2, r2, #8
 800595c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	69da      	ldr	r2, [r3, #28]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 0204 	bic.w	r2, r2, #4
 800596c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	69d9      	ldr	r1, [r3, #28]
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	691a      	ldr	r2, [r3, #16]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	430a      	orrs	r2, r1
 800597e:	61da      	str	r2, [r3, #28]
      break;
 8005980:	e023      	b.n	80059ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68b9      	ldr	r1, [r7, #8]
 8005988:	4618      	mov	r0, r3
 800598a:	f000 fb11 	bl	8005fb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	69da      	ldr	r2, [r3, #28]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800599c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	69da      	ldr	r2, [r3, #28]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	69d9      	ldr	r1, [r3, #28]
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	021a      	lsls	r2, r3, #8
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	61da      	str	r2, [r3, #28]
      break;
 80059c2:	e002      	b.n	80059ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	75fb      	strb	r3, [r7, #23]
      break;
 80059c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3718      	adds	r7, #24
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059e6:	2300      	movs	r3, #0
 80059e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d101      	bne.n	80059f8 <HAL_TIM_ConfigClockSource+0x1c>
 80059f4:	2302      	movs	r3, #2
 80059f6:	e0b4      	b.n	8005b62 <HAL_TIM_ConfigClockSource+0x186>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a30:	d03e      	beq.n	8005ab0 <HAL_TIM_ConfigClockSource+0xd4>
 8005a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a36:	f200 8087 	bhi.w	8005b48 <HAL_TIM_ConfigClockSource+0x16c>
 8005a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a3e:	f000 8086 	beq.w	8005b4e <HAL_TIM_ConfigClockSource+0x172>
 8005a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a46:	d87f      	bhi.n	8005b48 <HAL_TIM_ConfigClockSource+0x16c>
 8005a48:	2b70      	cmp	r3, #112	; 0x70
 8005a4a:	d01a      	beq.n	8005a82 <HAL_TIM_ConfigClockSource+0xa6>
 8005a4c:	2b70      	cmp	r3, #112	; 0x70
 8005a4e:	d87b      	bhi.n	8005b48 <HAL_TIM_ConfigClockSource+0x16c>
 8005a50:	2b60      	cmp	r3, #96	; 0x60
 8005a52:	d050      	beq.n	8005af6 <HAL_TIM_ConfigClockSource+0x11a>
 8005a54:	2b60      	cmp	r3, #96	; 0x60
 8005a56:	d877      	bhi.n	8005b48 <HAL_TIM_ConfigClockSource+0x16c>
 8005a58:	2b50      	cmp	r3, #80	; 0x50
 8005a5a:	d03c      	beq.n	8005ad6 <HAL_TIM_ConfigClockSource+0xfa>
 8005a5c:	2b50      	cmp	r3, #80	; 0x50
 8005a5e:	d873      	bhi.n	8005b48 <HAL_TIM_ConfigClockSource+0x16c>
 8005a60:	2b40      	cmp	r3, #64	; 0x40
 8005a62:	d058      	beq.n	8005b16 <HAL_TIM_ConfigClockSource+0x13a>
 8005a64:	2b40      	cmp	r3, #64	; 0x40
 8005a66:	d86f      	bhi.n	8005b48 <HAL_TIM_ConfigClockSource+0x16c>
 8005a68:	2b30      	cmp	r3, #48	; 0x30
 8005a6a:	d064      	beq.n	8005b36 <HAL_TIM_ConfigClockSource+0x15a>
 8005a6c:	2b30      	cmp	r3, #48	; 0x30
 8005a6e:	d86b      	bhi.n	8005b48 <HAL_TIM_ConfigClockSource+0x16c>
 8005a70:	2b20      	cmp	r3, #32
 8005a72:	d060      	beq.n	8005b36 <HAL_TIM_ConfigClockSource+0x15a>
 8005a74:	2b20      	cmp	r3, #32
 8005a76:	d867      	bhi.n	8005b48 <HAL_TIM_ConfigClockSource+0x16c>
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d05c      	beq.n	8005b36 <HAL_TIM_ConfigClockSource+0x15a>
 8005a7c:	2b10      	cmp	r3, #16
 8005a7e:	d05a      	beq.n	8005b36 <HAL_TIM_ConfigClockSource+0x15a>
 8005a80:	e062      	b.n	8005b48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6818      	ldr	r0, [r3, #0]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	6899      	ldr	r1, [r3, #8]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	685a      	ldr	r2, [r3, #4]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	f000 fb5d 	bl	8006150 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005aa4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	609a      	str	r2, [r3, #8]
      break;
 8005aae:	e04f      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6818      	ldr	r0, [r3, #0]
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	6899      	ldr	r1, [r3, #8]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	f000 fb46 	bl	8006150 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689a      	ldr	r2, [r3, #8]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ad2:	609a      	str	r2, [r3, #8]
      break;
 8005ad4:	e03c      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6818      	ldr	r0, [r3, #0]
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	6859      	ldr	r1, [r3, #4]
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	f000 faba 	bl	800605c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2150      	movs	r1, #80	; 0x50
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 fb13 	bl	800611a <TIM_ITRx_SetConfig>
      break;
 8005af4:	e02c      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6818      	ldr	r0, [r3, #0]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	6859      	ldr	r1, [r3, #4]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	461a      	mov	r2, r3
 8005b04:	f000 fad9 	bl	80060ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2160      	movs	r1, #96	; 0x60
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f000 fb03 	bl	800611a <TIM_ITRx_SetConfig>
      break;
 8005b14:	e01c      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6818      	ldr	r0, [r3, #0]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	6859      	ldr	r1, [r3, #4]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	461a      	mov	r2, r3
 8005b24:	f000 fa9a 	bl	800605c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2140      	movs	r1, #64	; 0x40
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 faf3 	bl	800611a <TIM_ITRx_SetConfig>
      break;
 8005b34:	e00c      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4619      	mov	r1, r3
 8005b40:	4610      	mov	r0, r2
 8005b42:	f000 faea 	bl	800611a <TIM_ITRx_SetConfig>
      break;
 8005b46:	e003      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b4c:	e000      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b083      	sub	sp, #12
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b72:	bf00      	nop
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b083      	sub	sp, #12
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b86:	bf00      	nop
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b083      	sub	sp, #12
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b9a:	bf00      	nop
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr

08005ba6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b083      	sub	sp, #12
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bae:	bf00      	nop
 8005bb0:	370c      	adds	r7, #12
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
	...

08005bbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a40      	ldr	r2, [pc, #256]	; (8005cd0 <TIM_Base_SetConfig+0x114>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d013      	beq.n	8005bfc <TIM_Base_SetConfig+0x40>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bda:	d00f      	beq.n	8005bfc <TIM_Base_SetConfig+0x40>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a3d      	ldr	r2, [pc, #244]	; (8005cd4 <TIM_Base_SetConfig+0x118>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d00b      	beq.n	8005bfc <TIM_Base_SetConfig+0x40>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a3c      	ldr	r2, [pc, #240]	; (8005cd8 <TIM_Base_SetConfig+0x11c>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d007      	beq.n	8005bfc <TIM_Base_SetConfig+0x40>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a3b      	ldr	r2, [pc, #236]	; (8005cdc <TIM_Base_SetConfig+0x120>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d003      	beq.n	8005bfc <TIM_Base_SetConfig+0x40>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a3a      	ldr	r2, [pc, #232]	; (8005ce0 <TIM_Base_SetConfig+0x124>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d108      	bne.n	8005c0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a2f      	ldr	r2, [pc, #188]	; (8005cd0 <TIM_Base_SetConfig+0x114>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d02b      	beq.n	8005c6e <TIM_Base_SetConfig+0xb2>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c1c:	d027      	beq.n	8005c6e <TIM_Base_SetConfig+0xb2>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a2c      	ldr	r2, [pc, #176]	; (8005cd4 <TIM_Base_SetConfig+0x118>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d023      	beq.n	8005c6e <TIM_Base_SetConfig+0xb2>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a2b      	ldr	r2, [pc, #172]	; (8005cd8 <TIM_Base_SetConfig+0x11c>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d01f      	beq.n	8005c6e <TIM_Base_SetConfig+0xb2>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a2a      	ldr	r2, [pc, #168]	; (8005cdc <TIM_Base_SetConfig+0x120>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d01b      	beq.n	8005c6e <TIM_Base_SetConfig+0xb2>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a29      	ldr	r2, [pc, #164]	; (8005ce0 <TIM_Base_SetConfig+0x124>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d017      	beq.n	8005c6e <TIM_Base_SetConfig+0xb2>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a28      	ldr	r2, [pc, #160]	; (8005ce4 <TIM_Base_SetConfig+0x128>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d013      	beq.n	8005c6e <TIM_Base_SetConfig+0xb2>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a27      	ldr	r2, [pc, #156]	; (8005ce8 <TIM_Base_SetConfig+0x12c>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d00f      	beq.n	8005c6e <TIM_Base_SetConfig+0xb2>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a26      	ldr	r2, [pc, #152]	; (8005cec <TIM_Base_SetConfig+0x130>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d00b      	beq.n	8005c6e <TIM_Base_SetConfig+0xb2>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a25      	ldr	r2, [pc, #148]	; (8005cf0 <TIM_Base_SetConfig+0x134>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d007      	beq.n	8005c6e <TIM_Base_SetConfig+0xb2>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a24      	ldr	r2, [pc, #144]	; (8005cf4 <TIM_Base_SetConfig+0x138>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d003      	beq.n	8005c6e <TIM_Base_SetConfig+0xb2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a23      	ldr	r2, [pc, #140]	; (8005cf8 <TIM_Base_SetConfig+0x13c>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d108      	bne.n	8005c80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	689a      	ldr	r2, [r3, #8]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a0a      	ldr	r2, [pc, #40]	; (8005cd0 <TIM_Base_SetConfig+0x114>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d003      	beq.n	8005cb4 <TIM_Base_SetConfig+0xf8>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a0c      	ldr	r2, [pc, #48]	; (8005ce0 <TIM_Base_SetConfig+0x124>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d103      	bne.n	8005cbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	691a      	ldr	r2, [r3, #16]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	615a      	str	r2, [r3, #20]
}
 8005cc2:	bf00      	nop
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	40010000 	.word	0x40010000
 8005cd4:	40000400 	.word	0x40000400
 8005cd8:	40000800 	.word	0x40000800
 8005cdc:	40000c00 	.word	0x40000c00
 8005ce0:	40010400 	.word	0x40010400
 8005ce4:	40014000 	.word	0x40014000
 8005ce8:	40014400 	.word	0x40014400
 8005cec:	40014800 	.word	0x40014800
 8005cf0:	40001800 	.word	0x40001800
 8005cf4:	40001c00 	.word	0x40001c00
 8005cf8:	40002000 	.word	0x40002000

08005cfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b087      	sub	sp, #28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	f023 0201 	bic.w	r2, r3, #1
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f023 0303 	bic.w	r3, r3, #3
 8005d32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f023 0302 	bic.w	r3, r3, #2
 8005d44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a20      	ldr	r2, [pc, #128]	; (8005dd4 <TIM_OC1_SetConfig+0xd8>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d003      	beq.n	8005d60 <TIM_OC1_SetConfig+0x64>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a1f      	ldr	r2, [pc, #124]	; (8005dd8 <TIM_OC1_SetConfig+0xdc>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d10c      	bne.n	8005d7a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f023 0308 	bic.w	r3, r3, #8
 8005d66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	697a      	ldr	r2, [r7, #20]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f023 0304 	bic.w	r3, r3, #4
 8005d78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a15      	ldr	r2, [pc, #84]	; (8005dd4 <TIM_OC1_SetConfig+0xd8>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d003      	beq.n	8005d8a <TIM_OC1_SetConfig+0x8e>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a14      	ldr	r2, [pc, #80]	; (8005dd8 <TIM_OC1_SetConfig+0xdc>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d111      	bne.n	8005dae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	685a      	ldr	r2, [r3, #4]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	621a      	str	r2, [r3, #32]
}
 8005dc8:	bf00      	nop
 8005dca:	371c      	adds	r7, #28
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr
 8005dd4:	40010000 	.word	0x40010000
 8005dd8:	40010400 	.word	0x40010400

08005ddc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b087      	sub	sp, #28
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	f023 0210 	bic.w	r2, r3, #16
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	021b      	lsls	r3, r3, #8
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f023 0320 	bic.w	r3, r3, #32
 8005e26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	011b      	lsls	r3, r3, #4
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a22      	ldr	r2, [pc, #136]	; (8005ec0 <TIM_OC2_SetConfig+0xe4>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d003      	beq.n	8005e44 <TIM_OC2_SetConfig+0x68>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a21      	ldr	r2, [pc, #132]	; (8005ec4 <TIM_OC2_SetConfig+0xe8>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d10d      	bne.n	8005e60 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	011b      	lsls	r3, r3, #4
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a17      	ldr	r2, [pc, #92]	; (8005ec0 <TIM_OC2_SetConfig+0xe4>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d003      	beq.n	8005e70 <TIM_OC2_SetConfig+0x94>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a16      	ldr	r2, [pc, #88]	; (8005ec4 <TIM_OC2_SetConfig+0xe8>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d113      	bne.n	8005e98 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	621a      	str	r2, [r3, #32]
}
 8005eb2:	bf00      	nop
 8005eb4:	371c      	adds	r7, #28
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	40010000 	.word	0x40010000
 8005ec4:	40010400 	.word	0x40010400

08005ec8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b087      	sub	sp, #28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	69db      	ldr	r3, [r3, #28]
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f023 0303 	bic.w	r3, r3, #3
 8005efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	021b      	lsls	r3, r3, #8
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a21      	ldr	r2, [pc, #132]	; (8005fa8 <TIM_OC3_SetConfig+0xe0>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d003      	beq.n	8005f2e <TIM_OC3_SetConfig+0x66>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a20      	ldr	r2, [pc, #128]	; (8005fac <TIM_OC3_SetConfig+0xe4>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d10d      	bne.n	8005f4a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	021b      	lsls	r3, r3, #8
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a16      	ldr	r2, [pc, #88]	; (8005fa8 <TIM_OC3_SetConfig+0xe0>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d003      	beq.n	8005f5a <TIM_OC3_SetConfig+0x92>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a15      	ldr	r2, [pc, #84]	; (8005fac <TIM_OC3_SetConfig+0xe4>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d113      	bne.n	8005f82 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	011b      	lsls	r3, r3, #4
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	011b      	lsls	r3, r3, #4
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	621a      	str	r2, [r3, #32]
}
 8005f9c:	bf00      	nop
 8005f9e:	371c      	adds	r7, #28
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr
 8005fa8:	40010000 	.word	0x40010000
 8005fac:	40010400 	.word	0x40010400

08005fb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b087      	sub	sp, #28
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	021b      	lsls	r3, r3, #8
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ffa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	031b      	lsls	r3, r3, #12
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	4313      	orrs	r3, r2
 8006006:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a12      	ldr	r2, [pc, #72]	; (8006054 <TIM_OC4_SetConfig+0xa4>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d003      	beq.n	8006018 <TIM_OC4_SetConfig+0x68>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a11      	ldr	r2, [pc, #68]	; (8006058 <TIM_OC4_SetConfig+0xa8>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d109      	bne.n	800602c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800601e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	019b      	lsls	r3, r3, #6
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	4313      	orrs	r3, r2
 800602a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	693a      	ldr	r2, [r7, #16]
 8006044:	621a      	str	r2, [r3, #32]
}
 8006046:	bf00      	nop
 8006048:	371c      	adds	r7, #28
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	40010000 	.word	0x40010000
 8006058:	40010400 	.word	0x40010400

0800605c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800605c:	b480      	push	{r7}
 800605e:	b087      	sub	sp, #28
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6a1b      	ldr	r3, [r3, #32]
 800606c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	f023 0201 	bic.w	r2, r3, #1
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006086:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	011b      	lsls	r3, r3, #4
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	4313      	orrs	r3, r2
 8006090:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	f023 030a 	bic.w	r3, r3, #10
 8006098:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	4313      	orrs	r3, r2
 80060a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	621a      	str	r2, [r3, #32]
}
 80060ae:	bf00      	nop
 80060b0:	371c      	adds	r7, #28
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b087      	sub	sp, #28
 80060be:	af00      	add	r7, sp, #0
 80060c0:	60f8      	str	r0, [r7, #12]
 80060c2:	60b9      	str	r1, [r7, #8]
 80060c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	f023 0210 	bic.w	r2, r3, #16
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	031b      	lsls	r3, r3, #12
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	011b      	lsls	r3, r3, #4
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	4313      	orrs	r3, r2
 8006100:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	621a      	str	r2, [r3, #32]
}
 800610e:	bf00      	nop
 8006110:	371c      	adds	r7, #28
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800611a:	b480      	push	{r7}
 800611c:	b085      	sub	sp, #20
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
 8006122:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006130:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006132:	683a      	ldr	r2, [r7, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4313      	orrs	r3, r2
 8006138:	f043 0307 	orr.w	r3, r3, #7
 800613c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	609a      	str	r2, [r3, #8]
}
 8006144:	bf00      	nop
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006150:	b480      	push	{r7}
 8006152:	b087      	sub	sp, #28
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
 800615c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800616a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	021a      	lsls	r2, r3, #8
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	431a      	orrs	r2, r3
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	4313      	orrs	r3, r2
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	4313      	orrs	r3, r2
 800617c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	609a      	str	r2, [r3, #8]
}
 8006184:	bf00      	nop
 8006186:	371c      	adds	r7, #28
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006190:	b480      	push	{r7}
 8006192:	b087      	sub	sp, #28
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	f003 031f 	and.w	r3, r3, #31
 80061a2:	2201      	movs	r2, #1
 80061a4:	fa02 f303 	lsl.w	r3, r2, r3
 80061a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6a1a      	ldr	r2, [r3, #32]
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	43db      	mvns	r3, r3
 80061b2:	401a      	ands	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6a1a      	ldr	r2, [r3, #32]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	f003 031f 	and.w	r3, r3, #31
 80061c2:	6879      	ldr	r1, [r7, #4]
 80061c4:	fa01 f303 	lsl.w	r3, r1, r3
 80061c8:	431a      	orrs	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	621a      	str	r2, [r3, #32]
}
 80061ce:	bf00      	nop
 80061d0:	371c      	adds	r7, #28
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
	...

080061dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d101      	bne.n	80061f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061f0:	2302      	movs	r3, #2
 80061f2:	e05a      	b.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	4313      	orrs	r3, r2
 8006224:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a21      	ldr	r2, [pc, #132]	; (80062b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d022      	beq.n	800627e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006240:	d01d      	beq.n	800627e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a1d      	ldr	r2, [pc, #116]	; (80062bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d018      	beq.n	800627e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a1b      	ldr	r2, [pc, #108]	; (80062c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d013      	beq.n	800627e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a1a      	ldr	r2, [pc, #104]	; (80062c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d00e      	beq.n	800627e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a18      	ldr	r2, [pc, #96]	; (80062c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d009      	beq.n	800627e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a17      	ldr	r2, [pc, #92]	; (80062cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d004      	beq.n	800627e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a15      	ldr	r2, [pc, #84]	; (80062d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d10c      	bne.n	8006298 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006284:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	4313      	orrs	r3, r2
 800628e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3714      	adds	r7, #20
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	40010000 	.word	0x40010000
 80062bc:	40000400 	.word	0x40000400
 80062c0:	40000800 	.word	0x40000800
 80062c4:	40000c00 	.word	0x40000c00
 80062c8:	40010400 	.word	0x40010400
 80062cc:	40014000 	.word	0x40014000
 80062d0:	40001800 	.word	0x40001800

080062d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <__NVIC_SetPriority>:
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	4603      	mov	r3, r0
 8006304:	6039      	str	r1, [r7, #0]
 8006306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800630c:	2b00      	cmp	r3, #0
 800630e:	db0a      	blt.n	8006326 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	b2da      	uxtb	r2, r3
 8006314:	490c      	ldr	r1, [pc, #48]	; (8006348 <__NVIC_SetPriority+0x4c>)
 8006316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800631a:	0112      	lsls	r2, r2, #4
 800631c:	b2d2      	uxtb	r2, r2
 800631e:	440b      	add	r3, r1
 8006320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006324:	e00a      	b.n	800633c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	b2da      	uxtb	r2, r3
 800632a:	4908      	ldr	r1, [pc, #32]	; (800634c <__NVIC_SetPriority+0x50>)
 800632c:	79fb      	ldrb	r3, [r7, #7]
 800632e:	f003 030f 	and.w	r3, r3, #15
 8006332:	3b04      	subs	r3, #4
 8006334:	0112      	lsls	r2, r2, #4
 8006336:	b2d2      	uxtb	r2, r2
 8006338:	440b      	add	r3, r1
 800633a:	761a      	strb	r2, [r3, #24]
}
 800633c:	bf00      	nop
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr
 8006348:	e000e100 	.word	0xe000e100
 800634c:	e000ed00 	.word	0xe000ed00

08006350 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006350:	b580      	push	{r7, lr}
 8006352:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006354:	2100      	movs	r1, #0
 8006356:	f06f 0004 	mvn.w	r0, #4
 800635a:	f7ff ffcf 	bl	80062fc <__NVIC_SetPriority>
#endif
}
 800635e:	bf00      	nop
 8006360:	bd80      	pop	{r7, pc}
	...

08006364 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800636a:	f3ef 8305 	mrs	r3, IPSR
 800636e:	603b      	str	r3, [r7, #0]
  return(result);
 8006370:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006372:	2b00      	cmp	r3, #0
 8006374:	d003      	beq.n	800637e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006376:	f06f 0305 	mvn.w	r3, #5
 800637a:	607b      	str	r3, [r7, #4]
 800637c:	e00c      	b.n	8006398 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800637e:	4b0a      	ldr	r3, [pc, #40]	; (80063a8 <osKernelInitialize+0x44>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d105      	bne.n	8006392 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006386:	4b08      	ldr	r3, [pc, #32]	; (80063a8 <osKernelInitialize+0x44>)
 8006388:	2201      	movs	r2, #1
 800638a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800638c:	2300      	movs	r3, #0
 800638e:	607b      	str	r3, [r7, #4]
 8006390:	e002      	b.n	8006398 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006392:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006396:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006398:	687b      	ldr	r3, [r7, #4]
}
 800639a:	4618      	mov	r0, r3
 800639c:	370c      	adds	r7, #12
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	20000270 	.word	0x20000270

080063ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063b2:	f3ef 8305 	mrs	r3, IPSR
 80063b6:	603b      	str	r3, [r7, #0]
  return(result);
 80063b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d003      	beq.n	80063c6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80063be:	f06f 0305 	mvn.w	r3, #5
 80063c2:	607b      	str	r3, [r7, #4]
 80063c4:	e010      	b.n	80063e8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80063c6:	4b0b      	ldr	r3, [pc, #44]	; (80063f4 <osKernelStart+0x48>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d109      	bne.n	80063e2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80063ce:	f7ff ffbf 	bl	8006350 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80063d2:	4b08      	ldr	r3, [pc, #32]	; (80063f4 <osKernelStart+0x48>)
 80063d4:	2202      	movs	r2, #2
 80063d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80063d8:	f001 f866 	bl	80074a8 <vTaskStartScheduler>
      stat = osOK;
 80063dc:	2300      	movs	r3, #0
 80063de:	607b      	str	r3, [r7, #4]
 80063e0:	e002      	b.n	80063e8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80063e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80063e8:	687b      	ldr	r3, [r7, #4]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3708      	adds	r7, #8
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	20000270 	.word	0x20000270

080063f8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b08e      	sub	sp, #56	; 0x38
 80063fc:	af04      	add	r7, sp, #16
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006404:	2300      	movs	r3, #0
 8006406:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006408:	f3ef 8305 	mrs	r3, IPSR
 800640c:	617b      	str	r3, [r7, #20]
  return(result);
 800640e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006410:	2b00      	cmp	r3, #0
 8006412:	d17e      	bne.n	8006512 <osThreadNew+0x11a>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d07b      	beq.n	8006512 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800641a:	2380      	movs	r3, #128	; 0x80
 800641c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800641e:	2318      	movs	r3, #24
 8006420:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006422:	2300      	movs	r3, #0
 8006424:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006426:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800642a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d045      	beq.n	80064be <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d002      	beq.n	8006440 <osThreadNew+0x48>
        name = attr->name;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d002      	beq.n	800644e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d008      	beq.n	8006466 <osThreadNew+0x6e>
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	2b38      	cmp	r3, #56	; 0x38
 8006458:	d805      	bhi.n	8006466 <osThreadNew+0x6e>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	f003 0301 	and.w	r3, r3, #1
 8006462:	2b00      	cmp	r3, #0
 8006464:	d001      	beq.n	800646a <osThreadNew+0x72>
        return (NULL);
 8006466:	2300      	movs	r3, #0
 8006468:	e054      	b.n	8006514 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	089b      	lsrs	r3, r3, #2
 8006478:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00e      	beq.n	80064a0 <osThreadNew+0xa8>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	2b5b      	cmp	r3, #91	; 0x5b
 8006488:	d90a      	bls.n	80064a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800648e:	2b00      	cmp	r3, #0
 8006490:	d006      	beq.n	80064a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d002      	beq.n	80064a0 <osThreadNew+0xa8>
        mem = 1;
 800649a:	2301      	movs	r3, #1
 800649c:	61bb      	str	r3, [r7, #24]
 800649e:	e010      	b.n	80064c2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10c      	bne.n	80064c2 <osThreadNew+0xca>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d108      	bne.n	80064c2 <osThreadNew+0xca>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d104      	bne.n	80064c2 <osThreadNew+0xca>
          mem = 0;
 80064b8:	2300      	movs	r3, #0
 80064ba:	61bb      	str	r3, [r7, #24]
 80064bc:	e001      	b.n	80064c2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80064be:	2300      	movs	r3, #0
 80064c0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d110      	bne.n	80064ea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80064d0:	9202      	str	r2, [sp, #8]
 80064d2:	9301      	str	r3, [sp, #4]
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	9300      	str	r3, [sp, #0]
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	6a3a      	ldr	r2, [r7, #32]
 80064dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f000 fe0c 	bl	80070fc <xTaskCreateStatic>
 80064e4:	4603      	mov	r3, r0
 80064e6:	613b      	str	r3, [r7, #16]
 80064e8:	e013      	b.n	8006512 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d110      	bne.n	8006512 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80064f0:	6a3b      	ldr	r3, [r7, #32]
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	f107 0310 	add.w	r3, r7, #16
 80064f8:	9301      	str	r3, [sp, #4]
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	9300      	str	r3, [sp, #0]
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f000 fe57 	bl	80071b6 <xTaskCreate>
 8006508:	4603      	mov	r3, r0
 800650a:	2b01      	cmp	r3, #1
 800650c:	d001      	beq.n	8006512 <osThreadNew+0x11a>
            hTask = NULL;
 800650e:	2300      	movs	r3, #0
 8006510:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006512:	693b      	ldr	r3, [r7, #16]
}
 8006514:	4618      	mov	r0, r3
 8006516:	3728      	adds	r7, #40	; 0x28
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006524:	f3ef 8305 	mrs	r3, IPSR
 8006528:	60bb      	str	r3, [r7, #8]
  return(result);
 800652a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800652c:	2b00      	cmp	r3, #0
 800652e:	d003      	beq.n	8006538 <osDelay+0x1c>
    stat = osErrorISR;
 8006530:	f06f 0305 	mvn.w	r3, #5
 8006534:	60fb      	str	r3, [r7, #12]
 8006536:	e007      	b.n	8006548 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006538:	2300      	movs	r3, #0
 800653a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d002      	beq.n	8006548 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 ff7c 	bl	8007440 <vTaskDelay>
    }
  }

  return (stat);
 8006548:	68fb      	ldr	r3, [r7, #12]
}
 800654a:	4618      	mov	r0, r3
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
	...

08006554 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	4a07      	ldr	r2, [pc, #28]	; (8006580 <vApplicationGetIdleTaskMemory+0x2c>)
 8006564:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	4a06      	ldr	r2, [pc, #24]	; (8006584 <vApplicationGetIdleTaskMemory+0x30>)
 800656a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2280      	movs	r2, #128	; 0x80
 8006570:	601a      	str	r2, [r3, #0]
}
 8006572:	bf00      	nop
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	20000274 	.word	0x20000274
 8006584:	200002d0 	.word	0x200002d0

08006588 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	4a07      	ldr	r2, [pc, #28]	; (80065b4 <vApplicationGetTimerTaskMemory+0x2c>)
 8006598:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	4a06      	ldr	r2, [pc, #24]	; (80065b8 <vApplicationGetTimerTaskMemory+0x30>)
 800659e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065a6:	601a      	str	r2, [r3, #0]
}
 80065a8:	bf00      	nop
 80065aa:	3714      	adds	r7, #20
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr
 80065b4:	200004d0 	.word	0x200004d0
 80065b8:	2000052c 	.word	0x2000052c

080065bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f103 0208 	add.w	r2, r3, #8
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f103 0208 	add.w	r2, r3, #8
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f103 0208 	add.w	r2, r3, #8
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800660a:	bf00      	nop
 800660c:	370c      	adds	r7, #12
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr

08006616 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006616:	b480      	push	{r7}
 8006618:	b085      	sub	sp, #20
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
 800661e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	689a      	ldr	r2, [r3, #8]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	683a      	ldr	r2, [r7, #0]
 800663a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	683a      	ldr	r2, [r7, #0]
 8006640:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	1c5a      	adds	r2, r3, #1
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	601a      	str	r2, [r3, #0]
}
 8006652:	bf00      	nop
 8006654:	3714      	adds	r7, #20
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800665e:	b480      	push	{r7}
 8006660:	b085      	sub	sp, #20
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
 8006666:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006674:	d103      	bne.n	800667e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	60fb      	str	r3, [r7, #12]
 800667c:	e00c      	b.n	8006698 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	3308      	adds	r3, #8
 8006682:	60fb      	str	r3, [r7, #12]
 8006684:	e002      	b.n	800668c <vListInsert+0x2e>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	60fb      	str	r3, [r7, #12]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	429a      	cmp	r2, r3
 8006696:	d2f6      	bcs.n	8006686 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	685a      	ldr	r2, [r3, #4]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	683a      	ldr	r2, [r7, #0]
 80066a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	683a      	ldr	r2, [r7, #0]
 80066b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	1c5a      	adds	r2, r3, #1
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	601a      	str	r2, [r3, #0]
}
 80066c4:	bf00      	nop
 80066c6:	3714      	adds	r7, #20
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	6892      	ldr	r2, [r2, #8]
 80066e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	6852      	ldr	r2, [r2, #4]
 80066f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d103      	bne.n	8006704 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	689a      	ldr	r2, [r3, #8]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	1e5a      	subs	r2, r3, #1
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d10a      	bne.n	800674e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673c:	f383 8811 	msr	BASEPRI, r3
 8006740:	f3bf 8f6f 	isb	sy
 8006744:	f3bf 8f4f 	dsb	sy
 8006748:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800674a:	bf00      	nop
 800674c:	e7fe      	b.n	800674c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800674e:	f002 f851 	bl	80087f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800675a:	68f9      	ldr	r1, [r7, #12]
 800675c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800675e:	fb01 f303 	mul.w	r3, r1, r3
 8006762:	441a      	add	r2, r3
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800677e:	3b01      	subs	r3, #1
 8006780:	68f9      	ldr	r1, [r7, #12]
 8006782:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006784:	fb01 f303 	mul.w	r3, r1, r3
 8006788:	441a      	add	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	22ff      	movs	r2, #255	; 0xff
 8006792:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	22ff      	movs	r2, #255	; 0xff
 800679a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d114      	bne.n	80067ce <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d01a      	beq.n	80067e2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	3310      	adds	r3, #16
 80067b0:	4618      	mov	r0, r3
 80067b2:	f001 f903 	bl	80079bc <xTaskRemoveFromEventList>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d012      	beq.n	80067e2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80067bc:	4b0c      	ldr	r3, [pc, #48]	; (80067f0 <xQueueGenericReset+0xcc>)
 80067be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067c2:	601a      	str	r2, [r3, #0]
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	e009      	b.n	80067e2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	3310      	adds	r3, #16
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7ff fef2 	bl	80065bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	3324      	adds	r3, #36	; 0x24
 80067dc:	4618      	mov	r0, r3
 80067de:	f7ff feed 	bl	80065bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80067e2:	f002 f837 	bl	8008854 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80067e6:	2301      	movs	r3, #1
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	e000ed04 	.word	0xe000ed04

080067f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b08e      	sub	sp, #56	; 0x38
 80067f8:	af02      	add	r7, sp, #8
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
 8006800:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d10a      	bne.n	800681e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680c:	f383 8811 	msr	BASEPRI, r3
 8006810:	f3bf 8f6f 	isb	sy
 8006814:	f3bf 8f4f 	dsb	sy
 8006818:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800681a:	bf00      	nop
 800681c:	e7fe      	b.n	800681c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10a      	bne.n	800683a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006828:	f383 8811 	msr	BASEPRI, r3
 800682c:	f3bf 8f6f 	isb	sy
 8006830:	f3bf 8f4f 	dsb	sy
 8006834:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006836:	bf00      	nop
 8006838:	e7fe      	b.n	8006838 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d002      	beq.n	8006846 <xQueueGenericCreateStatic+0x52>
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d001      	beq.n	800684a <xQueueGenericCreateStatic+0x56>
 8006846:	2301      	movs	r3, #1
 8006848:	e000      	b.n	800684c <xQueueGenericCreateStatic+0x58>
 800684a:	2300      	movs	r3, #0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d10a      	bne.n	8006866 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	623b      	str	r3, [r7, #32]
}
 8006862:	bf00      	nop
 8006864:	e7fe      	b.n	8006864 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d102      	bne.n	8006872 <xQueueGenericCreateStatic+0x7e>
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d101      	bne.n	8006876 <xQueueGenericCreateStatic+0x82>
 8006872:	2301      	movs	r3, #1
 8006874:	e000      	b.n	8006878 <xQueueGenericCreateStatic+0x84>
 8006876:	2300      	movs	r3, #0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10a      	bne.n	8006892 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800687c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006880:	f383 8811 	msr	BASEPRI, r3
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	61fb      	str	r3, [r7, #28]
}
 800688e:	bf00      	nop
 8006890:	e7fe      	b.n	8006890 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006892:	2350      	movs	r3, #80	; 0x50
 8006894:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	2b50      	cmp	r3, #80	; 0x50
 800689a:	d00a      	beq.n	80068b2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800689c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a0:	f383 8811 	msr	BASEPRI, r3
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	61bb      	str	r3, [r7, #24]
}
 80068ae:	bf00      	nop
 80068b0:	e7fe      	b.n	80068b0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80068b2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80068b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00d      	beq.n	80068da <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80068be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80068c6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80068ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068cc:	9300      	str	r3, [sp, #0]
 80068ce:	4613      	mov	r3, r2
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	68b9      	ldr	r1, [r7, #8]
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f000 f805 	bl	80068e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80068da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80068dc:	4618      	mov	r0, r3
 80068de:	3730      	adds	r7, #48	; 0x30
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
 80068f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d103      	bne.n	8006900 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	69ba      	ldr	r2, [r7, #24]
 80068fc:	601a      	str	r2, [r3, #0]
 80068fe:	e002      	b.n	8006906 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006912:	2101      	movs	r1, #1
 8006914:	69b8      	ldr	r0, [r7, #24]
 8006916:	f7ff ff05 	bl	8006724 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	78fa      	ldrb	r2, [r7, #3]
 800691e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006922:	bf00      	nop
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
	...

0800692c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b08e      	sub	sp, #56	; 0x38
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
 8006938:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800693a:	2300      	movs	r3, #0
 800693c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006944:	2b00      	cmp	r3, #0
 8006946:	d10a      	bne.n	800695e <xQueueGenericSend+0x32>
	__asm volatile
 8006948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694c:	f383 8811 	msr	BASEPRI, r3
 8006950:	f3bf 8f6f 	isb	sy
 8006954:	f3bf 8f4f 	dsb	sy
 8006958:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800695a:	bf00      	nop
 800695c:	e7fe      	b.n	800695c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d103      	bne.n	800696c <xQueueGenericSend+0x40>
 8006964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006968:	2b00      	cmp	r3, #0
 800696a:	d101      	bne.n	8006970 <xQueueGenericSend+0x44>
 800696c:	2301      	movs	r3, #1
 800696e:	e000      	b.n	8006972 <xQueueGenericSend+0x46>
 8006970:	2300      	movs	r3, #0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10a      	bne.n	800698c <xQueueGenericSend+0x60>
	__asm volatile
 8006976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697a:	f383 8811 	msr	BASEPRI, r3
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006988:	bf00      	nop
 800698a:	e7fe      	b.n	800698a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	2b02      	cmp	r3, #2
 8006990:	d103      	bne.n	800699a <xQueueGenericSend+0x6e>
 8006992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006996:	2b01      	cmp	r3, #1
 8006998:	d101      	bne.n	800699e <xQueueGenericSend+0x72>
 800699a:	2301      	movs	r3, #1
 800699c:	e000      	b.n	80069a0 <xQueueGenericSend+0x74>
 800699e:	2300      	movs	r3, #0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d10a      	bne.n	80069ba <xQueueGenericSend+0x8e>
	__asm volatile
 80069a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a8:	f383 8811 	msr	BASEPRI, r3
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	623b      	str	r3, [r7, #32]
}
 80069b6:	bf00      	nop
 80069b8:	e7fe      	b.n	80069b8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069ba:	f001 f9bd 	bl	8007d38 <xTaskGetSchedulerState>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d102      	bne.n	80069ca <xQueueGenericSend+0x9e>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d101      	bne.n	80069ce <xQueueGenericSend+0xa2>
 80069ca:	2301      	movs	r3, #1
 80069cc:	e000      	b.n	80069d0 <xQueueGenericSend+0xa4>
 80069ce:	2300      	movs	r3, #0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10a      	bne.n	80069ea <xQueueGenericSend+0xbe>
	__asm volatile
 80069d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d8:	f383 8811 	msr	BASEPRI, r3
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	61fb      	str	r3, [r7, #28]
}
 80069e6:	bf00      	nop
 80069e8:	e7fe      	b.n	80069e8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069ea:	f001 ff03 	bl	80087f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80069ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d302      	bcc.n	8006a00 <xQueueGenericSend+0xd4>
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d129      	bne.n	8006a54 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a00:	683a      	ldr	r2, [r7, #0]
 8006a02:	68b9      	ldr	r1, [r7, #8]
 8006a04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a06:	f000 fa0b 	bl	8006e20 <prvCopyDataToQueue>
 8006a0a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d010      	beq.n	8006a36 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a16:	3324      	adds	r3, #36	; 0x24
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f000 ffcf 	bl	80079bc <xTaskRemoveFromEventList>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d013      	beq.n	8006a4c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006a24:	4b3f      	ldr	r3, [pc, #252]	; (8006b24 <xQueueGenericSend+0x1f8>)
 8006a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a2a:	601a      	str	r2, [r3, #0]
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	f3bf 8f6f 	isb	sy
 8006a34:	e00a      	b.n	8006a4c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d007      	beq.n	8006a4c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006a3c:	4b39      	ldr	r3, [pc, #228]	; (8006b24 <xQueueGenericSend+0x1f8>)
 8006a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a42:	601a      	str	r2, [r3, #0]
 8006a44:	f3bf 8f4f 	dsb	sy
 8006a48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006a4c:	f001 ff02 	bl	8008854 <vPortExitCritical>
				return pdPASS;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e063      	b.n	8006b1c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d103      	bne.n	8006a62 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a5a:	f001 fefb 	bl	8008854 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	e05c      	b.n	8006b1c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d106      	bne.n	8006a76 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a68:	f107 0314 	add.w	r3, r7, #20
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f001 f809 	bl	8007a84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a72:	2301      	movs	r3, #1
 8006a74:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a76:	f001 feed 	bl	8008854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a7a:	f000 fd7b 	bl	8007574 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a7e:	f001 feb9 	bl	80087f4 <vPortEnterCritical>
 8006a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a88:	b25b      	sxtb	r3, r3
 8006a8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a8e:	d103      	bne.n	8006a98 <xQueueGenericSend+0x16c>
 8006a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a9e:	b25b      	sxtb	r3, r3
 8006aa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006aa4:	d103      	bne.n	8006aae <xQueueGenericSend+0x182>
 8006aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006aae:	f001 fed1 	bl	8008854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ab2:	1d3a      	adds	r2, r7, #4
 8006ab4:	f107 0314 	add.w	r3, r7, #20
 8006ab8:	4611      	mov	r1, r2
 8006aba:	4618      	mov	r0, r3
 8006abc:	f000 fff8 	bl	8007ab0 <xTaskCheckForTimeOut>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d124      	bne.n	8006b10 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006ac6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ac8:	f000 faa2 	bl	8007010 <prvIsQueueFull>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d018      	beq.n	8006b04 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad4:	3310      	adds	r3, #16
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	4611      	mov	r1, r2
 8006ada:	4618      	mov	r0, r3
 8006adc:	f000 ff1e 	bl	800791c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006ae0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ae2:	f000 fa2d 	bl	8006f40 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006ae6:	f000 fd53 	bl	8007590 <xTaskResumeAll>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f47f af7c 	bne.w	80069ea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006af2:	4b0c      	ldr	r3, [pc, #48]	; (8006b24 <xQueueGenericSend+0x1f8>)
 8006af4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006af8:	601a      	str	r2, [r3, #0]
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	e772      	b.n	80069ea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006b04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b06:	f000 fa1b 	bl	8006f40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b0a:	f000 fd41 	bl	8007590 <xTaskResumeAll>
 8006b0e:	e76c      	b.n	80069ea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006b10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b12:	f000 fa15 	bl	8006f40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b16:	f000 fd3b 	bl	8007590 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006b1a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3738      	adds	r7, #56	; 0x38
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	e000ed04 	.word	0xe000ed04

08006b28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b090      	sub	sp, #64	; 0x40
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
 8006b34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d10a      	bne.n	8006b56 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b44:	f383 8811 	msr	BASEPRI, r3
 8006b48:	f3bf 8f6f 	isb	sy
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b52:	bf00      	nop
 8006b54:	e7fe      	b.n	8006b54 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d103      	bne.n	8006b64 <xQueueGenericSendFromISR+0x3c>
 8006b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d101      	bne.n	8006b68 <xQueueGenericSendFromISR+0x40>
 8006b64:	2301      	movs	r3, #1
 8006b66:	e000      	b.n	8006b6a <xQueueGenericSendFromISR+0x42>
 8006b68:	2300      	movs	r3, #0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10a      	bne.n	8006b84 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b80:	bf00      	nop
 8006b82:	e7fe      	b.n	8006b82 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d103      	bne.n	8006b92 <xQueueGenericSendFromISR+0x6a>
 8006b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d101      	bne.n	8006b96 <xQueueGenericSendFromISR+0x6e>
 8006b92:	2301      	movs	r3, #1
 8006b94:	e000      	b.n	8006b98 <xQueueGenericSendFromISR+0x70>
 8006b96:	2300      	movs	r3, #0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10a      	bne.n	8006bb2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba0:	f383 8811 	msr	BASEPRI, r3
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	623b      	str	r3, [r7, #32]
}
 8006bae:	bf00      	nop
 8006bb0:	e7fe      	b.n	8006bb0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006bb2:	f001 ff01 	bl	80089b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006bb6:	f3ef 8211 	mrs	r2, BASEPRI
 8006bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bbe:	f383 8811 	msr	BASEPRI, r3
 8006bc2:	f3bf 8f6f 	isb	sy
 8006bc6:	f3bf 8f4f 	dsb	sy
 8006bca:	61fa      	str	r2, [r7, #28]
 8006bcc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006bce:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006bd0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d302      	bcc.n	8006be4 <xQueueGenericSendFromISR+0xbc>
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d12f      	bne.n	8006c44 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006bf4:	683a      	ldr	r2, [r7, #0]
 8006bf6:	68b9      	ldr	r1, [r7, #8]
 8006bf8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006bfa:	f000 f911 	bl	8006e20 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006bfe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006c02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c06:	d112      	bne.n	8006c2e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d016      	beq.n	8006c3e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c12:	3324      	adds	r3, #36	; 0x24
 8006c14:	4618      	mov	r0, r3
 8006c16:	f000 fed1 	bl	80079bc <xTaskRemoveFromEventList>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00e      	beq.n	8006c3e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00b      	beq.n	8006c3e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	601a      	str	r2, [r3, #0]
 8006c2c:	e007      	b.n	8006c3e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006c2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006c32:	3301      	adds	r3, #1
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	b25a      	sxtb	r2, r3
 8006c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006c42:	e001      	b.n	8006c48 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006c44:	2300      	movs	r3, #0
 8006c46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c4a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006c52:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3740      	adds	r7, #64	; 0x40
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
	...

08006c60 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b08c      	sub	sp, #48	; 0x30
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d10a      	bne.n	8006c90 <xQueueReceive+0x30>
	__asm volatile
 8006c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7e:	f383 8811 	msr	BASEPRI, r3
 8006c82:	f3bf 8f6f 	isb	sy
 8006c86:	f3bf 8f4f 	dsb	sy
 8006c8a:	623b      	str	r3, [r7, #32]
}
 8006c8c:	bf00      	nop
 8006c8e:	e7fe      	b.n	8006c8e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d103      	bne.n	8006c9e <xQueueReceive+0x3e>
 8006c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d101      	bne.n	8006ca2 <xQueueReceive+0x42>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e000      	b.n	8006ca4 <xQueueReceive+0x44>
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10a      	bne.n	8006cbe <xQueueReceive+0x5e>
	__asm volatile
 8006ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cac:	f383 8811 	msr	BASEPRI, r3
 8006cb0:	f3bf 8f6f 	isb	sy
 8006cb4:	f3bf 8f4f 	dsb	sy
 8006cb8:	61fb      	str	r3, [r7, #28]
}
 8006cba:	bf00      	nop
 8006cbc:	e7fe      	b.n	8006cbc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006cbe:	f001 f83b 	bl	8007d38 <xTaskGetSchedulerState>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d102      	bne.n	8006cce <xQueueReceive+0x6e>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d101      	bne.n	8006cd2 <xQueueReceive+0x72>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e000      	b.n	8006cd4 <xQueueReceive+0x74>
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10a      	bne.n	8006cee <xQueueReceive+0x8e>
	__asm volatile
 8006cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cdc:	f383 8811 	msr	BASEPRI, r3
 8006ce0:	f3bf 8f6f 	isb	sy
 8006ce4:	f3bf 8f4f 	dsb	sy
 8006ce8:	61bb      	str	r3, [r7, #24]
}
 8006cea:	bf00      	nop
 8006cec:	e7fe      	b.n	8006cec <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006cee:	f001 fd81 	bl	80087f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d01f      	beq.n	8006d3e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006cfe:	68b9      	ldr	r1, [r7, #8]
 8006d00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d02:	f000 f8f7 	bl	8006ef4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d08:	1e5a      	subs	r2, r3, #1
 8006d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00f      	beq.n	8006d36 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d18:	3310      	adds	r3, #16
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f000 fe4e 	bl	80079bc <xTaskRemoveFromEventList>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d007      	beq.n	8006d36 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006d26:	4b3d      	ldr	r3, [pc, #244]	; (8006e1c <xQueueReceive+0x1bc>)
 8006d28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d2c:	601a      	str	r2, [r3, #0]
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006d36:	f001 fd8d 	bl	8008854 <vPortExitCritical>
				return pdPASS;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e069      	b.n	8006e12 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d103      	bne.n	8006d4c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d44:	f001 fd86 	bl	8008854 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	e062      	b.n	8006e12 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d106      	bne.n	8006d60 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d52:	f107 0310 	add.w	r3, r7, #16
 8006d56:	4618      	mov	r0, r3
 8006d58:	f000 fe94 	bl	8007a84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d60:	f001 fd78 	bl	8008854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d64:	f000 fc06 	bl	8007574 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d68:	f001 fd44 	bl	80087f4 <vPortEnterCritical>
 8006d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d72:	b25b      	sxtb	r3, r3
 8006d74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d78:	d103      	bne.n	8006d82 <xQueueReceive+0x122>
 8006d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d88:	b25b      	sxtb	r3, r3
 8006d8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d8e:	d103      	bne.n	8006d98 <xQueueReceive+0x138>
 8006d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d98:	f001 fd5c 	bl	8008854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d9c:	1d3a      	adds	r2, r7, #4
 8006d9e:	f107 0310 	add.w	r3, r7, #16
 8006da2:	4611      	mov	r1, r2
 8006da4:	4618      	mov	r0, r3
 8006da6:	f000 fe83 	bl	8007ab0 <xTaskCheckForTimeOut>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d123      	bne.n	8006df8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006db0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006db2:	f000 f917 	bl	8006fe4 <prvIsQueueEmpty>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d017      	beq.n	8006dec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dbe:	3324      	adds	r3, #36	; 0x24
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	4611      	mov	r1, r2
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f000 fda9 	bl	800791c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006dca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dcc:	f000 f8b8 	bl	8006f40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006dd0:	f000 fbde 	bl	8007590 <xTaskResumeAll>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d189      	bne.n	8006cee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006dda:	4b10      	ldr	r3, [pc, #64]	; (8006e1c <xQueueReceive+0x1bc>)
 8006ddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006de0:	601a      	str	r2, [r3, #0]
 8006de2:	f3bf 8f4f 	dsb	sy
 8006de6:	f3bf 8f6f 	isb	sy
 8006dea:	e780      	b.n	8006cee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006dec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dee:	f000 f8a7 	bl	8006f40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006df2:	f000 fbcd 	bl	8007590 <xTaskResumeAll>
 8006df6:	e77a      	b.n	8006cee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006df8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dfa:	f000 f8a1 	bl	8006f40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006dfe:	f000 fbc7 	bl	8007590 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e04:	f000 f8ee 	bl	8006fe4 <prvIsQueueEmpty>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f43f af6f 	beq.w	8006cee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006e10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3730      	adds	r7, #48	; 0x30
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	e000ed04 	.word	0xe000ed04

08006e20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b086      	sub	sp, #24
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10d      	bne.n	8006e5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d14d      	bne.n	8006ee2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f000 ff92 	bl	8007d74 <xTaskPriorityDisinherit>
 8006e50:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	609a      	str	r2, [r3, #8]
 8006e58:	e043      	b.n	8006ee2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d119      	bne.n	8006e94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6858      	ldr	r0, [r3, #4]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e68:	461a      	mov	r2, r3
 8006e6a:	68b9      	ldr	r1, [r7, #8]
 8006e6c:	f002 fa51 	bl	8009312 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	685a      	ldr	r2, [r3, #4]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e78:	441a      	add	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	685a      	ldr	r2, [r3, #4]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d32b      	bcc.n	8006ee2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	605a      	str	r2, [r3, #4]
 8006e92:	e026      	b.n	8006ee2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	68d8      	ldr	r0, [r3, #12]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	68b9      	ldr	r1, [r7, #8]
 8006ea0:	f002 fa37 	bl	8009312 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	68da      	ldr	r2, [r3, #12]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eac:	425b      	negs	r3, r3
 8006eae:	441a      	add	r2, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	68da      	ldr	r2, [r3, #12]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d207      	bcs.n	8006ed0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	689a      	ldr	r2, [r3, #8]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec8:	425b      	negs	r3, r3
 8006eca:	441a      	add	r2, r3
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d105      	bne.n	8006ee2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d002      	beq.n	8006ee2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	1c5a      	adds	r2, r3, #1
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006eea:	697b      	ldr	r3, [r7, #20]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3718      	adds	r7, #24
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d018      	beq.n	8006f38 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	68da      	ldr	r2, [r3, #12]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0e:	441a      	add	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	68da      	ldr	r2, [r3, #12]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d303      	bcc.n	8006f28 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	68d9      	ldr	r1, [r3, #12]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f30:	461a      	mov	r2, r3
 8006f32:	6838      	ldr	r0, [r7, #0]
 8006f34:	f002 f9ed 	bl	8009312 <memcpy>
	}
}
 8006f38:	bf00      	nop
 8006f3a:	3708      	adds	r7, #8
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006f48:	f001 fc54 	bl	80087f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f52:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f54:	e011      	b.n	8006f7a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d012      	beq.n	8006f84 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	3324      	adds	r3, #36	; 0x24
 8006f62:	4618      	mov	r0, r3
 8006f64:	f000 fd2a 	bl	80079bc <xTaskRemoveFromEventList>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d001      	beq.n	8006f72 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006f6e:	f000 fe01 	bl	8007b74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006f72:	7bfb      	ldrb	r3, [r7, #15]
 8006f74:	3b01      	subs	r3, #1
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	dce9      	bgt.n	8006f56 <prvUnlockQueue+0x16>
 8006f82:	e000      	b.n	8006f86 <prvUnlockQueue+0x46>
					break;
 8006f84:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	22ff      	movs	r2, #255	; 0xff
 8006f8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006f8e:	f001 fc61 	bl	8008854 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006f92:	f001 fc2f 	bl	80087f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f9c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f9e:	e011      	b.n	8006fc4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d012      	beq.n	8006fce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	3310      	adds	r3, #16
 8006fac:	4618      	mov	r0, r3
 8006fae:	f000 fd05 	bl	80079bc <xTaskRemoveFromEventList>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d001      	beq.n	8006fbc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006fb8:	f000 fddc 	bl	8007b74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006fbc:	7bbb      	ldrb	r3, [r7, #14]
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006fc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	dce9      	bgt.n	8006fa0 <prvUnlockQueue+0x60>
 8006fcc:	e000      	b.n	8006fd0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006fce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	22ff      	movs	r2, #255	; 0xff
 8006fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006fd8:	f001 fc3c 	bl	8008854 <vPortExitCritical>
}
 8006fdc:	bf00      	nop
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006fec:	f001 fc02 	bl	80087f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d102      	bne.n	8006ffe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	60fb      	str	r3, [r7, #12]
 8006ffc:	e001      	b.n	8007002 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006ffe:	2300      	movs	r3, #0
 8007000:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007002:	f001 fc27 	bl	8008854 <vPortExitCritical>

	return xReturn;
 8007006:	68fb      	ldr	r3, [r7, #12]
}
 8007008:	4618      	mov	r0, r3
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007018:	f001 fbec 	bl	80087f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007024:	429a      	cmp	r2, r3
 8007026:	d102      	bne.n	800702e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007028:	2301      	movs	r3, #1
 800702a:	60fb      	str	r3, [r7, #12]
 800702c:	e001      	b.n	8007032 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800702e:	2300      	movs	r3, #0
 8007030:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007032:	f001 fc0f 	bl	8008854 <vPortExitCritical>

	return xReturn;
 8007036:	68fb      	ldr	r3, [r7, #12]
}
 8007038:	4618      	mov	r0, r3
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800704a:	2300      	movs	r3, #0
 800704c:	60fb      	str	r3, [r7, #12]
 800704e:	e014      	b.n	800707a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007050:	4a0f      	ldr	r2, [pc, #60]	; (8007090 <vQueueAddToRegistry+0x50>)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10b      	bne.n	8007074 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800705c:	490c      	ldr	r1, [pc, #48]	; (8007090 <vQueueAddToRegistry+0x50>)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	683a      	ldr	r2, [r7, #0]
 8007062:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007066:	4a0a      	ldr	r2, [pc, #40]	; (8007090 <vQueueAddToRegistry+0x50>)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	00db      	lsls	r3, r3, #3
 800706c:	4413      	add	r3, r2
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007072:	e006      	b.n	8007082 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	3301      	adds	r3, #1
 8007078:	60fb      	str	r3, [r7, #12]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2b07      	cmp	r3, #7
 800707e:	d9e7      	bls.n	8007050 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007080:	bf00      	nop
 8007082:	bf00      	nop
 8007084:	3714      	adds	r7, #20
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	2000092c 	.word	0x2000092c

08007094 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007094:	b580      	push	{r7, lr}
 8007096:	b086      	sub	sp, #24
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80070a4:	f001 fba6 	bl	80087f4 <vPortEnterCritical>
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070ae:	b25b      	sxtb	r3, r3
 80070b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070b4:	d103      	bne.n	80070be <vQueueWaitForMessageRestricted+0x2a>
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070c4:	b25b      	sxtb	r3, r3
 80070c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070ca:	d103      	bne.n	80070d4 <vQueueWaitForMessageRestricted+0x40>
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070d4:	f001 fbbe 	bl	8008854 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d106      	bne.n	80070ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	3324      	adds	r3, #36	; 0x24
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	68b9      	ldr	r1, [r7, #8]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f000 fc3b 	bl	8007964 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80070ee:	6978      	ldr	r0, [r7, #20]
 80070f0:	f7ff ff26 	bl	8006f40 <prvUnlockQueue>
	}
 80070f4:	bf00      	nop
 80070f6:	3718      	adds	r7, #24
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b08e      	sub	sp, #56	; 0x38
 8007100:	af04      	add	r7, sp, #16
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
 8007108:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800710a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10a      	bne.n	8007126 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007114:	f383 8811 	msr	BASEPRI, r3
 8007118:	f3bf 8f6f 	isb	sy
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	623b      	str	r3, [r7, #32]
}
 8007122:	bf00      	nop
 8007124:	e7fe      	b.n	8007124 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007128:	2b00      	cmp	r3, #0
 800712a:	d10a      	bne.n	8007142 <xTaskCreateStatic+0x46>
	__asm volatile
 800712c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007130:	f383 8811 	msr	BASEPRI, r3
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	61fb      	str	r3, [r7, #28]
}
 800713e:	bf00      	nop
 8007140:	e7fe      	b.n	8007140 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007142:	235c      	movs	r3, #92	; 0x5c
 8007144:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	2b5c      	cmp	r3, #92	; 0x5c
 800714a:	d00a      	beq.n	8007162 <xTaskCreateStatic+0x66>
	__asm volatile
 800714c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007150:	f383 8811 	msr	BASEPRI, r3
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	61bb      	str	r3, [r7, #24]
}
 800715e:	bf00      	nop
 8007160:	e7fe      	b.n	8007160 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007162:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007166:	2b00      	cmp	r3, #0
 8007168:	d01e      	beq.n	80071a8 <xTaskCreateStatic+0xac>
 800716a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800716c:	2b00      	cmp	r3, #0
 800716e:	d01b      	beq.n	80071a8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007172:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007176:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007178:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800717a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717c:	2202      	movs	r2, #2
 800717e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007182:	2300      	movs	r3, #0
 8007184:	9303      	str	r3, [sp, #12]
 8007186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007188:	9302      	str	r3, [sp, #8]
 800718a:	f107 0314 	add.w	r3, r7, #20
 800718e:	9301      	str	r3, [sp, #4]
 8007190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007192:	9300      	str	r3, [sp, #0]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	68b9      	ldr	r1, [r7, #8]
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f000 f850 	bl	8007240 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071a2:	f000 f8dd 	bl	8007360 <prvAddNewTaskToReadyList>
 80071a6:	e001      	b.n	80071ac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80071a8:	2300      	movs	r3, #0
 80071aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80071ac:	697b      	ldr	r3, [r7, #20]
	}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3728      	adds	r7, #40	; 0x28
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b08c      	sub	sp, #48	; 0x30
 80071ba:	af04      	add	r7, sp, #16
 80071bc:	60f8      	str	r0, [r7, #12]
 80071be:	60b9      	str	r1, [r7, #8]
 80071c0:	603b      	str	r3, [r7, #0]
 80071c2:	4613      	mov	r3, r2
 80071c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80071c6:	88fb      	ldrh	r3, [r7, #6]
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	4618      	mov	r0, r3
 80071cc:	f001 fc34 	bl	8008a38 <pvPortMalloc>
 80071d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00e      	beq.n	80071f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80071d8:	205c      	movs	r0, #92	; 0x5c
 80071da:	f001 fc2d 	bl	8008a38 <pvPortMalloc>
 80071de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d003      	beq.n	80071ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	697a      	ldr	r2, [r7, #20]
 80071ea:	631a      	str	r2, [r3, #48]	; 0x30
 80071ec:	e005      	b.n	80071fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80071ee:	6978      	ldr	r0, [r7, #20]
 80071f0:	f001 fcee 	bl	8008bd0 <vPortFree>
 80071f4:	e001      	b.n	80071fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80071f6:	2300      	movs	r3, #0
 80071f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d017      	beq.n	8007230 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007208:	88fa      	ldrh	r2, [r7, #6]
 800720a:	2300      	movs	r3, #0
 800720c:	9303      	str	r3, [sp, #12]
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	9302      	str	r3, [sp, #8]
 8007212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007214:	9301      	str	r3, [sp, #4]
 8007216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007218:	9300      	str	r3, [sp, #0]
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	68b9      	ldr	r1, [r7, #8]
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f000 f80e 	bl	8007240 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007224:	69f8      	ldr	r0, [r7, #28]
 8007226:	f000 f89b 	bl	8007360 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800722a:	2301      	movs	r3, #1
 800722c:	61bb      	str	r3, [r7, #24]
 800722e:	e002      	b.n	8007236 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007230:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007234:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007236:	69bb      	ldr	r3, [r7, #24]
	}
 8007238:	4618      	mov	r0, r3
 800723a:	3720      	adds	r7, #32
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b088      	sub	sp, #32
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	607a      	str	r2, [r7, #4]
 800724c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800724e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007250:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	461a      	mov	r2, r3
 8007258:	21a5      	movs	r1, #165	; 0xa5
 800725a:	f001 ffdf 	bl	800921c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800725e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007268:	3b01      	subs	r3, #1
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	4413      	add	r3, r2
 800726e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	f023 0307 	bic.w	r3, r3, #7
 8007276:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	f003 0307 	and.w	r3, r3, #7
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00a      	beq.n	8007298 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007286:	f383 8811 	msr	BASEPRI, r3
 800728a:	f3bf 8f6f 	isb	sy
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	617b      	str	r3, [r7, #20]
}
 8007294:	bf00      	nop
 8007296:	e7fe      	b.n	8007296 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d01f      	beq.n	80072de <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800729e:	2300      	movs	r3, #0
 80072a0:	61fb      	str	r3, [r7, #28]
 80072a2:	e012      	b.n	80072ca <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	4413      	add	r3, r2
 80072aa:	7819      	ldrb	r1, [r3, #0]
 80072ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	4413      	add	r3, r2
 80072b2:	3334      	adds	r3, #52	; 0x34
 80072b4:	460a      	mov	r2, r1
 80072b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80072b8:	68ba      	ldr	r2, [r7, #8]
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	4413      	add	r3, r2
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d006      	beq.n	80072d2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	3301      	adds	r3, #1
 80072c8:	61fb      	str	r3, [r7, #28]
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	2b0f      	cmp	r3, #15
 80072ce:	d9e9      	bls.n	80072a4 <prvInitialiseNewTask+0x64>
 80072d0:	e000      	b.n	80072d4 <prvInitialiseNewTask+0x94>
			{
				break;
 80072d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80072d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80072dc:	e003      	b.n	80072e6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80072de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e0:	2200      	movs	r2, #0
 80072e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80072e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e8:	2b37      	cmp	r3, #55	; 0x37
 80072ea:	d901      	bls.n	80072f0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80072ec:	2337      	movs	r3, #55	; 0x37
 80072ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80072f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80072f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072fa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80072fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fe:	2200      	movs	r2, #0
 8007300:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007304:	3304      	adds	r3, #4
 8007306:	4618      	mov	r0, r3
 8007308:	f7ff f978 	bl	80065fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800730c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730e:	3318      	adds	r3, #24
 8007310:	4618      	mov	r0, r3
 8007312:	f7ff f973 	bl	80065fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800731a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800731c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007324:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800732a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800732c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732e:	2200      	movs	r2, #0
 8007330:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007334:	2200      	movs	r2, #0
 8007336:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800733a:	683a      	ldr	r2, [r7, #0]
 800733c:	68f9      	ldr	r1, [r7, #12]
 800733e:	69b8      	ldr	r0, [r7, #24]
 8007340:	f001 f928 	bl	8008594 <pxPortInitialiseStack>
 8007344:	4602      	mov	r2, r0
 8007346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007348:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800734a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734c:	2b00      	cmp	r3, #0
 800734e:	d002      	beq.n	8007356 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007354:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007356:	bf00      	nop
 8007358:	3720      	adds	r7, #32
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
	...

08007360 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007368:	f001 fa44 	bl	80087f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800736c:	4b2d      	ldr	r3, [pc, #180]	; (8007424 <prvAddNewTaskToReadyList+0xc4>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	3301      	adds	r3, #1
 8007372:	4a2c      	ldr	r2, [pc, #176]	; (8007424 <prvAddNewTaskToReadyList+0xc4>)
 8007374:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007376:	4b2c      	ldr	r3, [pc, #176]	; (8007428 <prvAddNewTaskToReadyList+0xc8>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d109      	bne.n	8007392 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800737e:	4a2a      	ldr	r2, [pc, #168]	; (8007428 <prvAddNewTaskToReadyList+0xc8>)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007384:	4b27      	ldr	r3, [pc, #156]	; (8007424 <prvAddNewTaskToReadyList+0xc4>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2b01      	cmp	r3, #1
 800738a:	d110      	bne.n	80073ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800738c:	f000 fc16 	bl	8007bbc <prvInitialiseTaskLists>
 8007390:	e00d      	b.n	80073ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007392:	4b26      	ldr	r3, [pc, #152]	; (800742c <prvAddNewTaskToReadyList+0xcc>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d109      	bne.n	80073ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800739a:	4b23      	ldr	r3, [pc, #140]	; (8007428 <prvAddNewTaskToReadyList+0xc8>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d802      	bhi.n	80073ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80073a8:	4a1f      	ldr	r2, [pc, #124]	; (8007428 <prvAddNewTaskToReadyList+0xc8>)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80073ae:	4b20      	ldr	r3, [pc, #128]	; (8007430 <prvAddNewTaskToReadyList+0xd0>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	3301      	adds	r3, #1
 80073b4:	4a1e      	ldr	r2, [pc, #120]	; (8007430 <prvAddNewTaskToReadyList+0xd0>)
 80073b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80073b8:	4b1d      	ldr	r3, [pc, #116]	; (8007430 <prvAddNewTaskToReadyList+0xd0>)
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073c4:	4b1b      	ldr	r3, [pc, #108]	; (8007434 <prvAddNewTaskToReadyList+0xd4>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d903      	bls.n	80073d4 <prvAddNewTaskToReadyList+0x74>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d0:	4a18      	ldr	r2, [pc, #96]	; (8007434 <prvAddNewTaskToReadyList+0xd4>)
 80073d2:	6013      	str	r3, [r2, #0]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073d8:	4613      	mov	r3, r2
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4413      	add	r3, r2
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	4a15      	ldr	r2, [pc, #84]	; (8007438 <prvAddNewTaskToReadyList+0xd8>)
 80073e2:	441a      	add	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	3304      	adds	r3, #4
 80073e8:	4619      	mov	r1, r3
 80073ea:	4610      	mov	r0, r2
 80073ec:	f7ff f913 	bl	8006616 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80073f0:	f001 fa30 	bl	8008854 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80073f4:	4b0d      	ldr	r3, [pc, #52]	; (800742c <prvAddNewTaskToReadyList+0xcc>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00e      	beq.n	800741a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80073fc:	4b0a      	ldr	r3, [pc, #40]	; (8007428 <prvAddNewTaskToReadyList+0xc8>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007406:	429a      	cmp	r2, r3
 8007408:	d207      	bcs.n	800741a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800740a:	4b0c      	ldr	r3, [pc, #48]	; (800743c <prvAddNewTaskToReadyList+0xdc>)
 800740c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007410:	601a      	str	r2, [r3, #0]
 8007412:	f3bf 8f4f 	dsb	sy
 8007416:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800741a:	bf00      	nop
 800741c:	3708      	adds	r7, #8
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	20000e40 	.word	0x20000e40
 8007428:	2000096c 	.word	0x2000096c
 800742c:	20000e4c 	.word	0x20000e4c
 8007430:	20000e5c 	.word	0x20000e5c
 8007434:	20000e48 	.word	0x20000e48
 8007438:	20000970 	.word	0x20000970
 800743c:	e000ed04 	.word	0xe000ed04

08007440 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007448:	2300      	movs	r3, #0
 800744a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d017      	beq.n	8007482 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007452:	4b13      	ldr	r3, [pc, #76]	; (80074a0 <vTaskDelay+0x60>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00a      	beq.n	8007470 <vTaskDelay+0x30>
	__asm volatile
 800745a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745e:	f383 8811 	msr	BASEPRI, r3
 8007462:	f3bf 8f6f 	isb	sy
 8007466:	f3bf 8f4f 	dsb	sy
 800746a:	60bb      	str	r3, [r7, #8]
}
 800746c:	bf00      	nop
 800746e:	e7fe      	b.n	800746e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007470:	f000 f880 	bl	8007574 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007474:	2100      	movs	r1, #0
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fcea 	bl	8007e50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800747c:	f000 f888 	bl	8007590 <xTaskResumeAll>
 8007480:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d107      	bne.n	8007498 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007488:	4b06      	ldr	r3, [pc, #24]	; (80074a4 <vTaskDelay+0x64>)
 800748a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800748e:	601a      	str	r2, [r3, #0]
 8007490:	f3bf 8f4f 	dsb	sy
 8007494:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007498:	bf00      	nop
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	20000e68 	.word	0x20000e68
 80074a4:	e000ed04 	.word	0xe000ed04

080074a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b08a      	sub	sp, #40	; 0x28
 80074ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80074ae:	2300      	movs	r3, #0
 80074b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80074b2:	2300      	movs	r3, #0
 80074b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80074b6:	463a      	mov	r2, r7
 80074b8:	1d39      	adds	r1, r7, #4
 80074ba:	f107 0308 	add.w	r3, r7, #8
 80074be:	4618      	mov	r0, r3
 80074c0:	f7ff f848 	bl	8006554 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80074c4:	6839      	ldr	r1, [r7, #0]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	9202      	str	r2, [sp, #8]
 80074cc:	9301      	str	r3, [sp, #4]
 80074ce:	2300      	movs	r3, #0
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	2300      	movs	r3, #0
 80074d4:	460a      	mov	r2, r1
 80074d6:	4921      	ldr	r1, [pc, #132]	; (800755c <vTaskStartScheduler+0xb4>)
 80074d8:	4821      	ldr	r0, [pc, #132]	; (8007560 <vTaskStartScheduler+0xb8>)
 80074da:	f7ff fe0f 	bl	80070fc <xTaskCreateStatic>
 80074de:	4603      	mov	r3, r0
 80074e0:	4a20      	ldr	r2, [pc, #128]	; (8007564 <vTaskStartScheduler+0xbc>)
 80074e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80074e4:	4b1f      	ldr	r3, [pc, #124]	; (8007564 <vTaskStartScheduler+0xbc>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d002      	beq.n	80074f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80074ec:	2301      	movs	r3, #1
 80074ee:	617b      	str	r3, [r7, #20]
 80074f0:	e001      	b.n	80074f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80074f2:	2300      	movs	r3, #0
 80074f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d102      	bne.n	8007502 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80074fc:	f000 fcfc 	bl	8007ef8 <xTimerCreateTimerTask>
 8007500:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d116      	bne.n	8007536 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750c:	f383 8811 	msr	BASEPRI, r3
 8007510:	f3bf 8f6f 	isb	sy
 8007514:	f3bf 8f4f 	dsb	sy
 8007518:	613b      	str	r3, [r7, #16]
}
 800751a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800751c:	4b12      	ldr	r3, [pc, #72]	; (8007568 <vTaskStartScheduler+0xc0>)
 800751e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007522:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007524:	4b11      	ldr	r3, [pc, #68]	; (800756c <vTaskStartScheduler+0xc4>)
 8007526:	2201      	movs	r2, #1
 8007528:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800752a:	4b11      	ldr	r3, [pc, #68]	; (8007570 <vTaskStartScheduler+0xc8>)
 800752c:	2200      	movs	r2, #0
 800752e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007530:	f001 f8be 	bl	80086b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007534:	e00e      	b.n	8007554 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800753c:	d10a      	bne.n	8007554 <vTaskStartScheduler+0xac>
	__asm volatile
 800753e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007542:	f383 8811 	msr	BASEPRI, r3
 8007546:	f3bf 8f6f 	isb	sy
 800754a:	f3bf 8f4f 	dsb	sy
 800754e:	60fb      	str	r3, [r7, #12]
}
 8007550:	bf00      	nop
 8007552:	e7fe      	b.n	8007552 <vTaskStartScheduler+0xaa>
}
 8007554:	bf00      	nop
 8007556:	3718      	adds	r7, #24
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	08009fc4 	.word	0x08009fc4
 8007560:	08007b8d 	.word	0x08007b8d
 8007564:	20000e64 	.word	0x20000e64
 8007568:	20000e60 	.word	0x20000e60
 800756c:	20000e4c 	.word	0x20000e4c
 8007570:	20000e44 	.word	0x20000e44

08007574 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007574:	b480      	push	{r7}
 8007576:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007578:	4b04      	ldr	r3, [pc, #16]	; (800758c <vTaskSuspendAll+0x18>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	3301      	adds	r3, #1
 800757e:	4a03      	ldr	r2, [pc, #12]	; (800758c <vTaskSuspendAll+0x18>)
 8007580:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007582:	bf00      	nop
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr
 800758c:	20000e68 	.word	0x20000e68

08007590 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007596:	2300      	movs	r3, #0
 8007598:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800759a:	2300      	movs	r3, #0
 800759c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800759e:	4b42      	ldr	r3, [pc, #264]	; (80076a8 <xTaskResumeAll+0x118>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10a      	bne.n	80075bc <xTaskResumeAll+0x2c>
	__asm volatile
 80075a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075aa:	f383 8811 	msr	BASEPRI, r3
 80075ae:	f3bf 8f6f 	isb	sy
 80075b2:	f3bf 8f4f 	dsb	sy
 80075b6:	603b      	str	r3, [r7, #0]
}
 80075b8:	bf00      	nop
 80075ba:	e7fe      	b.n	80075ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80075bc:	f001 f91a 	bl	80087f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80075c0:	4b39      	ldr	r3, [pc, #228]	; (80076a8 <xTaskResumeAll+0x118>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	3b01      	subs	r3, #1
 80075c6:	4a38      	ldr	r2, [pc, #224]	; (80076a8 <xTaskResumeAll+0x118>)
 80075c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075ca:	4b37      	ldr	r3, [pc, #220]	; (80076a8 <xTaskResumeAll+0x118>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d162      	bne.n	8007698 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80075d2:	4b36      	ldr	r3, [pc, #216]	; (80076ac <xTaskResumeAll+0x11c>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d05e      	beq.n	8007698 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075da:	e02f      	b.n	800763c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075dc:	4b34      	ldr	r3, [pc, #208]	; (80076b0 <xTaskResumeAll+0x120>)
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	3318      	adds	r3, #24
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7ff f871 	bl	80066d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	3304      	adds	r3, #4
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7ff f86c 	bl	80066d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075fc:	4b2d      	ldr	r3, [pc, #180]	; (80076b4 <xTaskResumeAll+0x124>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	429a      	cmp	r2, r3
 8007602:	d903      	bls.n	800760c <xTaskResumeAll+0x7c>
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007608:	4a2a      	ldr	r2, [pc, #168]	; (80076b4 <xTaskResumeAll+0x124>)
 800760a:	6013      	str	r3, [r2, #0]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007610:	4613      	mov	r3, r2
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	4413      	add	r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	4a27      	ldr	r2, [pc, #156]	; (80076b8 <xTaskResumeAll+0x128>)
 800761a:	441a      	add	r2, r3
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	3304      	adds	r3, #4
 8007620:	4619      	mov	r1, r3
 8007622:	4610      	mov	r0, r2
 8007624:	f7fe fff7 	bl	8006616 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800762c:	4b23      	ldr	r3, [pc, #140]	; (80076bc <xTaskResumeAll+0x12c>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007632:	429a      	cmp	r2, r3
 8007634:	d302      	bcc.n	800763c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007636:	4b22      	ldr	r3, [pc, #136]	; (80076c0 <xTaskResumeAll+0x130>)
 8007638:	2201      	movs	r2, #1
 800763a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800763c:	4b1c      	ldr	r3, [pc, #112]	; (80076b0 <xTaskResumeAll+0x120>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1cb      	bne.n	80075dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d001      	beq.n	800764e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800764a:	f000 fb55 	bl	8007cf8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800764e:	4b1d      	ldr	r3, [pc, #116]	; (80076c4 <xTaskResumeAll+0x134>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d010      	beq.n	800767c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800765a:	f000 f847 	bl	80076ec <xTaskIncrementTick>
 800765e:	4603      	mov	r3, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d002      	beq.n	800766a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007664:	4b16      	ldr	r3, [pc, #88]	; (80076c0 <xTaskResumeAll+0x130>)
 8007666:	2201      	movs	r2, #1
 8007668:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	3b01      	subs	r3, #1
 800766e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1f1      	bne.n	800765a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007676:	4b13      	ldr	r3, [pc, #76]	; (80076c4 <xTaskResumeAll+0x134>)
 8007678:	2200      	movs	r2, #0
 800767a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800767c:	4b10      	ldr	r3, [pc, #64]	; (80076c0 <xTaskResumeAll+0x130>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d009      	beq.n	8007698 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007684:	2301      	movs	r3, #1
 8007686:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007688:	4b0f      	ldr	r3, [pc, #60]	; (80076c8 <xTaskResumeAll+0x138>)
 800768a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800768e:	601a      	str	r2, [r3, #0]
 8007690:	f3bf 8f4f 	dsb	sy
 8007694:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007698:	f001 f8dc 	bl	8008854 <vPortExitCritical>

	return xAlreadyYielded;
 800769c:	68bb      	ldr	r3, [r7, #8]
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	20000e68 	.word	0x20000e68
 80076ac:	20000e40 	.word	0x20000e40
 80076b0:	20000e00 	.word	0x20000e00
 80076b4:	20000e48 	.word	0x20000e48
 80076b8:	20000970 	.word	0x20000970
 80076bc:	2000096c 	.word	0x2000096c
 80076c0:	20000e54 	.word	0x20000e54
 80076c4:	20000e50 	.word	0x20000e50
 80076c8:	e000ed04 	.word	0xe000ed04

080076cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80076d2:	4b05      	ldr	r3, [pc, #20]	; (80076e8 <xTaskGetTickCount+0x1c>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80076d8:	687b      	ldr	r3, [r7, #4]
}
 80076da:	4618      	mov	r0, r3
 80076dc:	370c      	adds	r7, #12
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	20000e44 	.word	0x20000e44

080076ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b086      	sub	sp, #24
 80076f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80076f2:	2300      	movs	r3, #0
 80076f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076f6:	4b4f      	ldr	r3, [pc, #316]	; (8007834 <xTaskIncrementTick+0x148>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f040 808f 	bne.w	800781e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007700:	4b4d      	ldr	r3, [pc, #308]	; (8007838 <xTaskIncrementTick+0x14c>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	3301      	adds	r3, #1
 8007706:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007708:	4a4b      	ldr	r2, [pc, #300]	; (8007838 <xTaskIncrementTick+0x14c>)
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d120      	bne.n	8007756 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007714:	4b49      	ldr	r3, [pc, #292]	; (800783c <xTaskIncrementTick+0x150>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00a      	beq.n	8007734 <xTaskIncrementTick+0x48>
	__asm volatile
 800771e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007722:	f383 8811 	msr	BASEPRI, r3
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	603b      	str	r3, [r7, #0]
}
 8007730:	bf00      	nop
 8007732:	e7fe      	b.n	8007732 <xTaskIncrementTick+0x46>
 8007734:	4b41      	ldr	r3, [pc, #260]	; (800783c <xTaskIncrementTick+0x150>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	60fb      	str	r3, [r7, #12]
 800773a:	4b41      	ldr	r3, [pc, #260]	; (8007840 <xTaskIncrementTick+0x154>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a3f      	ldr	r2, [pc, #252]	; (800783c <xTaskIncrementTick+0x150>)
 8007740:	6013      	str	r3, [r2, #0]
 8007742:	4a3f      	ldr	r2, [pc, #252]	; (8007840 <xTaskIncrementTick+0x154>)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6013      	str	r3, [r2, #0]
 8007748:	4b3e      	ldr	r3, [pc, #248]	; (8007844 <xTaskIncrementTick+0x158>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	3301      	adds	r3, #1
 800774e:	4a3d      	ldr	r2, [pc, #244]	; (8007844 <xTaskIncrementTick+0x158>)
 8007750:	6013      	str	r3, [r2, #0]
 8007752:	f000 fad1 	bl	8007cf8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007756:	4b3c      	ldr	r3, [pc, #240]	; (8007848 <xTaskIncrementTick+0x15c>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	693a      	ldr	r2, [r7, #16]
 800775c:	429a      	cmp	r2, r3
 800775e:	d349      	bcc.n	80077f4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007760:	4b36      	ldr	r3, [pc, #216]	; (800783c <xTaskIncrementTick+0x150>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d104      	bne.n	8007774 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800776a:	4b37      	ldr	r3, [pc, #220]	; (8007848 <xTaskIncrementTick+0x15c>)
 800776c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007770:	601a      	str	r2, [r3, #0]
					break;
 8007772:	e03f      	b.n	80077f4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007774:	4b31      	ldr	r3, [pc, #196]	; (800783c <xTaskIncrementTick+0x150>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007784:	693a      	ldr	r2, [r7, #16]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	429a      	cmp	r2, r3
 800778a:	d203      	bcs.n	8007794 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800778c:	4a2e      	ldr	r2, [pc, #184]	; (8007848 <xTaskIncrementTick+0x15c>)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007792:	e02f      	b.n	80077f4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	3304      	adds	r3, #4
 8007798:	4618      	mov	r0, r3
 800779a:	f7fe ff99 	bl	80066d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d004      	beq.n	80077b0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	3318      	adds	r3, #24
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7fe ff90 	bl	80066d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b4:	4b25      	ldr	r3, [pc, #148]	; (800784c <xTaskIncrementTick+0x160>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d903      	bls.n	80077c4 <xTaskIncrementTick+0xd8>
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c0:	4a22      	ldr	r2, [pc, #136]	; (800784c <xTaskIncrementTick+0x160>)
 80077c2:	6013      	str	r3, [r2, #0]
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077c8:	4613      	mov	r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4413      	add	r3, r2
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	4a1f      	ldr	r2, [pc, #124]	; (8007850 <xTaskIncrementTick+0x164>)
 80077d2:	441a      	add	r2, r3
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	3304      	adds	r3, #4
 80077d8:	4619      	mov	r1, r3
 80077da:	4610      	mov	r0, r2
 80077dc:	f7fe ff1b 	bl	8006616 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077e4:	4b1b      	ldr	r3, [pc, #108]	; (8007854 <xTaskIncrementTick+0x168>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d3b8      	bcc.n	8007760 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80077ee:	2301      	movs	r3, #1
 80077f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077f2:	e7b5      	b.n	8007760 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80077f4:	4b17      	ldr	r3, [pc, #92]	; (8007854 <xTaskIncrementTick+0x168>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077fa:	4915      	ldr	r1, [pc, #84]	; (8007850 <xTaskIncrementTick+0x164>)
 80077fc:	4613      	mov	r3, r2
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	4413      	add	r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	440b      	add	r3, r1
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2b01      	cmp	r3, #1
 800780a:	d901      	bls.n	8007810 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800780c:	2301      	movs	r3, #1
 800780e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007810:	4b11      	ldr	r3, [pc, #68]	; (8007858 <xTaskIncrementTick+0x16c>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d007      	beq.n	8007828 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007818:	2301      	movs	r3, #1
 800781a:	617b      	str	r3, [r7, #20]
 800781c:	e004      	b.n	8007828 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800781e:	4b0f      	ldr	r3, [pc, #60]	; (800785c <xTaskIncrementTick+0x170>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	3301      	adds	r3, #1
 8007824:	4a0d      	ldr	r2, [pc, #52]	; (800785c <xTaskIncrementTick+0x170>)
 8007826:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007828:	697b      	ldr	r3, [r7, #20]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3718      	adds	r7, #24
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	20000e68 	.word	0x20000e68
 8007838:	20000e44 	.word	0x20000e44
 800783c:	20000df8 	.word	0x20000df8
 8007840:	20000dfc 	.word	0x20000dfc
 8007844:	20000e58 	.word	0x20000e58
 8007848:	20000e60 	.word	0x20000e60
 800784c:	20000e48 	.word	0x20000e48
 8007850:	20000970 	.word	0x20000970
 8007854:	2000096c 	.word	0x2000096c
 8007858:	20000e54 	.word	0x20000e54
 800785c:	20000e50 	.word	0x20000e50

08007860 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007860:	b480      	push	{r7}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007866:	4b28      	ldr	r3, [pc, #160]	; (8007908 <vTaskSwitchContext+0xa8>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d003      	beq.n	8007876 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800786e:	4b27      	ldr	r3, [pc, #156]	; (800790c <vTaskSwitchContext+0xac>)
 8007870:	2201      	movs	r2, #1
 8007872:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007874:	e041      	b.n	80078fa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007876:	4b25      	ldr	r3, [pc, #148]	; (800790c <vTaskSwitchContext+0xac>)
 8007878:	2200      	movs	r2, #0
 800787a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800787c:	4b24      	ldr	r3, [pc, #144]	; (8007910 <vTaskSwitchContext+0xb0>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	60fb      	str	r3, [r7, #12]
 8007882:	e010      	b.n	80078a6 <vTaskSwitchContext+0x46>
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10a      	bne.n	80078a0 <vTaskSwitchContext+0x40>
	__asm volatile
 800788a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788e:	f383 8811 	msr	BASEPRI, r3
 8007892:	f3bf 8f6f 	isb	sy
 8007896:	f3bf 8f4f 	dsb	sy
 800789a:	607b      	str	r3, [r7, #4]
}
 800789c:	bf00      	nop
 800789e:	e7fe      	b.n	800789e <vTaskSwitchContext+0x3e>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	3b01      	subs	r3, #1
 80078a4:	60fb      	str	r3, [r7, #12]
 80078a6:	491b      	ldr	r1, [pc, #108]	; (8007914 <vTaskSwitchContext+0xb4>)
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	4613      	mov	r3, r2
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	4413      	add	r3, r2
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	440b      	add	r3, r1
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d0e4      	beq.n	8007884 <vTaskSwitchContext+0x24>
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	4613      	mov	r3, r2
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	4413      	add	r3, r2
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	4a13      	ldr	r2, [pc, #76]	; (8007914 <vTaskSwitchContext+0xb4>)
 80078c6:	4413      	add	r3, r2
 80078c8:	60bb      	str	r3, [r7, #8]
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	685a      	ldr	r2, [r3, #4]
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	605a      	str	r2, [r3, #4]
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	685a      	ldr	r2, [r3, #4]
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	3308      	adds	r3, #8
 80078dc:	429a      	cmp	r2, r3
 80078de:	d104      	bne.n	80078ea <vTaskSwitchContext+0x8a>
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	685a      	ldr	r2, [r3, #4]
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	605a      	str	r2, [r3, #4]
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	4a09      	ldr	r2, [pc, #36]	; (8007918 <vTaskSwitchContext+0xb8>)
 80078f2:	6013      	str	r3, [r2, #0]
 80078f4:	4a06      	ldr	r2, [pc, #24]	; (8007910 <vTaskSwitchContext+0xb0>)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6013      	str	r3, [r2, #0]
}
 80078fa:	bf00      	nop
 80078fc:	3714      	adds	r7, #20
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	20000e68 	.word	0x20000e68
 800790c:	20000e54 	.word	0x20000e54
 8007910:	20000e48 	.word	0x20000e48
 8007914:	20000970 	.word	0x20000970
 8007918:	2000096c 	.word	0x2000096c

0800791c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10a      	bne.n	8007942 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800792c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007930:	f383 8811 	msr	BASEPRI, r3
 8007934:	f3bf 8f6f 	isb	sy
 8007938:	f3bf 8f4f 	dsb	sy
 800793c:	60fb      	str	r3, [r7, #12]
}
 800793e:	bf00      	nop
 8007940:	e7fe      	b.n	8007940 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007942:	4b07      	ldr	r3, [pc, #28]	; (8007960 <vTaskPlaceOnEventList+0x44>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	3318      	adds	r3, #24
 8007948:	4619      	mov	r1, r3
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f7fe fe87 	bl	800665e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007950:	2101      	movs	r1, #1
 8007952:	6838      	ldr	r0, [r7, #0]
 8007954:	f000 fa7c 	bl	8007e50 <prvAddCurrentTaskToDelayedList>
}
 8007958:	bf00      	nop
 800795a:	3710      	adds	r7, #16
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}
 8007960:	2000096c 	.word	0x2000096c

08007964 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007964:	b580      	push	{r7, lr}
 8007966:	b086      	sub	sp, #24
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10a      	bne.n	800798c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797a:	f383 8811 	msr	BASEPRI, r3
 800797e:	f3bf 8f6f 	isb	sy
 8007982:	f3bf 8f4f 	dsb	sy
 8007986:	617b      	str	r3, [r7, #20]
}
 8007988:	bf00      	nop
 800798a:	e7fe      	b.n	800798a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800798c:	4b0a      	ldr	r3, [pc, #40]	; (80079b8 <vTaskPlaceOnEventListRestricted+0x54>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	3318      	adds	r3, #24
 8007992:	4619      	mov	r1, r3
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f7fe fe3e 	bl	8006616 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d002      	beq.n	80079a6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80079a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079a4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80079a6:	6879      	ldr	r1, [r7, #4]
 80079a8:	68b8      	ldr	r0, [r7, #8]
 80079aa:	f000 fa51 	bl	8007e50 <prvAddCurrentTaskToDelayedList>
	}
 80079ae:	bf00      	nop
 80079b0:	3718      	adds	r7, #24
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	2000096c 	.word	0x2000096c

080079bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b086      	sub	sp, #24
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d10a      	bne.n	80079e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80079d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	60fb      	str	r3, [r7, #12]
}
 80079e4:	bf00      	nop
 80079e6:	e7fe      	b.n	80079e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	3318      	adds	r3, #24
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7fe fe6f 	bl	80066d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079f2:	4b1e      	ldr	r3, [pc, #120]	; (8007a6c <xTaskRemoveFromEventList+0xb0>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d11d      	bne.n	8007a36 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	3304      	adds	r3, #4
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7fe fe66 	bl	80066d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a08:	4b19      	ldr	r3, [pc, #100]	; (8007a70 <xTaskRemoveFromEventList+0xb4>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d903      	bls.n	8007a18 <xTaskRemoveFromEventList+0x5c>
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a14:	4a16      	ldr	r2, [pc, #88]	; (8007a70 <xTaskRemoveFromEventList+0xb4>)
 8007a16:	6013      	str	r3, [r2, #0]
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	4413      	add	r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4a13      	ldr	r2, [pc, #76]	; (8007a74 <xTaskRemoveFromEventList+0xb8>)
 8007a26:	441a      	add	r2, r3
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	3304      	adds	r3, #4
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	4610      	mov	r0, r2
 8007a30:	f7fe fdf1 	bl	8006616 <vListInsertEnd>
 8007a34:	e005      	b.n	8007a42 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	3318      	adds	r3, #24
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	480e      	ldr	r0, [pc, #56]	; (8007a78 <xTaskRemoveFromEventList+0xbc>)
 8007a3e:	f7fe fdea 	bl	8006616 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a46:	4b0d      	ldr	r3, [pc, #52]	; (8007a7c <xTaskRemoveFromEventList+0xc0>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d905      	bls.n	8007a5c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007a50:	2301      	movs	r3, #1
 8007a52:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007a54:	4b0a      	ldr	r3, [pc, #40]	; (8007a80 <xTaskRemoveFromEventList+0xc4>)
 8007a56:	2201      	movs	r2, #1
 8007a58:	601a      	str	r2, [r3, #0]
 8007a5a:	e001      	b.n	8007a60 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007a60:	697b      	ldr	r3, [r7, #20]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3718      	adds	r7, #24
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	20000e68 	.word	0x20000e68
 8007a70:	20000e48 	.word	0x20000e48
 8007a74:	20000970 	.word	0x20000970
 8007a78:	20000e00 	.word	0x20000e00
 8007a7c:	2000096c 	.word	0x2000096c
 8007a80:	20000e54 	.word	0x20000e54

08007a84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007a8c:	4b06      	ldr	r3, [pc, #24]	; (8007aa8 <vTaskInternalSetTimeOutState+0x24>)
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007a94:	4b05      	ldr	r3, [pc, #20]	; (8007aac <vTaskInternalSetTimeOutState+0x28>)
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	605a      	str	r2, [r3, #4]
}
 8007a9c:	bf00      	nop
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr
 8007aa8:	20000e58 	.word	0x20000e58
 8007aac:	20000e44 	.word	0x20000e44

08007ab0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b088      	sub	sp, #32
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d10a      	bne.n	8007ad6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac4:	f383 8811 	msr	BASEPRI, r3
 8007ac8:	f3bf 8f6f 	isb	sy
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	613b      	str	r3, [r7, #16]
}
 8007ad2:	bf00      	nop
 8007ad4:	e7fe      	b.n	8007ad4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10a      	bne.n	8007af2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae0:	f383 8811 	msr	BASEPRI, r3
 8007ae4:	f3bf 8f6f 	isb	sy
 8007ae8:	f3bf 8f4f 	dsb	sy
 8007aec:	60fb      	str	r3, [r7, #12]
}
 8007aee:	bf00      	nop
 8007af0:	e7fe      	b.n	8007af0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007af2:	f000 fe7f 	bl	80087f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007af6:	4b1d      	ldr	r3, [pc, #116]	; (8007b6c <xTaskCheckForTimeOut+0xbc>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	69ba      	ldr	r2, [r7, #24]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b0e:	d102      	bne.n	8007b16 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007b10:	2300      	movs	r3, #0
 8007b12:	61fb      	str	r3, [r7, #28]
 8007b14:	e023      	b.n	8007b5e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	4b15      	ldr	r3, [pc, #84]	; (8007b70 <xTaskCheckForTimeOut+0xc0>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d007      	beq.n	8007b32 <xTaskCheckForTimeOut+0x82>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	69ba      	ldr	r2, [r7, #24]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d302      	bcc.n	8007b32 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	61fb      	str	r3, [r7, #28]
 8007b30:	e015      	b.n	8007b5e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	697a      	ldr	r2, [r7, #20]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d20b      	bcs.n	8007b54 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	1ad2      	subs	r2, r2, r3
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f7ff ff9b 	bl	8007a84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	61fb      	str	r3, [r7, #28]
 8007b52:	e004      	b.n	8007b5e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	2200      	movs	r2, #0
 8007b58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007b5e:	f000 fe79 	bl	8008854 <vPortExitCritical>

	return xReturn;
 8007b62:	69fb      	ldr	r3, [r7, #28]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3720      	adds	r7, #32
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	20000e44 	.word	0x20000e44
 8007b70:	20000e58 	.word	0x20000e58

08007b74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007b74:	b480      	push	{r7}
 8007b76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007b78:	4b03      	ldr	r3, [pc, #12]	; (8007b88 <vTaskMissedYield+0x14>)
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	601a      	str	r2, [r3, #0]
}
 8007b7e:	bf00      	nop
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr
 8007b88:	20000e54 	.word	0x20000e54

08007b8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007b94:	f000 f852 	bl	8007c3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007b98:	4b06      	ldr	r3, [pc, #24]	; (8007bb4 <prvIdleTask+0x28>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d9f9      	bls.n	8007b94 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ba0:	4b05      	ldr	r3, [pc, #20]	; (8007bb8 <prvIdleTask+0x2c>)
 8007ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ba6:	601a      	str	r2, [r3, #0]
 8007ba8:	f3bf 8f4f 	dsb	sy
 8007bac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007bb0:	e7f0      	b.n	8007b94 <prvIdleTask+0x8>
 8007bb2:	bf00      	nop
 8007bb4:	20000970 	.word	0x20000970
 8007bb8:	e000ed04 	.word	0xe000ed04

08007bbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	607b      	str	r3, [r7, #4]
 8007bc6:	e00c      	b.n	8007be2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4413      	add	r3, r2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	4a12      	ldr	r2, [pc, #72]	; (8007c1c <prvInitialiseTaskLists+0x60>)
 8007bd4:	4413      	add	r3, r2
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7fe fcf0 	bl	80065bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	3301      	adds	r3, #1
 8007be0:	607b      	str	r3, [r7, #4]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2b37      	cmp	r3, #55	; 0x37
 8007be6:	d9ef      	bls.n	8007bc8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007be8:	480d      	ldr	r0, [pc, #52]	; (8007c20 <prvInitialiseTaskLists+0x64>)
 8007bea:	f7fe fce7 	bl	80065bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007bee:	480d      	ldr	r0, [pc, #52]	; (8007c24 <prvInitialiseTaskLists+0x68>)
 8007bf0:	f7fe fce4 	bl	80065bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007bf4:	480c      	ldr	r0, [pc, #48]	; (8007c28 <prvInitialiseTaskLists+0x6c>)
 8007bf6:	f7fe fce1 	bl	80065bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007bfa:	480c      	ldr	r0, [pc, #48]	; (8007c2c <prvInitialiseTaskLists+0x70>)
 8007bfc:	f7fe fcde 	bl	80065bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007c00:	480b      	ldr	r0, [pc, #44]	; (8007c30 <prvInitialiseTaskLists+0x74>)
 8007c02:	f7fe fcdb 	bl	80065bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c06:	4b0b      	ldr	r3, [pc, #44]	; (8007c34 <prvInitialiseTaskLists+0x78>)
 8007c08:	4a05      	ldr	r2, [pc, #20]	; (8007c20 <prvInitialiseTaskLists+0x64>)
 8007c0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c0c:	4b0a      	ldr	r3, [pc, #40]	; (8007c38 <prvInitialiseTaskLists+0x7c>)
 8007c0e:	4a05      	ldr	r2, [pc, #20]	; (8007c24 <prvInitialiseTaskLists+0x68>)
 8007c10:	601a      	str	r2, [r3, #0]
}
 8007c12:	bf00      	nop
 8007c14:	3708      	adds	r7, #8
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	20000970 	.word	0x20000970
 8007c20:	20000dd0 	.word	0x20000dd0
 8007c24:	20000de4 	.word	0x20000de4
 8007c28:	20000e00 	.word	0x20000e00
 8007c2c:	20000e14 	.word	0x20000e14
 8007c30:	20000e2c 	.word	0x20000e2c
 8007c34:	20000df8 	.word	0x20000df8
 8007c38:	20000dfc 	.word	0x20000dfc

08007c3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c42:	e019      	b.n	8007c78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007c44:	f000 fdd6 	bl	80087f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c48:	4b10      	ldr	r3, [pc, #64]	; (8007c8c <prvCheckTasksWaitingTermination+0x50>)
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	3304      	adds	r3, #4
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7fe fd3b 	bl	80066d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007c5a:	4b0d      	ldr	r3, [pc, #52]	; (8007c90 <prvCheckTasksWaitingTermination+0x54>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	4a0b      	ldr	r2, [pc, #44]	; (8007c90 <prvCheckTasksWaitingTermination+0x54>)
 8007c62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007c64:	4b0b      	ldr	r3, [pc, #44]	; (8007c94 <prvCheckTasksWaitingTermination+0x58>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	4a0a      	ldr	r2, [pc, #40]	; (8007c94 <prvCheckTasksWaitingTermination+0x58>)
 8007c6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007c6e:	f000 fdf1 	bl	8008854 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 f810 	bl	8007c98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c78:	4b06      	ldr	r3, [pc, #24]	; (8007c94 <prvCheckTasksWaitingTermination+0x58>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1e1      	bne.n	8007c44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007c80:	bf00      	nop
 8007c82:	bf00      	nop
 8007c84:	3708      	adds	r7, #8
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	20000e14 	.word	0x20000e14
 8007c90:	20000e40 	.word	0x20000e40
 8007c94:	20000e28 	.word	0x20000e28

08007c98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d108      	bne.n	8007cbc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f000 ff8e 	bl	8008bd0 <vPortFree>
				vPortFree( pxTCB );
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 ff8b 	bl	8008bd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007cba:	e018      	b.n	8007cee <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d103      	bne.n	8007cce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 ff82 	bl	8008bd0 <vPortFree>
	}
 8007ccc:	e00f      	b.n	8007cee <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	d00a      	beq.n	8007cee <prvDeleteTCB+0x56>
	__asm volatile
 8007cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cdc:	f383 8811 	msr	BASEPRI, r3
 8007ce0:	f3bf 8f6f 	isb	sy
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	60fb      	str	r3, [r7, #12]
}
 8007cea:	bf00      	nop
 8007cec:	e7fe      	b.n	8007cec <prvDeleteTCB+0x54>
	}
 8007cee:	bf00      	nop
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
	...

08007cf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cfe:	4b0c      	ldr	r3, [pc, #48]	; (8007d30 <prvResetNextTaskUnblockTime+0x38>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d104      	bne.n	8007d12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007d08:	4b0a      	ldr	r3, [pc, #40]	; (8007d34 <prvResetNextTaskUnblockTime+0x3c>)
 8007d0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007d10:	e008      	b.n	8007d24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d12:	4b07      	ldr	r3, [pc, #28]	; (8007d30 <prvResetNextTaskUnblockTime+0x38>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	4a04      	ldr	r2, [pc, #16]	; (8007d34 <prvResetNextTaskUnblockTime+0x3c>)
 8007d22:	6013      	str	r3, [r2, #0]
}
 8007d24:	bf00      	nop
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr
 8007d30:	20000df8 	.word	0x20000df8
 8007d34:	20000e60 	.word	0x20000e60

08007d38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007d3e:	4b0b      	ldr	r3, [pc, #44]	; (8007d6c <xTaskGetSchedulerState+0x34>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d102      	bne.n	8007d4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007d46:	2301      	movs	r3, #1
 8007d48:	607b      	str	r3, [r7, #4]
 8007d4a:	e008      	b.n	8007d5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d4c:	4b08      	ldr	r3, [pc, #32]	; (8007d70 <xTaskGetSchedulerState+0x38>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d102      	bne.n	8007d5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007d54:	2302      	movs	r3, #2
 8007d56:	607b      	str	r3, [r7, #4]
 8007d58:	e001      	b.n	8007d5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007d5e:	687b      	ldr	r3, [r7, #4]
	}
 8007d60:	4618      	mov	r0, r3
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr
 8007d6c:	20000e4c 	.word	0x20000e4c
 8007d70:	20000e68 	.word	0x20000e68

08007d74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b086      	sub	sp, #24
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007d80:	2300      	movs	r3, #0
 8007d82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d056      	beq.n	8007e38 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007d8a:	4b2e      	ldr	r3, [pc, #184]	; (8007e44 <xTaskPriorityDisinherit+0xd0>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	693a      	ldr	r2, [r7, #16]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d00a      	beq.n	8007daa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d98:	f383 8811 	msr	BASEPRI, r3
 8007d9c:	f3bf 8f6f 	isb	sy
 8007da0:	f3bf 8f4f 	dsb	sy
 8007da4:	60fb      	str	r3, [r7, #12]
}
 8007da6:	bf00      	nop
 8007da8:	e7fe      	b.n	8007da8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d10a      	bne.n	8007dc8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db6:	f383 8811 	msr	BASEPRI, r3
 8007dba:	f3bf 8f6f 	isb	sy
 8007dbe:	f3bf 8f4f 	dsb	sy
 8007dc2:	60bb      	str	r3, [r7, #8]
}
 8007dc4:	bf00      	nop
 8007dc6:	e7fe      	b.n	8007dc6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dcc:	1e5a      	subs	r2, r3, #1
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d02c      	beq.n	8007e38 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d128      	bne.n	8007e38 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	3304      	adds	r3, #4
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7fe fc70 	bl	80066d0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e08:	4b0f      	ldr	r3, [pc, #60]	; (8007e48 <xTaskPriorityDisinherit+0xd4>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d903      	bls.n	8007e18 <xTaskPriorityDisinherit+0xa4>
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e14:	4a0c      	ldr	r2, [pc, #48]	; (8007e48 <xTaskPriorityDisinherit+0xd4>)
 8007e16:	6013      	str	r3, [r2, #0]
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e1c:	4613      	mov	r3, r2
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	4413      	add	r3, r2
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	4a09      	ldr	r2, [pc, #36]	; (8007e4c <xTaskPriorityDisinherit+0xd8>)
 8007e26:	441a      	add	r2, r3
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	3304      	adds	r3, #4
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	4610      	mov	r0, r2
 8007e30:	f7fe fbf1 	bl	8006616 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007e34:	2301      	movs	r3, #1
 8007e36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e38:	697b      	ldr	r3, [r7, #20]
	}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3718      	adds	r7, #24
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	2000096c 	.word	0x2000096c
 8007e48:	20000e48 	.word	0x20000e48
 8007e4c:	20000970 	.word	0x20000970

08007e50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007e5a:	4b21      	ldr	r3, [pc, #132]	; (8007ee0 <prvAddCurrentTaskToDelayedList+0x90>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e60:	4b20      	ldr	r3, [pc, #128]	; (8007ee4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	3304      	adds	r3, #4
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7fe fc32 	bl	80066d0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e72:	d10a      	bne.n	8007e8a <prvAddCurrentTaskToDelayedList+0x3a>
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d007      	beq.n	8007e8a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e7a:	4b1a      	ldr	r3, [pc, #104]	; (8007ee4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	3304      	adds	r3, #4
 8007e80:	4619      	mov	r1, r3
 8007e82:	4819      	ldr	r0, [pc, #100]	; (8007ee8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007e84:	f7fe fbc7 	bl	8006616 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007e88:	e026      	b.n	8007ed8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	4413      	add	r3, r2
 8007e90:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e92:	4b14      	ldr	r3, [pc, #80]	; (8007ee4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68ba      	ldr	r2, [r7, #8]
 8007e98:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e9a:	68ba      	ldr	r2, [r7, #8]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d209      	bcs.n	8007eb6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ea2:	4b12      	ldr	r3, [pc, #72]	; (8007eec <prvAddCurrentTaskToDelayedList+0x9c>)
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	4b0f      	ldr	r3, [pc, #60]	; (8007ee4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	3304      	adds	r3, #4
 8007eac:	4619      	mov	r1, r3
 8007eae:	4610      	mov	r0, r2
 8007eb0:	f7fe fbd5 	bl	800665e <vListInsert>
}
 8007eb4:	e010      	b.n	8007ed8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007eb6:	4b0e      	ldr	r3, [pc, #56]	; (8007ef0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	4b0a      	ldr	r3, [pc, #40]	; (8007ee4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	3304      	adds	r3, #4
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	4610      	mov	r0, r2
 8007ec4:	f7fe fbcb 	bl	800665e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ec8:	4b0a      	ldr	r3, [pc, #40]	; (8007ef4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	68ba      	ldr	r2, [r7, #8]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d202      	bcs.n	8007ed8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007ed2:	4a08      	ldr	r2, [pc, #32]	; (8007ef4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	6013      	str	r3, [r2, #0]
}
 8007ed8:	bf00      	nop
 8007eda:	3710      	adds	r7, #16
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	20000e44 	.word	0x20000e44
 8007ee4:	2000096c 	.word	0x2000096c
 8007ee8:	20000e2c 	.word	0x20000e2c
 8007eec:	20000dfc 	.word	0x20000dfc
 8007ef0:	20000df8 	.word	0x20000df8
 8007ef4:	20000e60 	.word	0x20000e60

08007ef8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b08a      	sub	sp, #40	; 0x28
 8007efc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007efe:	2300      	movs	r3, #0
 8007f00:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007f02:	f000 fb07 	bl	8008514 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007f06:	4b1c      	ldr	r3, [pc, #112]	; (8007f78 <xTimerCreateTimerTask+0x80>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d021      	beq.n	8007f52 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007f12:	2300      	movs	r3, #0
 8007f14:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007f16:	1d3a      	adds	r2, r7, #4
 8007f18:	f107 0108 	add.w	r1, r7, #8
 8007f1c:	f107 030c 	add.w	r3, r7, #12
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7fe fb31 	bl	8006588 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007f26:	6879      	ldr	r1, [r7, #4]
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	68fa      	ldr	r2, [r7, #12]
 8007f2c:	9202      	str	r2, [sp, #8]
 8007f2e:	9301      	str	r3, [sp, #4]
 8007f30:	2302      	movs	r3, #2
 8007f32:	9300      	str	r3, [sp, #0]
 8007f34:	2300      	movs	r3, #0
 8007f36:	460a      	mov	r2, r1
 8007f38:	4910      	ldr	r1, [pc, #64]	; (8007f7c <xTimerCreateTimerTask+0x84>)
 8007f3a:	4811      	ldr	r0, [pc, #68]	; (8007f80 <xTimerCreateTimerTask+0x88>)
 8007f3c:	f7ff f8de 	bl	80070fc <xTaskCreateStatic>
 8007f40:	4603      	mov	r3, r0
 8007f42:	4a10      	ldr	r2, [pc, #64]	; (8007f84 <xTimerCreateTimerTask+0x8c>)
 8007f44:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007f46:	4b0f      	ldr	r3, [pc, #60]	; (8007f84 <xTimerCreateTimerTask+0x8c>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d001      	beq.n	8007f52 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d10a      	bne.n	8007f6e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5c:	f383 8811 	msr	BASEPRI, r3
 8007f60:	f3bf 8f6f 	isb	sy
 8007f64:	f3bf 8f4f 	dsb	sy
 8007f68:	613b      	str	r3, [r7, #16]
}
 8007f6a:	bf00      	nop
 8007f6c:	e7fe      	b.n	8007f6c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007f6e:	697b      	ldr	r3, [r7, #20]
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3718      	adds	r7, #24
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	20000e9c 	.word	0x20000e9c
 8007f7c:	08009fcc 	.word	0x08009fcc
 8007f80:	080080bd 	.word	0x080080bd
 8007f84:	20000ea0 	.word	0x20000ea0

08007f88 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b08a      	sub	sp, #40	; 0x28
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	607a      	str	r2, [r7, #4]
 8007f94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007f96:	2300      	movs	r3, #0
 8007f98:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d10a      	bne.n	8007fb6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa4:	f383 8811 	msr	BASEPRI, r3
 8007fa8:	f3bf 8f6f 	isb	sy
 8007fac:	f3bf 8f4f 	dsb	sy
 8007fb0:	623b      	str	r3, [r7, #32]
}
 8007fb2:	bf00      	nop
 8007fb4:	e7fe      	b.n	8007fb4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007fb6:	4b1a      	ldr	r3, [pc, #104]	; (8008020 <xTimerGenericCommand+0x98>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d02a      	beq.n	8008014 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	2b05      	cmp	r3, #5
 8007fce:	dc18      	bgt.n	8008002 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007fd0:	f7ff feb2 	bl	8007d38 <xTaskGetSchedulerState>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d109      	bne.n	8007fee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007fda:	4b11      	ldr	r3, [pc, #68]	; (8008020 <xTimerGenericCommand+0x98>)
 8007fdc:	6818      	ldr	r0, [r3, #0]
 8007fde:	f107 0110 	add.w	r1, r7, #16
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fe6:	f7fe fca1 	bl	800692c <xQueueGenericSend>
 8007fea:	6278      	str	r0, [r7, #36]	; 0x24
 8007fec:	e012      	b.n	8008014 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007fee:	4b0c      	ldr	r3, [pc, #48]	; (8008020 <xTimerGenericCommand+0x98>)
 8007ff0:	6818      	ldr	r0, [r3, #0]
 8007ff2:	f107 0110 	add.w	r1, r7, #16
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f7fe fc97 	bl	800692c <xQueueGenericSend>
 8007ffe:	6278      	str	r0, [r7, #36]	; 0x24
 8008000:	e008      	b.n	8008014 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008002:	4b07      	ldr	r3, [pc, #28]	; (8008020 <xTimerGenericCommand+0x98>)
 8008004:	6818      	ldr	r0, [r3, #0]
 8008006:	f107 0110 	add.w	r1, r7, #16
 800800a:	2300      	movs	r3, #0
 800800c:	683a      	ldr	r2, [r7, #0]
 800800e:	f7fe fd8b 	bl	8006b28 <xQueueGenericSendFromISR>
 8008012:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008016:	4618      	mov	r0, r3
 8008018:	3728      	adds	r7, #40	; 0x28
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	20000e9c 	.word	0x20000e9c

08008024 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b088      	sub	sp, #32
 8008028:	af02      	add	r7, sp, #8
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800802e:	4b22      	ldr	r3, [pc, #136]	; (80080b8 <prvProcessExpiredTimer+0x94>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	3304      	adds	r3, #4
 800803c:	4618      	mov	r0, r3
 800803e:	f7fe fb47 	bl	80066d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008048:	f003 0304 	and.w	r3, r3, #4
 800804c:	2b00      	cmp	r3, #0
 800804e:	d022      	beq.n	8008096 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	699a      	ldr	r2, [r3, #24]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	18d1      	adds	r1, r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	683a      	ldr	r2, [r7, #0]
 800805c:	6978      	ldr	r0, [r7, #20]
 800805e:	f000 f8d1 	bl	8008204 <prvInsertTimerInActiveList>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d01f      	beq.n	80080a8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008068:	2300      	movs	r3, #0
 800806a:	9300      	str	r3, [sp, #0]
 800806c:	2300      	movs	r3, #0
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	2100      	movs	r1, #0
 8008072:	6978      	ldr	r0, [r7, #20]
 8008074:	f7ff ff88 	bl	8007f88 <xTimerGenericCommand>
 8008078:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d113      	bne.n	80080a8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008084:	f383 8811 	msr	BASEPRI, r3
 8008088:	f3bf 8f6f 	isb	sy
 800808c:	f3bf 8f4f 	dsb	sy
 8008090:	60fb      	str	r3, [r7, #12]
}
 8008092:	bf00      	nop
 8008094:	e7fe      	b.n	8008094 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800809c:	f023 0301 	bic.w	r3, r3, #1
 80080a0:	b2da      	uxtb	r2, r3
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	6a1b      	ldr	r3, [r3, #32]
 80080ac:	6978      	ldr	r0, [r7, #20]
 80080ae:	4798      	blx	r3
}
 80080b0:	bf00      	nop
 80080b2:	3718      	adds	r7, #24
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	20000e94 	.word	0x20000e94

080080bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80080c4:	f107 0308 	add.w	r3, r7, #8
 80080c8:	4618      	mov	r0, r3
 80080ca:	f000 f857 	bl	800817c <prvGetNextExpireTime>
 80080ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	4619      	mov	r1, r3
 80080d4:	68f8      	ldr	r0, [r7, #12]
 80080d6:	f000 f803 	bl	80080e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80080da:	f000 f8d5 	bl	8008288 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80080de:	e7f1      	b.n	80080c4 <prvTimerTask+0x8>

080080e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80080ea:	f7ff fa43 	bl	8007574 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80080ee:	f107 0308 	add.w	r3, r7, #8
 80080f2:	4618      	mov	r0, r3
 80080f4:	f000 f866 	bl	80081c4 <prvSampleTimeNow>
 80080f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d130      	bne.n	8008162 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10a      	bne.n	800811c <prvProcessTimerOrBlockTask+0x3c>
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	429a      	cmp	r2, r3
 800810c:	d806      	bhi.n	800811c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800810e:	f7ff fa3f 	bl	8007590 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008112:	68f9      	ldr	r1, [r7, #12]
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f7ff ff85 	bl	8008024 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800811a:	e024      	b.n	8008166 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d008      	beq.n	8008134 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008122:	4b13      	ldr	r3, [pc, #76]	; (8008170 <prvProcessTimerOrBlockTask+0x90>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d101      	bne.n	8008130 <prvProcessTimerOrBlockTask+0x50>
 800812c:	2301      	movs	r3, #1
 800812e:	e000      	b.n	8008132 <prvProcessTimerOrBlockTask+0x52>
 8008130:	2300      	movs	r3, #0
 8008132:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008134:	4b0f      	ldr	r3, [pc, #60]	; (8008174 <prvProcessTimerOrBlockTask+0x94>)
 8008136:	6818      	ldr	r0, [r3, #0]
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	683a      	ldr	r2, [r7, #0]
 8008140:	4619      	mov	r1, r3
 8008142:	f7fe ffa7 	bl	8007094 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008146:	f7ff fa23 	bl	8007590 <xTaskResumeAll>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d10a      	bne.n	8008166 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008150:	4b09      	ldr	r3, [pc, #36]	; (8008178 <prvProcessTimerOrBlockTask+0x98>)
 8008152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008156:	601a      	str	r2, [r3, #0]
 8008158:	f3bf 8f4f 	dsb	sy
 800815c:	f3bf 8f6f 	isb	sy
}
 8008160:	e001      	b.n	8008166 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008162:	f7ff fa15 	bl	8007590 <xTaskResumeAll>
}
 8008166:	bf00      	nop
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	20000e98 	.word	0x20000e98
 8008174:	20000e9c 	.word	0x20000e9c
 8008178:	e000ed04 	.word	0xe000ed04

0800817c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008184:	4b0e      	ldr	r3, [pc, #56]	; (80081c0 <prvGetNextExpireTime+0x44>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d101      	bne.n	8008192 <prvGetNextExpireTime+0x16>
 800818e:	2201      	movs	r2, #1
 8008190:	e000      	b.n	8008194 <prvGetNextExpireTime+0x18>
 8008192:	2200      	movs	r2, #0
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d105      	bne.n	80081ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80081a0:	4b07      	ldr	r3, [pc, #28]	; (80081c0 <prvGetNextExpireTime+0x44>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	60fb      	str	r3, [r7, #12]
 80081aa:	e001      	b.n	80081b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80081ac:	2300      	movs	r3, #0
 80081ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80081b0:	68fb      	ldr	r3, [r7, #12]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3714      	adds	r7, #20
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	20000e94 	.word	0x20000e94

080081c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80081cc:	f7ff fa7e 	bl	80076cc <xTaskGetTickCount>
 80081d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80081d2:	4b0b      	ldr	r3, [pc, #44]	; (8008200 <prvSampleTimeNow+0x3c>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d205      	bcs.n	80081e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80081dc:	f000 f936 	bl	800844c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	601a      	str	r2, [r3, #0]
 80081e6:	e002      	b.n	80081ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2200      	movs	r2, #0
 80081ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80081ee:	4a04      	ldr	r2, [pc, #16]	; (8008200 <prvSampleTimeNow+0x3c>)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80081f4:	68fb      	ldr	r3, [r7, #12]
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	20000ea4 	.word	0x20000ea4

08008204 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]
 8008210:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008212:	2300      	movs	r3, #0
 8008214:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	429a      	cmp	r2, r3
 8008228:	d812      	bhi.n	8008250 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	1ad2      	subs	r2, r2, r3
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	429a      	cmp	r2, r3
 8008236:	d302      	bcc.n	800823e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008238:	2301      	movs	r3, #1
 800823a:	617b      	str	r3, [r7, #20]
 800823c:	e01b      	b.n	8008276 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800823e:	4b10      	ldr	r3, [pc, #64]	; (8008280 <prvInsertTimerInActiveList+0x7c>)
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	3304      	adds	r3, #4
 8008246:	4619      	mov	r1, r3
 8008248:	4610      	mov	r0, r2
 800824a:	f7fe fa08 	bl	800665e <vListInsert>
 800824e:	e012      	b.n	8008276 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	429a      	cmp	r2, r3
 8008256:	d206      	bcs.n	8008266 <prvInsertTimerInActiveList+0x62>
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	429a      	cmp	r2, r3
 800825e:	d302      	bcc.n	8008266 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008260:	2301      	movs	r3, #1
 8008262:	617b      	str	r3, [r7, #20]
 8008264:	e007      	b.n	8008276 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008266:	4b07      	ldr	r3, [pc, #28]	; (8008284 <prvInsertTimerInActiveList+0x80>)
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	3304      	adds	r3, #4
 800826e:	4619      	mov	r1, r3
 8008270:	4610      	mov	r0, r2
 8008272:	f7fe f9f4 	bl	800665e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008276:	697b      	ldr	r3, [r7, #20]
}
 8008278:	4618      	mov	r0, r3
 800827a:	3718      	adds	r7, #24
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	20000e98 	.word	0x20000e98
 8008284:	20000e94 	.word	0x20000e94

08008288 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b08e      	sub	sp, #56	; 0x38
 800828c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800828e:	e0ca      	b.n	8008426 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2b00      	cmp	r3, #0
 8008294:	da18      	bge.n	80082c8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008296:	1d3b      	adds	r3, r7, #4
 8008298:	3304      	adds	r3, #4
 800829a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800829c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d10a      	bne.n	80082b8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80082a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a6:	f383 8811 	msr	BASEPRI, r3
 80082aa:	f3bf 8f6f 	isb	sy
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	61fb      	str	r3, [r7, #28]
}
 80082b4:	bf00      	nop
 80082b6:	e7fe      	b.n	80082b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80082b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082be:	6850      	ldr	r0, [r2, #4]
 80082c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082c2:	6892      	ldr	r2, [r2, #8]
 80082c4:	4611      	mov	r1, r2
 80082c6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	f2c0 80ab 	blt.w	8008426 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80082d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d6:	695b      	ldr	r3, [r3, #20]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d004      	beq.n	80082e6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082de:	3304      	adds	r3, #4
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7fe f9f5 	bl	80066d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80082e6:	463b      	mov	r3, r7
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7ff ff6b 	bl	80081c4 <prvSampleTimeNow>
 80082ee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2b09      	cmp	r3, #9
 80082f4:	f200 8096 	bhi.w	8008424 <prvProcessReceivedCommands+0x19c>
 80082f8:	a201      	add	r2, pc, #4	; (adr r2, 8008300 <prvProcessReceivedCommands+0x78>)
 80082fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082fe:	bf00      	nop
 8008300:	08008329 	.word	0x08008329
 8008304:	08008329 	.word	0x08008329
 8008308:	08008329 	.word	0x08008329
 800830c:	0800839d 	.word	0x0800839d
 8008310:	080083b1 	.word	0x080083b1
 8008314:	080083fb 	.word	0x080083fb
 8008318:	08008329 	.word	0x08008329
 800831c:	08008329 	.word	0x08008329
 8008320:	0800839d 	.word	0x0800839d
 8008324:	080083b1 	.word	0x080083b1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800832e:	f043 0301 	orr.w	r3, r3, #1
 8008332:	b2da      	uxtb	r2, r3
 8008334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008336:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800833a:	68ba      	ldr	r2, [r7, #8]
 800833c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	18d1      	adds	r1, r2, r3
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008346:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008348:	f7ff ff5c 	bl	8008204 <prvInsertTimerInActiveList>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d069      	beq.n	8008426 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008354:	6a1b      	ldr	r3, [r3, #32]
 8008356:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008358:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800835a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008360:	f003 0304 	and.w	r3, r3, #4
 8008364:	2b00      	cmp	r3, #0
 8008366:	d05e      	beq.n	8008426 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008368:	68ba      	ldr	r2, [r7, #8]
 800836a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836c:	699b      	ldr	r3, [r3, #24]
 800836e:	441a      	add	r2, r3
 8008370:	2300      	movs	r3, #0
 8008372:	9300      	str	r3, [sp, #0]
 8008374:	2300      	movs	r3, #0
 8008376:	2100      	movs	r1, #0
 8008378:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800837a:	f7ff fe05 	bl	8007f88 <xTimerGenericCommand>
 800837e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008380:	6a3b      	ldr	r3, [r7, #32]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d14f      	bne.n	8008426 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838a:	f383 8811 	msr	BASEPRI, r3
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f3bf 8f4f 	dsb	sy
 8008396:	61bb      	str	r3, [r7, #24]
}
 8008398:	bf00      	nop
 800839a:	e7fe      	b.n	800839a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800839c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083a2:	f023 0301 	bic.w	r3, r3, #1
 80083a6:	b2da      	uxtb	r2, r3
 80083a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80083ae:	e03a      	b.n	8008426 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80083b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083b6:	f043 0301 	orr.w	r3, r3, #1
 80083ba:	b2da      	uxtb	r2, r3
 80083bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80083c2:	68ba      	ldr	r2, [r7, #8]
 80083c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80083c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ca:	699b      	ldr	r3, [r3, #24]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10a      	bne.n	80083e6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80083d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	617b      	str	r3, [r7, #20]
}
 80083e2:	bf00      	nop
 80083e4:	e7fe      	b.n	80083e4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80083e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e8:	699a      	ldr	r2, [r3, #24]
 80083ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ec:	18d1      	adds	r1, r2, r3
 80083ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083f4:	f7ff ff06 	bl	8008204 <prvInsertTimerInActiveList>
					break;
 80083f8:	e015      	b.n	8008426 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80083fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008400:	f003 0302 	and.w	r3, r3, #2
 8008404:	2b00      	cmp	r3, #0
 8008406:	d103      	bne.n	8008410 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008408:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800840a:	f000 fbe1 	bl	8008bd0 <vPortFree>
 800840e:	e00a      	b.n	8008426 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008412:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008416:	f023 0301 	bic.w	r3, r3, #1
 800841a:	b2da      	uxtb	r2, r3
 800841c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008422:	e000      	b.n	8008426 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8008424:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008426:	4b08      	ldr	r3, [pc, #32]	; (8008448 <prvProcessReceivedCommands+0x1c0>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	1d39      	adds	r1, r7, #4
 800842c:	2200      	movs	r2, #0
 800842e:	4618      	mov	r0, r3
 8008430:	f7fe fc16 	bl	8006c60 <xQueueReceive>
 8008434:	4603      	mov	r3, r0
 8008436:	2b00      	cmp	r3, #0
 8008438:	f47f af2a 	bne.w	8008290 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800843c:	bf00      	nop
 800843e:	bf00      	nop
 8008440:	3730      	adds	r7, #48	; 0x30
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	20000e9c 	.word	0x20000e9c

0800844c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b088      	sub	sp, #32
 8008450:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008452:	e048      	b.n	80084e6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008454:	4b2d      	ldr	r3, [pc, #180]	; (800850c <prvSwitchTimerLists+0xc0>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800845e:	4b2b      	ldr	r3, [pc, #172]	; (800850c <prvSwitchTimerLists+0xc0>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	3304      	adds	r3, #4
 800846c:	4618      	mov	r0, r3
 800846e:	f7fe f92f 	bl	80066d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6a1b      	ldr	r3, [r3, #32]
 8008476:	68f8      	ldr	r0, [r7, #12]
 8008478:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008480:	f003 0304 	and.w	r3, r3, #4
 8008484:	2b00      	cmp	r3, #0
 8008486:	d02e      	beq.n	80084e6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	699b      	ldr	r3, [r3, #24]
 800848c:	693a      	ldr	r2, [r7, #16]
 800848e:	4413      	add	r3, r2
 8008490:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008492:	68ba      	ldr	r2, [r7, #8]
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	429a      	cmp	r2, r3
 8008498:	d90e      	bls.n	80084b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	68fa      	ldr	r2, [r7, #12]
 80084a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80084a6:	4b19      	ldr	r3, [pc, #100]	; (800850c <prvSwitchTimerLists+0xc0>)
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	3304      	adds	r3, #4
 80084ae:	4619      	mov	r1, r3
 80084b0:	4610      	mov	r0, r2
 80084b2:	f7fe f8d4 	bl	800665e <vListInsert>
 80084b6:	e016      	b.n	80084e6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80084b8:	2300      	movs	r3, #0
 80084ba:	9300      	str	r3, [sp, #0]
 80084bc:	2300      	movs	r3, #0
 80084be:	693a      	ldr	r2, [r7, #16]
 80084c0:	2100      	movs	r1, #0
 80084c2:	68f8      	ldr	r0, [r7, #12]
 80084c4:	f7ff fd60 	bl	8007f88 <xTimerGenericCommand>
 80084c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d10a      	bne.n	80084e6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80084d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d4:	f383 8811 	msr	BASEPRI, r3
 80084d8:	f3bf 8f6f 	isb	sy
 80084dc:	f3bf 8f4f 	dsb	sy
 80084e0:	603b      	str	r3, [r7, #0]
}
 80084e2:	bf00      	nop
 80084e4:	e7fe      	b.n	80084e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80084e6:	4b09      	ldr	r3, [pc, #36]	; (800850c <prvSwitchTimerLists+0xc0>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1b1      	bne.n	8008454 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80084f0:	4b06      	ldr	r3, [pc, #24]	; (800850c <prvSwitchTimerLists+0xc0>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80084f6:	4b06      	ldr	r3, [pc, #24]	; (8008510 <prvSwitchTimerLists+0xc4>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a04      	ldr	r2, [pc, #16]	; (800850c <prvSwitchTimerLists+0xc0>)
 80084fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80084fe:	4a04      	ldr	r2, [pc, #16]	; (8008510 <prvSwitchTimerLists+0xc4>)
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	6013      	str	r3, [r2, #0]
}
 8008504:	bf00      	nop
 8008506:	3718      	adds	r7, #24
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}
 800850c:	20000e94 	.word	0x20000e94
 8008510:	20000e98 	.word	0x20000e98

08008514 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800851a:	f000 f96b 	bl	80087f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800851e:	4b15      	ldr	r3, [pc, #84]	; (8008574 <prvCheckForValidListAndQueue+0x60>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d120      	bne.n	8008568 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008526:	4814      	ldr	r0, [pc, #80]	; (8008578 <prvCheckForValidListAndQueue+0x64>)
 8008528:	f7fe f848 	bl	80065bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800852c:	4813      	ldr	r0, [pc, #76]	; (800857c <prvCheckForValidListAndQueue+0x68>)
 800852e:	f7fe f845 	bl	80065bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008532:	4b13      	ldr	r3, [pc, #76]	; (8008580 <prvCheckForValidListAndQueue+0x6c>)
 8008534:	4a10      	ldr	r2, [pc, #64]	; (8008578 <prvCheckForValidListAndQueue+0x64>)
 8008536:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008538:	4b12      	ldr	r3, [pc, #72]	; (8008584 <prvCheckForValidListAndQueue+0x70>)
 800853a:	4a10      	ldr	r2, [pc, #64]	; (800857c <prvCheckForValidListAndQueue+0x68>)
 800853c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800853e:	2300      	movs	r3, #0
 8008540:	9300      	str	r3, [sp, #0]
 8008542:	4b11      	ldr	r3, [pc, #68]	; (8008588 <prvCheckForValidListAndQueue+0x74>)
 8008544:	4a11      	ldr	r2, [pc, #68]	; (800858c <prvCheckForValidListAndQueue+0x78>)
 8008546:	2110      	movs	r1, #16
 8008548:	200a      	movs	r0, #10
 800854a:	f7fe f953 	bl	80067f4 <xQueueGenericCreateStatic>
 800854e:	4603      	mov	r3, r0
 8008550:	4a08      	ldr	r2, [pc, #32]	; (8008574 <prvCheckForValidListAndQueue+0x60>)
 8008552:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008554:	4b07      	ldr	r3, [pc, #28]	; (8008574 <prvCheckForValidListAndQueue+0x60>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d005      	beq.n	8008568 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800855c:	4b05      	ldr	r3, [pc, #20]	; (8008574 <prvCheckForValidListAndQueue+0x60>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	490b      	ldr	r1, [pc, #44]	; (8008590 <prvCheckForValidListAndQueue+0x7c>)
 8008562:	4618      	mov	r0, r3
 8008564:	f7fe fd6c 	bl	8007040 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008568:	f000 f974 	bl	8008854 <vPortExitCritical>
}
 800856c:	bf00      	nop
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	20000e9c 	.word	0x20000e9c
 8008578:	20000e6c 	.word	0x20000e6c
 800857c:	20000e80 	.word	0x20000e80
 8008580:	20000e94 	.word	0x20000e94
 8008584:	20000e98 	.word	0x20000e98
 8008588:	20000f48 	.word	0x20000f48
 800858c:	20000ea8 	.word	0x20000ea8
 8008590:	08009fd4 	.word	0x08009fd4

08008594 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008594:	b480      	push	{r7}
 8008596:	b085      	sub	sp, #20
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	3b04      	subs	r3, #4
 80085a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80085ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	3b04      	subs	r3, #4
 80085b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	f023 0201 	bic.w	r2, r3, #1
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	3b04      	subs	r3, #4
 80085c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80085c4:	4a0c      	ldr	r2, [pc, #48]	; (80085f8 <pxPortInitialiseStack+0x64>)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	3b14      	subs	r3, #20
 80085ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	3b04      	subs	r3, #4
 80085da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f06f 0202 	mvn.w	r2, #2
 80085e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	3b20      	subs	r3, #32
 80085e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80085ea:	68fb      	ldr	r3, [r7, #12]
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3714      	adds	r7, #20
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr
 80085f8:	080085fd 	.word	0x080085fd

080085fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008602:	2300      	movs	r3, #0
 8008604:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008606:	4b12      	ldr	r3, [pc, #72]	; (8008650 <prvTaskExitError+0x54>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800860e:	d00a      	beq.n	8008626 <prvTaskExitError+0x2a>
	__asm volatile
 8008610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008614:	f383 8811 	msr	BASEPRI, r3
 8008618:	f3bf 8f6f 	isb	sy
 800861c:	f3bf 8f4f 	dsb	sy
 8008620:	60fb      	str	r3, [r7, #12]
}
 8008622:	bf00      	nop
 8008624:	e7fe      	b.n	8008624 <prvTaskExitError+0x28>
	__asm volatile
 8008626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862a:	f383 8811 	msr	BASEPRI, r3
 800862e:	f3bf 8f6f 	isb	sy
 8008632:	f3bf 8f4f 	dsb	sy
 8008636:	60bb      	str	r3, [r7, #8]
}
 8008638:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800863a:	bf00      	nop
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d0fc      	beq.n	800863c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008642:	bf00      	nop
 8008644:	bf00      	nop
 8008646:	3714      	adds	r7, #20
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr
 8008650:	20000018 	.word	0x20000018
	...

08008660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008660:	4b07      	ldr	r3, [pc, #28]	; (8008680 <pxCurrentTCBConst2>)
 8008662:	6819      	ldr	r1, [r3, #0]
 8008664:	6808      	ldr	r0, [r1, #0]
 8008666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800866a:	f380 8809 	msr	PSP, r0
 800866e:	f3bf 8f6f 	isb	sy
 8008672:	f04f 0000 	mov.w	r0, #0
 8008676:	f380 8811 	msr	BASEPRI, r0
 800867a:	4770      	bx	lr
 800867c:	f3af 8000 	nop.w

08008680 <pxCurrentTCBConst2>:
 8008680:	2000096c 	.word	0x2000096c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008684:	bf00      	nop
 8008686:	bf00      	nop

08008688 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008688:	4808      	ldr	r0, [pc, #32]	; (80086ac <prvPortStartFirstTask+0x24>)
 800868a:	6800      	ldr	r0, [r0, #0]
 800868c:	6800      	ldr	r0, [r0, #0]
 800868e:	f380 8808 	msr	MSP, r0
 8008692:	f04f 0000 	mov.w	r0, #0
 8008696:	f380 8814 	msr	CONTROL, r0
 800869a:	b662      	cpsie	i
 800869c:	b661      	cpsie	f
 800869e:	f3bf 8f4f 	dsb	sy
 80086a2:	f3bf 8f6f 	isb	sy
 80086a6:	df00      	svc	0
 80086a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80086aa:	bf00      	nop
 80086ac:	e000ed08 	.word	0xe000ed08

080086b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b086      	sub	sp, #24
 80086b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80086b6:	4b46      	ldr	r3, [pc, #280]	; (80087d0 <xPortStartScheduler+0x120>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a46      	ldr	r2, [pc, #280]	; (80087d4 <xPortStartScheduler+0x124>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d10a      	bne.n	80086d6 <xPortStartScheduler+0x26>
	__asm volatile
 80086c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c4:	f383 8811 	msr	BASEPRI, r3
 80086c8:	f3bf 8f6f 	isb	sy
 80086cc:	f3bf 8f4f 	dsb	sy
 80086d0:	613b      	str	r3, [r7, #16]
}
 80086d2:	bf00      	nop
 80086d4:	e7fe      	b.n	80086d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80086d6:	4b3e      	ldr	r3, [pc, #248]	; (80087d0 <xPortStartScheduler+0x120>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a3f      	ldr	r2, [pc, #252]	; (80087d8 <xPortStartScheduler+0x128>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d10a      	bne.n	80086f6 <xPortStartScheduler+0x46>
	__asm volatile
 80086e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e4:	f383 8811 	msr	BASEPRI, r3
 80086e8:	f3bf 8f6f 	isb	sy
 80086ec:	f3bf 8f4f 	dsb	sy
 80086f0:	60fb      	str	r3, [r7, #12]
}
 80086f2:	bf00      	nop
 80086f4:	e7fe      	b.n	80086f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80086f6:	4b39      	ldr	r3, [pc, #228]	; (80087dc <xPortStartScheduler+0x12c>)
 80086f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	22ff      	movs	r2, #255	; 0xff
 8008706:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	b2db      	uxtb	r3, r3
 800870e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008710:	78fb      	ldrb	r3, [r7, #3]
 8008712:	b2db      	uxtb	r3, r3
 8008714:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008718:	b2da      	uxtb	r2, r3
 800871a:	4b31      	ldr	r3, [pc, #196]	; (80087e0 <xPortStartScheduler+0x130>)
 800871c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800871e:	4b31      	ldr	r3, [pc, #196]	; (80087e4 <xPortStartScheduler+0x134>)
 8008720:	2207      	movs	r2, #7
 8008722:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008724:	e009      	b.n	800873a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008726:	4b2f      	ldr	r3, [pc, #188]	; (80087e4 <xPortStartScheduler+0x134>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	3b01      	subs	r3, #1
 800872c:	4a2d      	ldr	r2, [pc, #180]	; (80087e4 <xPortStartScheduler+0x134>)
 800872e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008730:	78fb      	ldrb	r3, [r7, #3]
 8008732:	b2db      	uxtb	r3, r3
 8008734:	005b      	lsls	r3, r3, #1
 8008736:	b2db      	uxtb	r3, r3
 8008738:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800873a:	78fb      	ldrb	r3, [r7, #3]
 800873c:	b2db      	uxtb	r3, r3
 800873e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008742:	2b80      	cmp	r3, #128	; 0x80
 8008744:	d0ef      	beq.n	8008726 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008746:	4b27      	ldr	r3, [pc, #156]	; (80087e4 <xPortStartScheduler+0x134>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f1c3 0307 	rsb	r3, r3, #7
 800874e:	2b04      	cmp	r3, #4
 8008750:	d00a      	beq.n	8008768 <xPortStartScheduler+0xb8>
	__asm volatile
 8008752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008756:	f383 8811 	msr	BASEPRI, r3
 800875a:	f3bf 8f6f 	isb	sy
 800875e:	f3bf 8f4f 	dsb	sy
 8008762:	60bb      	str	r3, [r7, #8]
}
 8008764:	bf00      	nop
 8008766:	e7fe      	b.n	8008766 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008768:	4b1e      	ldr	r3, [pc, #120]	; (80087e4 <xPortStartScheduler+0x134>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	021b      	lsls	r3, r3, #8
 800876e:	4a1d      	ldr	r2, [pc, #116]	; (80087e4 <xPortStartScheduler+0x134>)
 8008770:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008772:	4b1c      	ldr	r3, [pc, #112]	; (80087e4 <xPortStartScheduler+0x134>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800877a:	4a1a      	ldr	r2, [pc, #104]	; (80087e4 <xPortStartScheduler+0x134>)
 800877c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	b2da      	uxtb	r2, r3
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008786:	4b18      	ldr	r3, [pc, #96]	; (80087e8 <xPortStartScheduler+0x138>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a17      	ldr	r2, [pc, #92]	; (80087e8 <xPortStartScheduler+0x138>)
 800878c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008790:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008792:	4b15      	ldr	r3, [pc, #84]	; (80087e8 <xPortStartScheduler+0x138>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a14      	ldr	r2, [pc, #80]	; (80087e8 <xPortStartScheduler+0x138>)
 8008798:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800879c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800879e:	f000 f8dd 	bl	800895c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80087a2:	4b12      	ldr	r3, [pc, #72]	; (80087ec <xPortStartScheduler+0x13c>)
 80087a4:	2200      	movs	r2, #0
 80087a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80087a8:	f000 f8fc 	bl	80089a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80087ac:	4b10      	ldr	r3, [pc, #64]	; (80087f0 <xPortStartScheduler+0x140>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a0f      	ldr	r2, [pc, #60]	; (80087f0 <xPortStartScheduler+0x140>)
 80087b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80087b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80087b8:	f7ff ff66 	bl	8008688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80087bc:	f7ff f850 	bl	8007860 <vTaskSwitchContext>
	prvTaskExitError();
 80087c0:	f7ff ff1c 	bl	80085fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3718      	adds	r7, #24
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	e000ed00 	.word	0xe000ed00
 80087d4:	410fc271 	.word	0x410fc271
 80087d8:	410fc270 	.word	0x410fc270
 80087dc:	e000e400 	.word	0xe000e400
 80087e0:	20000f98 	.word	0x20000f98
 80087e4:	20000f9c 	.word	0x20000f9c
 80087e8:	e000ed20 	.word	0xe000ed20
 80087ec:	20000018 	.word	0x20000018
 80087f0:	e000ef34 	.word	0xe000ef34

080087f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
	__asm volatile
 80087fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fe:	f383 8811 	msr	BASEPRI, r3
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	607b      	str	r3, [r7, #4]
}
 800880c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800880e:	4b0f      	ldr	r3, [pc, #60]	; (800884c <vPortEnterCritical+0x58>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	3301      	adds	r3, #1
 8008814:	4a0d      	ldr	r2, [pc, #52]	; (800884c <vPortEnterCritical+0x58>)
 8008816:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008818:	4b0c      	ldr	r3, [pc, #48]	; (800884c <vPortEnterCritical+0x58>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2b01      	cmp	r3, #1
 800881e:	d10f      	bne.n	8008840 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008820:	4b0b      	ldr	r3, [pc, #44]	; (8008850 <vPortEnterCritical+0x5c>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	b2db      	uxtb	r3, r3
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00a      	beq.n	8008840 <vPortEnterCritical+0x4c>
	__asm volatile
 800882a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882e:	f383 8811 	msr	BASEPRI, r3
 8008832:	f3bf 8f6f 	isb	sy
 8008836:	f3bf 8f4f 	dsb	sy
 800883a:	603b      	str	r3, [r7, #0]
}
 800883c:	bf00      	nop
 800883e:	e7fe      	b.n	800883e <vPortEnterCritical+0x4a>
	}
}
 8008840:	bf00      	nop
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr
 800884c:	20000018 	.word	0x20000018
 8008850:	e000ed04 	.word	0xe000ed04

08008854 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800885a:	4b12      	ldr	r3, [pc, #72]	; (80088a4 <vPortExitCritical+0x50>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d10a      	bne.n	8008878 <vPortExitCritical+0x24>
	__asm volatile
 8008862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008866:	f383 8811 	msr	BASEPRI, r3
 800886a:	f3bf 8f6f 	isb	sy
 800886e:	f3bf 8f4f 	dsb	sy
 8008872:	607b      	str	r3, [r7, #4]
}
 8008874:	bf00      	nop
 8008876:	e7fe      	b.n	8008876 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008878:	4b0a      	ldr	r3, [pc, #40]	; (80088a4 <vPortExitCritical+0x50>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	3b01      	subs	r3, #1
 800887e:	4a09      	ldr	r2, [pc, #36]	; (80088a4 <vPortExitCritical+0x50>)
 8008880:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008882:	4b08      	ldr	r3, [pc, #32]	; (80088a4 <vPortExitCritical+0x50>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d105      	bne.n	8008896 <vPortExitCritical+0x42>
 800888a:	2300      	movs	r3, #0
 800888c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	f383 8811 	msr	BASEPRI, r3
}
 8008894:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008896:	bf00      	nop
 8008898:	370c      	adds	r7, #12
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	20000018 	.word	0x20000018
	...

080088b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80088b0:	f3ef 8009 	mrs	r0, PSP
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	4b15      	ldr	r3, [pc, #84]	; (8008910 <pxCurrentTCBConst>)
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	f01e 0f10 	tst.w	lr, #16
 80088c0:	bf08      	it	eq
 80088c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80088c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ca:	6010      	str	r0, [r2, #0]
 80088cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80088d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80088d4:	f380 8811 	msr	BASEPRI, r0
 80088d8:	f3bf 8f4f 	dsb	sy
 80088dc:	f3bf 8f6f 	isb	sy
 80088e0:	f7fe ffbe 	bl	8007860 <vTaskSwitchContext>
 80088e4:	f04f 0000 	mov.w	r0, #0
 80088e8:	f380 8811 	msr	BASEPRI, r0
 80088ec:	bc09      	pop	{r0, r3}
 80088ee:	6819      	ldr	r1, [r3, #0]
 80088f0:	6808      	ldr	r0, [r1, #0]
 80088f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f6:	f01e 0f10 	tst.w	lr, #16
 80088fa:	bf08      	it	eq
 80088fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008900:	f380 8809 	msr	PSP, r0
 8008904:	f3bf 8f6f 	isb	sy
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop
 800890c:	f3af 8000 	nop.w

08008910 <pxCurrentTCBConst>:
 8008910:	2000096c 	.word	0x2000096c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008914:	bf00      	nop
 8008916:	bf00      	nop

08008918 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
	__asm volatile
 800891e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008922:	f383 8811 	msr	BASEPRI, r3
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	607b      	str	r3, [r7, #4]
}
 8008930:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008932:	f7fe fedb 	bl	80076ec <xTaskIncrementTick>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d003      	beq.n	8008944 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800893c:	4b06      	ldr	r3, [pc, #24]	; (8008958 <xPortSysTickHandler+0x40>)
 800893e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008942:	601a      	str	r2, [r3, #0]
 8008944:	2300      	movs	r3, #0
 8008946:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	f383 8811 	msr	BASEPRI, r3
}
 800894e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008950:	bf00      	nop
 8008952:	3708      	adds	r7, #8
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}
 8008958:	e000ed04 	.word	0xe000ed04

0800895c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800895c:	b480      	push	{r7}
 800895e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008960:	4b0b      	ldr	r3, [pc, #44]	; (8008990 <vPortSetupTimerInterrupt+0x34>)
 8008962:	2200      	movs	r2, #0
 8008964:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008966:	4b0b      	ldr	r3, [pc, #44]	; (8008994 <vPortSetupTimerInterrupt+0x38>)
 8008968:	2200      	movs	r2, #0
 800896a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800896c:	4b0a      	ldr	r3, [pc, #40]	; (8008998 <vPortSetupTimerInterrupt+0x3c>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a0a      	ldr	r2, [pc, #40]	; (800899c <vPortSetupTimerInterrupt+0x40>)
 8008972:	fba2 2303 	umull	r2, r3, r2, r3
 8008976:	099b      	lsrs	r3, r3, #6
 8008978:	4a09      	ldr	r2, [pc, #36]	; (80089a0 <vPortSetupTimerInterrupt+0x44>)
 800897a:	3b01      	subs	r3, #1
 800897c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800897e:	4b04      	ldr	r3, [pc, #16]	; (8008990 <vPortSetupTimerInterrupt+0x34>)
 8008980:	2207      	movs	r2, #7
 8008982:	601a      	str	r2, [r3, #0]
}
 8008984:	bf00      	nop
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr
 800898e:	bf00      	nop
 8008990:	e000e010 	.word	0xe000e010
 8008994:	e000e018 	.word	0xe000e018
 8008998:	2000000c 	.word	0x2000000c
 800899c:	10624dd3 	.word	0x10624dd3
 80089a0:	e000e014 	.word	0xe000e014

080089a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80089a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80089b4 <vPortEnableVFP+0x10>
 80089a8:	6801      	ldr	r1, [r0, #0]
 80089aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80089ae:	6001      	str	r1, [r0, #0]
 80089b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80089b2:	bf00      	nop
 80089b4:	e000ed88 	.word	0xe000ed88

080089b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80089b8:	b480      	push	{r7}
 80089ba:	b085      	sub	sp, #20
 80089bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80089be:	f3ef 8305 	mrs	r3, IPSR
 80089c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2b0f      	cmp	r3, #15
 80089c8:	d914      	bls.n	80089f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80089ca:	4a17      	ldr	r2, [pc, #92]	; (8008a28 <vPortValidateInterruptPriority+0x70>)
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	4413      	add	r3, r2
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80089d4:	4b15      	ldr	r3, [pc, #84]	; (8008a2c <vPortValidateInterruptPriority+0x74>)
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	7afa      	ldrb	r2, [r7, #11]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d20a      	bcs.n	80089f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80089de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e2:	f383 8811 	msr	BASEPRI, r3
 80089e6:	f3bf 8f6f 	isb	sy
 80089ea:	f3bf 8f4f 	dsb	sy
 80089ee:	607b      	str	r3, [r7, #4]
}
 80089f0:	bf00      	nop
 80089f2:	e7fe      	b.n	80089f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80089f4:	4b0e      	ldr	r3, [pc, #56]	; (8008a30 <vPortValidateInterruptPriority+0x78>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80089fc:	4b0d      	ldr	r3, [pc, #52]	; (8008a34 <vPortValidateInterruptPriority+0x7c>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d90a      	bls.n	8008a1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a08:	f383 8811 	msr	BASEPRI, r3
 8008a0c:	f3bf 8f6f 	isb	sy
 8008a10:	f3bf 8f4f 	dsb	sy
 8008a14:	603b      	str	r3, [r7, #0]
}
 8008a16:	bf00      	nop
 8008a18:	e7fe      	b.n	8008a18 <vPortValidateInterruptPriority+0x60>
	}
 8008a1a:	bf00      	nop
 8008a1c:	3714      	adds	r7, #20
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	e000e3f0 	.word	0xe000e3f0
 8008a2c:	20000f98 	.word	0x20000f98
 8008a30:	e000ed0c 	.word	0xe000ed0c
 8008a34:	20000f9c 	.word	0x20000f9c

08008a38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b08a      	sub	sp, #40	; 0x28
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008a40:	2300      	movs	r3, #0
 8008a42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008a44:	f7fe fd96 	bl	8007574 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008a48:	4b5b      	ldr	r3, [pc, #364]	; (8008bb8 <pvPortMalloc+0x180>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d101      	bne.n	8008a54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a50:	f000 f920 	bl	8008c94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a54:	4b59      	ldr	r3, [pc, #356]	; (8008bbc <pvPortMalloc+0x184>)
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4013      	ands	r3, r2
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f040 8093 	bne.w	8008b88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d01d      	beq.n	8008aa4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008a68:	2208      	movs	r2, #8
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	4413      	add	r3, r2
 8008a6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f003 0307 	and.w	r3, r3, #7
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d014      	beq.n	8008aa4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f023 0307 	bic.w	r3, r3, #7
 8008a80:	3308      	adds	r3, #8
 8008a82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f003 0307 	and.w	r3, r3, #7
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00a      	beq.n	8008aa4 <pvPortMalloc+0x6c>
	__asm volatile
 8008a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a92:	f383 8811 	msr	BASEPRI, r3
 8008a96:	f3bf 8f6f 	isb	sy
 8008a9a:	f3bf 8f4f 	dsb	sy
 8008a9e:	617b      	str	r3, [r7, #20]
}
 8008aa0:	bf00      	nop
 8008aa2:	e7fe      	b.n	8008aa2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d06e      	beq.n	8008b88 <pvPortMalloc+0x150>
 8008aaa:	4b45      	ldr	r3, [pc, #276]	; (8008bc0 <pvPortMalloc+0x188>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d869      	bhi.n	8008b88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008ab4:	4b43      	ldr	r3, [pc, #268]	; (8008bc4 <pvPortMalloc+0x18c>)
 8008ab6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ab8:	4b42      	ldr	r3, [pc, #264]	; (8008bc4 <pvPortMalloc+0x18c>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008abe:	e004      	b.n	8008aca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d903      	bls.n	8008adc <pvPortMalloc+0xa4>
 8008ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d1f1      	bne.n	8008ac0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008adc:	4b36      	ldr	r3, [pc, #216]	; (8008bb8 <pvPortMalloc+0x180>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d050      	beq.n	8008b88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ae6:	6a3b      	ldr	r3, [r7, #32]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2208      	movs	r2, #8
 8008aec:	4413      	add	r3, r2
 8008aee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	6a3b      	ldr	r3, [r7, #32]
 8008af6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afa:	685a      	ldr	r2, [r3, #4]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	1ad2      	subs	r2, r2, r3
 8008b00:	2308      	movs	r3, #8
 8008b02:	005b      	lsls	r3, r3, #1
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d91f      	bls.n	8008b48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	f003 0307 	and.w	r3, r3, #7
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00a      	beq.n	8008b30 <pvPortMalloc+0xf8>
	__asm volatile
 8008b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1e:	f383 8811 	msr	BASEPRI, r3
 8008b22:	f3bf 8f6f 	isb	sy
 8008b26:	f3bf 8f4f 	dsb	sy
 8008b2a:	613b      	str	r3, [r7, #16]
}
 8008b2c:	bf00      	nop
 8008b2e:	e7fe      	b.n	8008b2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b32:	685a      	ldr	r2, [r3, #4]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	1ad2      	subs	r2, r2, r3
 8008b38:	69bb      	ldr	r3, [r7, #24]
 8008b3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b42:	69b8      	ldr	r0, [r7, #24]
 8008b44:	f000 f908 	bl	8008d58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b48:	4b1d      	ldr	r3, [pc, #116]	; (8008bc0 <pvPortMalloc+0x188>)
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	1ad3      	subs	r3, r2, r3
 8008b52:	4a1b      	ldr	r2, [pc, #108]	; (8008bc0 <pvPortMalloc+0x188>)
 8008b54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b56:	4b1a      	ldr	r3, [pc, #104]	; (8008bc0 <pvPortMalloc+0x188>)
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	4b1b      	ldr	r3, [pc, #108]	; (8008bc8 <pvPortMalloc+0x190>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d203      	bcs.n	8008b6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b62:	4b17      	ldr	r3, [pc, #92]	; (8008bc0 <pvPortMalloc+0x188>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a18      	ldr	r2, [pc, #96]	; (8008bc8 <pvPortMalloc+0x190>)
 8008b68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6c:	685a      	ldr	r2, [r3, #4]
 8008b6e:	4b13      	ldr	r3, [pc, #76]	; (8008bbc <pvPortMalloc+0x184>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	431a      	orrs	r2, r3
 8008b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008b7e:	4b13      	ldr	r3, [pc, #76]	; (8008bcc <pvPortMalloc+0x194>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	3301      	adds	r3, #1
 8008b84:	4a11      	ldr	r2, [pc, #68]	; (8008bcc <pvPortMalloc+0x194>)
 8008b86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008b88:	f7fe fd02 	bl	8007590 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	f003 0307 	and.w	r3, r3, #7
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00a      	beq.n	8008bac <pvPortMalloc+0x174>
	__asm volatile
 8008b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9a:	f383 8811 	msr	BASEPRI, r3
 8008b9e:	f3bf 8f6f 	isb	sy
 8008ba2:	f3bf 8f4f 	dsb	sy
 8008ba6:	60fb      	str	r3, [r7, #12]
}
 8008ba8:	bf00      	nop
 8008baa:	e7fe      	b.n	8008baa <pvPortMalloc+0x172>
	return pvReturn;
 8008bac:	69fb      	ldr	r3, [r7, #28]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3728      	adds	r7, #40	; 0x28
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	20004ba8 	.word	0x20004ba8
 8008bbc:	20004bbc 	.word	0x20004bbc
 8008bc0:	20004bac 	.word	0x20004bac
 8008bc4:	20004ba0 	.word	0x20004ba0
 8008bc8:	20004bb0 	.word	0x20004bb0
 8008bcc:	20004bb4 	.word	0x20004bb4

08008bd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b086      	sub	sp, #24
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d04d      	beq.n	8008c7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008be2:	2308      	movs	r3, #8
 8008be4:	425b      	negs	r3, r3
 8008be6:	697a      	ldr	r2, [r7, #20]
 8008be8:	4413      	add	r3, r2
 8008bea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	685a      	ldr	r2, [r3, #4]
 8008bf4:	4b24      	ldr	r3, [pc, #144]	; (8008c88 <vPortFree+0xb8>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4013      	ands	r3, r2
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d10a      	bne.n	8008c14 <vPortFree+0x44>
	__asm volatile
 8008bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c02:	f383 8811 	msr	BASEPRI, r3
 8008c06:	f3bf 8f6f 	isb	sy
 8008c0a:	f3bf 8f4f 	dsb	sy
 8008c0e:	60fb      	str	r3, [r7, #12]
}
 8008c10:	bf00      	nop
 8008c12:	e7fe      	b.n	8008c12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d00a      	beq.n	8008c32 <vPortFree+0x62>
	__asm volatile
 8008c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c20:	f383 8811 	msr	BASEPRI, r3
 8008c24:	f3bf 8f6f 	isb	sy
 8008c28:	f3bf 8f4f 	dsb	sy
 8008c2c:	60bb      	str	r3, [r7, #8]
}
 8008c2e:	bf00      	nop
 8008c30:	e7fe      	b.n	8008c30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	685a      	ldr	r2, [r3, #4]
 8008c36:	4b14      	ldr	r3, [pc, #80]	; (8008c88 <vPortFree+0xb8>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4013      	ands	r3, r2
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d01e      	beq.n	8008c7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d11a      	bne.n	8008c7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	685a      	ldr	r2, [r3, #4]
 8008c4c:	4b0e      	ldr	r3, [pc, #56]	; (8008c88 <vPortFree+0xb8>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	43db      	mvns	r3, r3
 8008c52:	401a      	ands	r2, r3
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c58:	f7fe fc8c 	bl	8007574 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	685a      	ldr	r2, [r3, #4]
 8008c60:	4b0a      	ldr	r3, [pc, #40]	; (8008c8c <vPortFree+0xbc>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4413      	add	r3, r2
 8008c66:	4a09      	ldr	r2, [pc, #36]	; (8008c8c <vPortFree+0xbc>)
 8008c68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c6a:	6938      	ldr	r0, [r7, #16]
 8008c6c:	f000 f874 	bl	8008d58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008c70:	4b07      	ldr	r3, [pc, #28]	; (8008c90 <vPortFree+0xc0>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	3301      	adds	r3, #1
 8008c76:	4a06      	ldr	r2, [pc, #24]	; (8008c90 <vPortFree+0xc0>)
 8008c78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008c7a:	f7fe fc89 	bl	8007590 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008c7e:	bf00      	nop
 8008c80:	3718      	adds	r7, #24
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	20004bbc 	.word	0x20004bbc
 8008c8c:	20004bac 	.word	0x20004bac
 8008c90:	20004bb8 	.word	0x20004bb8

08008c94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008c9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008c9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ca0:	4b27      	ldr	r3, [pc, #156]	; (8008d40 <prvHeapInit+0xac>)
 8008ca2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f003 0307 	and.w	r3, r3, #7
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00c      	beq.n	8008cc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	3307      	adds	r3, #7
 8008cb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f023 0307 	bic.w	r3, r3, #7
 8008cba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008cbc:	68ba      	ldr	r2, [r7, #8]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	1ad3      	subs	r3, r2, r3
 8008cc2:	4a1f      	ldr	r2, [pc, #124]	; (8008d40 <prvHeapInit+0xac>)
 8008cc4:	4413      	add	r3, r2
 8008cc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ccc:	4a1d      	ldr	r2, [pc, #116]	; (8008d44 <prvHeapInit+0xb0>)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008cd2:	4b1c      	ldr	r3, [pc, #112]	; (8008d44 <prvHeapInit+0xb0>)
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	4413      	add	r3, r2
 8008cde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ce0:	2208      	movs	r2, #8
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	1a9b      	subs	r3, r3, r2
 8008ce6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f023 0307 	bic.w	r3, r3, #7
 8008cee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	4a15      	ldr	r2, [pc, #84]	; (8008d48 <prvHeapInit+0xb4>)
 8008cf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008cf6:	4b14      	ldr	r3, [pc, #80]	; (8008d48 <prvHeapInit+0xb4>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008cfe:	4b12      	ldr	r3, [pc, #72]	; (8008d48 <prvHeapInit+0xb4>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2200      	movs	r2, #0
 8008d04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	1ad2      	subs	r2, r2, r3
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008d14:	4b0c      	ldr	r3, [pc, #48]	; (8008d48 <prvHeapInit+0xb4>)
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	4a0a      	ldr	r2, [pc, #40]	; (8008d4c <prvHeapInit+0xb8>)
 8008d22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	4a09      	ldr	r2, [pc, #36]	; (8008d50 <prvHeapInit+0xbc>)
 8008d2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008d2c:	4b09      	ldr	r3, [pc, #36]	; (8008d54 <prvHeapInit+0xc0>)
 8008d2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008d32:	601a      	str	r2, [r3, #0]
}
 8008d34:	bf00      	nop
 8008d36:	3714      	adds	r7, #20
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr
 8008d40:	20000fa0 	.word	0x20000fa0
 8008d44:	20004ba0 	.word	0x20004ba0
 8008d48:	20004ba8 	.word	0x20004ba8
 8008d4c:	20004bb0 	.word	0x20004bb0
 8008d50:	20004bac 	.word	0x20004bac
 8008d54:	20004bbc 	.word	0x20004bbc

08008d58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d60:	4b28      	ldr	r3, [pc, #160]	; (8008e04 <prvInsertBlockIntoFreeList+0xac>)
 8008d62:	60fb      	str	r3, [r7, #12]
 8008d64:	e002      	b.n	8008d6c <prvInsertBlockIntoFreeList+0x14>
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	60fb      	str	r3, [r7, #12]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d8f7      	bhi.n	8008d66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	68ba      	ldr	r2, [r7, #8]
 8008d80:	4413      	add	r3, r2
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d108      	bne.n	8008d9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	685a      	ldr	r2, [r3, #4]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	441a      	add	r2, r3
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	68ba      	ldr	r2, [r7, #8]
 8008da4:	441a      	add	r2, r3
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d118      	bne.n	8008de0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	4b15      	ldr	r3, [pc, #84]	; (8008e08 <prvInsertBlockIntoFreeList+0xb0>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d00d      	beq.n	8008dd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	685a      	ldr	r2, [r3, #4]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	441a      	add	r2, r3
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	601a      	str	r2, [r3, #0]
 8008dd4:	e008      	b.n	8008de8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008dd6:	4b0c      	ldr	r3, [pc, #48]	; (8008e08 <prvInsertBlockIntoFreeList+0xb0>)
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	601a      	str	r2, [r3, #0]
 8008dde:	e003      	b.n	8008de8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d002      	beq.n	8008df6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008df6:	bf00      	nop
 8008df8:	3714      	adds	r7, #20
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop
 8008e04:	20004ba0 	.word	0x20004ba0
 8008e08:	20004ba8 	.word	0x20004ba8

08008e0c <std>:
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	b510      	push	{r4, lr}
 8008e10:	4604      	mov	r4, r0
 8008e12:	e9c0 3300 	strd	r3, r3, [r0]
 8008e16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e1a:	6083      	str	r3, [r0, #8]
 8008e1c:	8181      	strh	r1, [r0, #12]
 8008e1e:	6643      	str	r3, [r0, #100]	; 0x64
 8008e20:	81c2      	strh	r2, [r0, #14]
 8008e22:	6183      	str	r3, [r0, #24]
 8008e24:	4619      	mov	r1, r3
 8008e26:	2208      	movs	r2, #8
 8008e28:	305c      	adds	r0, #92	; 0x5c
 8008e2a:	f000 f9f7 	bl	800921c <memset>
 8008e2e:	4b0d      	ldr	r3, [pc, #52]	; (8008e64 <std+0x58>)
 8008e30:	6263      	str	r3, [r4, #36]	; 0x24
 8008e32:	4b0d      	ldr	r3, [pc, #52]	; (8008e68 <std+0x5c>)
 8008e34:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e36:	4b0d      	ldr	r3, [pc, #52]	; (8008e6c <std+0x60>)
 8008e38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e3a:	4b0d      	ldr	r3, [pc, #52]	; (8008e70 <std+0x64>)
 8008e3c:	6323      	str	r3, [r4, #48]	; 0x30
 8008e3e:	4b0d      	ldr	r3, [pc, #52]	; (8008e74 <std+0x68>)
 8008e40:	6224      	str	r4, [r4, #32]
 8008e42:	429c      	cmp	r4, r3
 8008e44:	d006      	beq.n	8008e54 <std+0x48>
 8008e46:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008e4a:	4294      	cmp	r4, r2
 8008e4c:	d002      	beq.n	8008e54 <std+0x48>
 8008e4e:	33d0      	adds	r3, #208	; 0xd0
 8008e50:	429c      	cmp	r4, r3
 8008e52:	d105      	bne.n	8008e60 <std+0x54>
 8008e54:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e5c:	f000 ba56 	b.w	800930c <__retarget_lock_init_recursive>
 8008e60:	bd10      	pop	{r4, pc}
 8008e62:	bf00      	nop
 8008e64:	0800906d 	.word	0x0800906d
 8008e68:	0800908f 	.word	0x0800908f
 8008e6c:	080090c7 	.word	0x080090c7
 8008e70:	080090eb 	.word	0x080090eb
 8008e74:	20004bc0 	.word	0x20004bc0

08008e78 <stdio_exit_handler>:
 8008e78:	4a02      	ldr	r2, [pc, #8]	; (8008e84 <stdio_exit_handler+0xc>)
 8008e7a:	4903      	ldr	r1, [pc, #12]	; (8008e88 <stdio_exit_handler+0x10>)
 8008e7c:	4803      	ldr	r0, [pc, #12]	; (8008e8c <stdio_exit_handler+0x14>)
 8008e7e:	f000 b869 	b.w	8008f54 <_fwalk_sglue>
 8008e82:	bf00      	nop
 8008e84:	2000001c 	.word	0x2000001c
 8008e88:	08009bd5 	.word	0x08009bd5
 8008e8c:	20000028 	.word	0x20000028

08008e90 <cleanup_stdio>:
 8008e90:	6841      	ldr	r1, [r0, #4]
 8008e92:	4b0c      	ldr	r3, [pc, #48]	; (8008ec4 <cleanup_stdio+0x34>)
 8008e94:	4299      	cmp	r1, r3
 8008e96:	b510      	push	{r4, lr}
 8008e98:	4604      	mov	r4, r0
 8008e9a:	d001      	beq.n	8008ea0 <cleanup_stdio+0x10>
 8008e9c:	f000 fe9a 	bl	8009bd4 <_fflush_r>
 8008ea0:	68a1      	ldr	r1, [r4, #8]
 8008ea2:	4b09      	ldr	r3, [pc, #36]	; (8008ec8 <cleanup_stdio+0x38>)
 8008ea4:	4299      	cmp	r1, r3
 8008ea6:	d002      	beq.n	8008eae <cleanup_stdio+0x1e>
 8008ea8:	4620      	mov	r0, r4
 8008eaa:	f000 fe93 	bl	8009bd4 <_fflush_r>
 8008eae:	68e1      	ldr	r1, [r4, #12]
 8008eb0:	4b06      	ldr	r3, [pc, #24]	; (8008ecc <cleanup_stdio+0x3c>)
 8008eb2:	4299      	cmp	r1, r3
 8008eb4:	d004      	beq.n	8008ec0 <cleanup_stdio+0x30>
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ebc:	f000 be8a 	b.w	8009bd4 <_fflush_r>
 8008ec0:	bd10      	pop	{r4, pc}
 8008ec2:	bf00      	nop
 8008ec4:	20004bc0 	.word	0x20004bc0
 8008ec8:	20004c28 	.word	0x20004c28
 8008ecc:	20004c90 	.word	0x20004c90

08008ed0 <global_stdio_init.part.0>:
 8008ed0:	b510      	push	{r4, lr}
 8008ed2:	4b0b      	ldr	r3, [pc, #44]	; (8008f00 <global_stdio_init.part.0+0x30>)
 8008ed4:	4c0b      	ldr	r4, [pc, #44]	; (8008f04 <global_stdio_init.part.0+0x34>)
 8008ed6:	4a0c      	ldr	r2, [pc, #48]	; (8008f08 <global_stdio_init.part.0+0x38>)
 8008ed8:	601a      	str	r2, [r3, #0]
 8008eda:	4620      	mov	r0, r4
 8008edc:	2200      	movs	r2, #0
 8008ede:	2104      	movs	r1, #4
 8008ee0:	f7ff ff94 	bl	8008e0c <std>
 8008ee4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008ee8:	2201      	movs	r2, #1
 8008eea:	2109      	movs	r1, #9
 8008eec:	f7ff ff8e 	bl	8008e0c <std>
 8008ef0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008ef4:	2202      	movs	r2, #2
 8008ef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008efa:	2112      	movs	r1, #18
 8008efc:	f7ff bf86 	b.w	8008e0c <std>
 8008f00:	20004cf8 	.word	0x20004cf8
 8008f04:	20004bc0 	.word	0x20004bc0
 8008f08:	08008e79 	.word	0x08008e79

08008f0c <__sfp_lock_acquire>:
 8008f0c:	4801      	ldr	r0, [pc, #4]	; (8008f14 <__sfp_lock_acquire+0x8>)
 8008f0e:	f000 b9fe 	b.w	800930e <__retarget_lock_acquire_recursive>
 8008f12:	bf00      	nop
 8008f14:	20004d01 	.word	0x20004d01

08008f18 <__sfp_lock_release>:
 8008f18:	4801      	ldr	r0, [pc, #4]	; (8008f20 <__sfp_lock_release+0x8>)
 8008f1a:	f000 b9f9 	b.w	8009310 <__retarget_lock_release_recursive>
 8008f1e:	bf00      	nop
 8008f20:	20004d01 	.word	0x20004d01

08008f24 <__sinit>:
 8008f24:	b510      	push	{r4, lr}
 8008f26:	4604      	mov	r4, r0
 8008f28:	f7ff fff0 	bl	8008f0c <__sfp_lock_acquire>
 8008f2c:	6a23      	ldr	r3, [r4, #32]
 8008f2e:	b11b      	cbz	r3, 8008f38 <__sinit+0x14>
 8008f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f34:	f7ff bff0 	b.w	8008f18 <__sfp_lock_release>
 8008f38:	4b04      	ldr	r3, [pc, #16]	; (8008f4c <__sinit+0x28>)
 8008f3a:	6223      	str	r3, [r4, #32]
 8008f3c:	4b04      	ldr	r3, [pc, #16]	; (8008f50 <__sinit+0x2c>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d1f5      	bne.n	8008f30 <__sinit+0xc>
 8008f44:	f7ff ffc4 	bl	8008ed0 <global_stdio_init.part.0>
 8008f48:	e7f2      	b.n	8008f30 <__sinit+0xc>
 8008f4a:	bf00      	nop
 8008f4c:	08008e91 	.word	0x08008e91
 8008f50:	20004cf8 	.word	0x20004cf8

08008f54 <_fwalk_sglue>:
 8008f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f58:	4607      	mov	r7, r0
 8008f5a:	4688      	mov	r8, r1
 8008f5c:	4614      	mov	r4, r2
 8008f5e:	2600      	movs	r6, #0
 8008f60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f64:	f1b9 0901 	subs.w	r9, r9, #1
 8008f68:	d505      	bpl.n	8008f76 <_fwalk_sglue+0x22>
 8008f6a:	6824      	ldr	r4, [r4, #0]
 8008f6c:	2c00      	cmp	r4, #0
 8008f6e:	d1f7      	bne.n	8008f60 <_fwalk_sglue+0xc>
 8008f70:	4630      	mov	r0, r6
 8008f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f76:	89ab      	ldrh	r3, [r5, #12]
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d907      	bls.n	8008f8c <_fwalk_sglue+0x38>
 8008f7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f80:	3301      	adds	r3, #1
 8008f82:	d003      	beq.n	8008f8c <_fwalk_sglue+0x38>
 8008f84:	4629      	mov	r1, r5
 8008f86:	4638      	mov	r0, r7
 8008f88:	47c0      	blx	r8
 8008f8a:	4306      	orrs	r6, r0
 8008f8c:	3568      	adds	r5, #104	; 0x68
 8008f8e:	e7e9      	b.n	8008f64 <_fwalk_sglue+0x10>

08008f90 <iprintf>:
 8008f90:	b40f      	push	{r0, r1, r2, r3}
 8008f92:	b507      	push	{r0, r1, r2, lr}
 8008f94:	4906      	ldr	r1, [pc, #24]	; (8008fb0 <iprintf+0x20>)
 8008f96:	ab04      	add	r3, sp, #16
 8008f98:	6808      	ldr	r0, [r1, #0]
 8008f9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f9e:	6881      	ldr	r1, [r0, #8]
 8008fa0:	9301      	str	r3, [sp, #4]
 8008fa2:	f000 fae7 	bl	8009574 <_vfiprintf_r>
 8008fa6:	b003      	add	sp, #12
 8008fa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fac:	b004      	add	sp, #16
 8008fae:	4770      	bx	lr
 8008fb0:	20000074 	.word	0x20000074

08008fb4 <_puts_r>:
 8008fb4:	6a03      	ldr	r3, [r0, #32]
 8008fb6:	b570      	push	{r4, r5, r6, lr}
 8008fb8:	6884      	ldr	r4, [r0, #8]
 8008fba:	4605      	mov	r5, r0
 8008fbc:	460e      	mov	r6, r1
 8008fbe:	b90b      	cbnz	r3, 8008fc4 <_puts_r+0x10>
 8008fc0:	f7ff ffb0 	bl	8008f24 <__sinit>
 8008fc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fc6:	07db      	lsls	r3, r3, #31
 8008fc8:	d405      	bmi.n	8008fd6 <_puts_r+0x22>
 8008fca:	89a3      	ldrh	r3, [r4, #12]
 8008fcc:	0598      	lsls	r0, r3, #22
 8008fce:	d402      	bmi.n	8008fd6 <_puts_r+0x22>
 8008fd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fd2:	f000 f99c 	bl	800930e <__retarget_lock_acquire_recursive>
 8008fd6:	89a3      	ldrh	r3, [r4, #12]
 8008fd8:	0719      	lsls	r1, r3, #28
 8008fda:	d513      	bpl.n	8009004 <_puts_r+0x50>
 8008fdc:	6923      	ldr	r3, [r4, #16]
 8008fde:	b18b      	cbz	r3, 8009004 <_puts_r+0x50>
 8008fe0:	3e01      	subs	r6, #1
 8008fe2:	68a3      	ldr	r3, [r4, #8]
 8008fe4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008fe8:	3b01      	subs	r3, #1
 8008fea:	60a3      	str	r3, [r4, #8]
 8008fec:	b9e9      	cbnz	r1, 800902a <_puts_r+0x76>
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	da2e      	bge.n	8009050 <_puts_r+0x9c>
 8008ff2:	4622      	mov	r2, r4
 8008ff4:	210a      	movs	r1, #10
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	f000 f87b 	bl	80090f2 <__swbuf_r>
 8008ffc:	3001      	adds	r0, #1
 8008ffe:	d007      	beq.n	8009010 <_puts_r+0x5c>
 8009000:	250a      	movs	r5, #10
 8009002:	e007      	b.n	8009014 <_puts_r+0x60>
 8009004:	4621      	mov	r1, r4
 8009006:	4628      	mov	r0, r5
 8009008:	f000 f8b0 	bl	800916c <__swsetup_r>
 800900c:	2800      	cmp	r0, #0
 800900e:	d0e7      	beq.n	8008fe0 <_puts_r+0x2c>
 8009010:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009014:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009016:	07da      	lsls	r2, r3, #31
 8009018:	d405      	bmi.n	8009026 <_puts_r+0x72>
 800901a:	89a3      	ldrh	r3, [r4, #12]
 800901c:	059b      	lsls	r3, r3, #22
 800901e:	d402      	bmi.n	8009026 <_puts_r+0x72>
 8009020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009022:	f000 f975 	bl	8009310 <__retarget_lock_release_recursive>
 8009026:	4628      	mov	r0, r5
 8009028:	bd70      	pop	{r4, r5, r6, pc}
 800902a:	2b00      	cmp	r3, #0
 800902c:	da04      	bge.n	8009038 <_puts_r+0x84>
 800902e:	69a2      	ldr	r2, [r4, #24]
 8009030:	429a      	cmp	r2, r3
 8009032:	dc06      	bgt.n	8009042 <_puts_r+0x8e>
 8009034:	290a      	cmp	r1, #10
 8009036:	d004      	beq.n	8009042 <_puts_r+0x8e>
 8009038:	6823      	ldr	r3, [r4, #0]
 800903a:	1c5a      	adds	r2, r3, #1
 800903c:	6022      	str	r2, [r4, #0]
 800903e:	7019      	strb	r1, [r3, #0]
 8009040:	e7cf      	b.n	8008fe2 <_puts_r+0x2e>
 8009042:	4622      	mov	r2, r4
 8009044:	4628      	mov	r0, r5
 8009046:	f000 f854 	bl	80090f2 <__swbuf_r>
 800904a:	3001      	adds	r0, #1
 800904c:	d1c9      	bne.n	8008fe2 <_puts_r+0x2e>
 800904e:	e7df      	b.n	8009010 <_puts_r+0x5c>
 8009050:	6823      	ldr	r3, [r4, #0]
 8009052:	250a      	movs	r5, #10
 8009054:	1c5a      	adds	r2, r3, #1
 8009056:	6022      	str	r2, [r4, #0]
 8009058:	701d      	strb	r5, [r3, #0]
 800905a:	e7db      	b.n	8009014 <_puts_r+0x60>

0800905c <puts>:
 800905c:	4b02      	ldr	r3, [pc, #8]	; (8009068 <puts+0xc>)
 800905e:	4601      	mov	r1, r0
 8009060:	6818      	ldr	r0, [r3, #0]
 8009062:	f7ff bfa7 	b.w	8008fb4 <_puts_r>
 8009066:	bf00      	nop
 8009068:	20000074 	.word	0x20000074

0800906c <__sread>:
 800906c:	b510      	push	{r4, lr}
 800906e:	460c      	mov	r4, r1
 8009070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009074:	f000 f8fc 	bl	8009270 <_read_r>
 8009078:	2800      	cmp	r0, #0
 800907a:	bfab      	itete	ge
 800907c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800907e:	89a3      	ldrhlt	r3, [r4, #12]
 8009080:	181b      	addge	r3, r3, r0
 8009082:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009086:	bfac      	ite	ge
 8009088:	6563      	strge	r3, [r4, #84]	; 0x54
 800908a:	81a3      	strhlt	r3, [r4, #12]
 800908c:	bd10      	pop	{r4, pc}

0800908e <__swrite>:
 800908e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009092:	461f      	mov	r7, r3
 8009094:	898b      	ldrh	r3, [r1, #12]
 8009096:	05db      	lsls	r3, r3, #23
 8009098:	4605      	mov	r5, r0
 800909a:	460c      	mov	r4, r1
 800909c:	4616      	mov	r6, r2
 800909e:	d505      	bpl.n	80090ac <__swrite+0x1e>
 80090a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090a4:	2302      	movs	r3, #2
 80090a6:	2200      	movs	r2, #0
 80090a8:	f000 f8d0 	bl	800924c <_lseek_r>
 80090ac:	89a3      	ldrh	r3, [r4, #12]
 80090ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090b6:	81a3      	strh	r3, [r4, #12]
 80090b8:	4632      	mov	r2, r6
 80090ba:	463b      	mov	r3, r7
 80090bc:	4628      	mov	r0, r5
 80090be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090c2:	f000 b8e7 	b.w	8009294 <_write_r>

080090c6 <__sseek>:
 80090c6:	b510      	push	{r4, lr}
 80090c8:	460c      	mov	r4, r1
 80090ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ce:	f000 f8bd 	bl	800924c <_lseek_r>
 80090d2:	1c43      	adds	r3, r0, #1
 80090d4:	89a3      	ldrh	r3, [r4, #12]
 80090d6:	bf15      	itete	ne
 80090d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80090da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80090de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80090e2:	81a3      	strheq	r3, [r4, #12]
 80090e4:	bf18      	it	ne
 80090e6:	81a3      	strhne	r3, [r4, #12]
 80090e8:	bd10      	pop	{r4, pc}

080090ea <__sclose>:
 80090ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ee:	f000 b89d 	b.w	800922c <_close_r>

080090f2 <__swbuf_r>:
 80090f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090f4:	460e      	mov	r6, r1
 80090f6:	4614      	mov	r4, r2
 80090f8:	4605      	mov	r5, r0
 80090fa:	b118      	cbz	r0, 8009104 <__swbuf_r+0x12>
 80090fc:	6a03      	ldr	r3, [r0, #32]
 80090fe:	b90b      	cbnz	r3, 8009104 <__swbuf_r+0x12>
 8009100:	f7ff ff10 	bl	8008f24 <__sinit>
 8009104:	69a3      	ldr	r3, [r4, #24]
 8009106:	60a3      	str	r3, [r4, #8]
 8009108:	89a3      	ldrh	r3, [r4, #12]
 800910a:	071a      	lsls	r2, r3, #28
 800910c:	d525      	bpl.n	800915a <__swbuf_r+0x68>
 800910e:	6923      	ldr	r3, [r4, #16]
 8009110:	b31b      	cbz	r3, 800915a <__swbuf_r+0x68>
 8009112:	6823      	ldr	r3, [r4, #0]
 8009114:	6922      	ldr	r2, [r4, #16]
 8009116:	1a98      	subs	r0, r3, r2
 8009118:	6963      	ldr	r3, [r4, #20]
 800911a:	b2f6      	uxtb	r6, r6
 800911c:	4283      	cmp	r3, r0
 800911e:	4637      	mov	r7, r6
 8009120:	dc04      	bgt.n	800912c <__swbuf_r+0x3a>
 8009122:	4621      	mov	r1, r4
 8009124:	4628      	mov	r0, r5
 8009126:	f000 fd55 	bl	8009bd4 <_fflush_r>
 800912a:	b9e0      	cbnz	r0, 8009166 <__swbuf_r+0x74>
 800912c:	68a3      	ldr	r3, [r4, #8]
 800912e:	3b01      	subs	r3, #1
 8009130:	60a3      	str	r3, [r4, #8]
 8009132:	6823      	ldr	r3, [r4, #0]
 8009134:	1c5a      	adds	r2, r3, #1
 8009136:	6022      	str	r2, [r4, #0]
 8009138:	701e      	strb	r6, [r3, #0]
 800913a:	6962      	ldr	r2, [r4, #20]
 800913c:	1c43      	adds	r3, r0, #1
 800913e:	429a      	cmp	r2, r3
 8009140:	d004      	beq.n	800914c <__swbuf_r+0x5a>
 8009142:	89a3      	ldrh	r3, [r4, #12]
 8009144:	07db      	lsls	r3, r3, #31
 8009146:	d506      	bpl.n	8009156 <__swbuf_r+0x64>
 8009148:	2e0a      	cmp	r6, #10
 800914a:	d104      	bne.n	8009156 <__swbuf_r+0x64>
 800914c:	4621      	mov	r1, r4
 800914e:	4628      	mov	r0, r5
 8009150:	f000 fd40 	bl	8009bd4 <_fflush_r>
 8009154:	b938      	cbnz	r0, 8009166 <__swbuf_r+0x74>
 8009156:	4638      	mov	r0, r7
 8009158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800915a:	4621      	mov	r1, r4
 800915c:	4628      	mov	r0, r5
 800915e:	f000 f805 	bl	800916c <__swsetup_r>
 8009162:	2800      	cmp	r0, #0
 8009164:	d0d5      	beq.n	8009112 <__swbuf_r+0x20>
 8009166:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800916a:	e7f4      	b.n	8009156 <__swbuf_r+0x64>

0800916c <__swsetup_r>:
 800916c:	b538      	push	{r3, r4, r5, lr}
 800916e:	4b2a      	ldr	r3, [pc, #168]	; (8009218 <__swsetup_r+0xac>)
 8009170:	4605      	mov	r5, r0
 8009172:	6818      	ldr	r0, [r3, #0]
 8009174:	460c      	mov	r4, r1
 8009176:	b118      	cbz	r0, 8009180 <__swsetup_r+0x14>
 8009178:	6a03      	ldr	r3, [r0, #32]
 800917a:	b90b      	cbnz	r3, 8009180 <__swsetup_r+0x14>
 800917c:	f7ff fed2 	bl	8008f24 <__sinit>
 8009180:	89a3      	ldrh	r3, [r4, #12]
 8009182:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009186:	0718      	lsls	r0, r3, #28
 8009188:	d422      	bmi.n	80091d0 <__swsetup_r+0x64>
 800918a:	06d9      	lsls	r1, r3, #27
 800918c:	d407      	bmi.n	800919e <__swsetup_r+0x32>
 800918e:	2309      	movs	r3, #9
 8009190:	602b      	str	r3, [r5, #0]
 8009192:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009196:	81a3      	strh	r3, [r4, #12]
 8009198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800919c:	e034      	b.n	8009208 <__swsetup_r+0x9c>
 800919e:	0758      	lsls	r0, r3, #29
 80091a0:	d512      	bpl.n	80091c8 <__swsetup_r+0x5c>
 80091a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091a4:	b141      	cbz	r1, 80091b8 <__swsetup_r+0x4c>
 80091a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091aa:	4299      	cmp	r1, r3
 80091ac:	d002      	beq.n	80091b4 <__swsetup_r+0x48>
 80091ae:	4628      	mov	r0, r5
 80091b0:	f000 f8be 	bl	8009330 <_free_r>
 80091b4:	2300      	movs	r3, #0
 80091b6:	6363      	str	r3, [r4, #52]	; 0x34
 80091b8:	89a3      	ldrh	r3, [r4, #12]
 80091ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80091be:	81a3      	strh	r3, [r4, #12]
 80091c0:	2300      	movs	r3, #0
 80091c2:	6063      	str	r3, [r4, #4]
 80091c4:	6923      	ldr	r3, [r4, #16]
 80091c6:	6023      	str	r3, [r4, #0]
 80091c8:	89a3      	ldrh	r3, [r4, #12]
 80091ca:	f043 0308 	orr.w	r3, r3, #8
 80091ce:	81a3      	strh	r3, [r4, #12]
 80091d0:	6923      	ldr	r3, [r4, #16]
 80091d2:	b94b      	cbnz	r3, 80091e8 <__swsetup_r+0x7c>
 80091d4:	89a3      	ldrh	r3, [r4, #12]
 80091d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80091da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091de:	d003      	beq.n	80091e8 <__swsetup_r+0x7c>
 80091e0:	4621      	mov	r1, r4
 80091e2:	4628      	mov	r0, r5
 80091e4:	f000 fd44 	bl	8009c70 <__smakebuf_r>
 80091e8:	89a0      	ldrh	r0, [r4, #12]
 80091ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091ee:	f010 0301 	ands.w	r3, r0, #1
 80091f2:	d00a      	beq.n	800920a <__swsetup_r+0x9e>
 80091f4:	2300      	movs	r3, #0
 80091f6:	60a3      	str	r3, [r4, #8]
 80091f8:	6963      	ldr	r3, [r4, #20]
 80091fa:	425b      	negs	r3, r3
 80091fc:	61a3      	str	r3, [r4, #24]
 80091fe:	6923      	ldr	r3, [r4, #16]
 8009200:	b943      	cbnz	r3, 8009214 <__swsetup_r+0xa8>
 8009202:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009206:	d1c4      	bne.n	8009192 <__swsetup_r+0x26>
 8009208:	bd38      	pop	{r3, r4, r5, pc}
 800920a:	0781      	lsls	r1, r0, #30
 800920c:	bf58      	it	pl
 800920e:	6963      	ldrpl	r3, [r4, #20]
 8009210:	60a3      	str	r3, [r4, #8]
 8009212:	e7f4      	b.n	80091fe <__swsetup_r+0x92>
 8009214:	2000      	movs	r0, #0
 8009216:	e7f7      	b.n	8009208 <__swsetup_r+0x9c>
 8009218:	20000074 	.word	0x20000074

0800921c <memset>:
 800921c:	4402      	add	r2, r0
 800921e:	4603      	mov	r3, r0
 8009220:	4293      	cmp	r3, r2
 8009222:	d100      	bne.n	8009226 <memset+0xa>
 8009224:	4770      	bx	lr
 8009226:	f803 1b01 	strb.w	r1, [r3], #1
 800922a:	e7f9      	b.n	8009220 <memset+0x4>

0800922c <_close_r>:
 800922c:	b538      	push	{r3, r4, r5, lr}
 800922e:	4d06      	ldr	r5, [pc, #24]	; (8009248 <_close_r+0x1c>)
 8009230:	2300      	movs	r3, #0
 8009232:	4604      	mov	r4, r0
 8009234:	4608      	mov	r0, r1
 8009236:	602b      	str	r3, [r5, #0]
 8009238:	f7f8 feed 	bl	8002016 <_close>
 800923c:	1c43      	adds	r3, r0, #1
 800923e:	d102      	bne.n	8009246 <_close_r+0x1a>
 8009240:	682b      	ldr	r3, [r5, #0]
 8009242:	b103      	cbz	r3, 8009246 <_close_r+0x1a>
 8009244:	6023      	str	r3, [r4, #0]
 8009246:	bd38      	pop	{r3, r4, r5, pc}
 8009248:	20004cfc 	.word	0x20004cfc

0800924c <_lseek_r>:
 800924c:	b538      	push	{r3, r4, r5, lr}
 800924e:	4d07      	ldr	r5, [pc, #28]	; (800926c <_lseek_r+0x20>)
 8009250:	4604      	mov	r4, r0
 8009252:	4608      	mov	r0, r1
 8009254:	4611      	mov	r1, r2
 8009256:	2200      	movs	r2, #0
 8009258:	602a      	str	r2, [r5, #0]
 800925a:	461a      	mov	r2, r3
 800925c:	f7f8 ff02 	bl	8002064 <_lseek>
 8009260:	1c43      	adds	r3, r0, #1
 8009262:	d102      	bne.n	800926a <_lseek_r+0x1e>
 8009264:	682b      	ldr	r3, [r5, #0]
 8009266:	b103      	cbz	r3, 800926a <_lseek_r+0x1e>
 8009268:	6023      	str	r3, [r4, #0]
 800926a:	bd38      	pop	{r3, r4, r5, pc}
 800926c:	20004cfc 	.word	0x20004cfc

08009270 <_read_r>:
 8009270:	b538      	push	{r3, r4, r5, lr}
 8009272:	4d07      	ldr	r5, [pc, #28]	; (8009290 <_read_r+0x20>)
 8009274:	4604      	mov	r4, r0
 8009276:	4608      	mov	r0, r1
 8009278:	4611      	mov	r1, r2
 800927a:	2200      	movs	r2, #0
 800927c:	602a      	str	r2, [r5, #0]
 800927e:	461a      	mov	r2, r3
 8009280:	f7f8 fe90 	bl	8001fa4 <_read>
 8009284:	1c43      	adds	r3, r0, #1
 8009286:	d102      	bne.n	800928e <_read_r+0x1e>
 8009288:	682b      	ldr	r3, [r5, #0]
 800928a:	b103      	cbz	r3, 800928e <_read_r+0x1e>
 800928c:	6023      	str	r3, [r4, #0]
 800928e:	bd38      	pop	{r3, r4, r5, pc}
 8009290:	20004cfc 	.word	0x20004cfc

08009294 <_write_r>:
 8009294:	b538      	push	{r3, r4, r5, lr}
 8009296:	4d07      	ldr	r5, [pc, #28]	; (80092b4 <_write_r+0x20>)
 8009298:	4604      	mov	r4, r0
 800929a:	4608      	mov	r0, r1
 800929c:	4611      	mov	r1, r2
 800929e:	2200      	movs	r2, #0
 80092a0:	602a      	str	r2, [r5, #0]
 80092a2:	461a      	mov	r2, r3
 80092a4:	f7f8 fe9b 	bl	8001fde <_write>
 80092a8:	1c43      	adds	r3, r0, #1
 80092aa:	d102      	bne.n	80092b2 <_write_r+0x1e>
 80092ac:	682b      	ldr	r3, [r5, #0]
 80092ae:	b103      	cbz	r3, 80092b2 <_write_r+0x1e>
 80092b0:	6023      	str	r3, [r4, #0]
 80092b2:	bd38      	pop	{r3, r4, r5, pc}
 80092b4:	20004cfc 	.word	0x20004cfc

080092b8 <__errno>:
 80092b8:	4b01      	ldr	r3, [pc, #4]	; (80092c0 <__errno+0x8>)
 80092ba:	6818      	ldr	r0, [r3, #0]
 80092bc:	4770      	bx	lr
 80092be:	bf00      	nop
 80092c0:	20000074 	.word	0x20000074

080092c4 <__libc_init_array>:
 80092c4:	b570      	push	{r4, r5, r6, lr}
 80092c6:	4d0d      	ldr	r5, [pc, #52]	; (80092fc <__libc_init_array+0x38>)
 80092c8:	4c0d      	ldr	r4, [pc, #52]	; (8009300 <__libc_init_array+0x3c>)
 80092ca:	1b64      	subs	r4, r4, r5
 80092cc:	10a4      	asrs	r4, r4, #2
 80092ce:	2600      	movs	r6, #0
 80092d0:	42a6      	cmp	r6, r4
 80092d2:	d109      	bne.n	80092e8 <__libc_init_array+0x24>
 80092d4:	4d0b      	ldr	r5, [pc, #44]	; (8009304 <__libc_init_array+0x40>)
 80092d6:	4c0c      	ldr	r4, [pc, #48]	; (8009308 <__libc_init_array+0x44>)
 80092d8:	f000 fd38 	bl	8009d4c <_init>
 80092dc:	1b64      	subs	r4, r4, r5
 80092de:	10a4      	asrs	r4, r4, #2
 80092e0:	2600      	movs	r6, #0
 80092e2:	42a6      	cmp	r6, r4
 80092e4:	d105      	bne.n	80092f2 <__libc_init_array+0x2e>
 80092e6:	bd70      	pop	{r4, r5, r6, pc}
 80092e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80092ec:	4798      	blx	r3
 80092ee:	3601      	adds	r6, #1
 80092f0:	e7ee      	b.n	80092d0 <__libc_init_array+0xc>
 80092f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80092f6:	4798      	blx	r3
 80092f8:	3601      	adds	r6, #1
 80092fa:	e7f2      	b.n	80092e2 <__libc_init_array+0x1e>
 80092fc:	0800a09c 	.word	0x0800a09c
 8009300:	0800a09c 	.word	0x0800a09c
 8009304:	0800a09c 	.word	0x0800a09c
 8009308:	0800a0a0 	.word	0x0800a0a0

0800930c <__retarget_lock_init_recursive>:
 800930c:	4770      	bx	lr

0800930e <__retarget_lock_acquire_recursive>:
 800930e:	4770      	bx	lr

08009310 <__retarget_lock_release_recursive>:
 8009310:	4770      	bx	lr

08009312 <memcpy>:
 8009312:	440a      	add	r2, r1
 8009314:	4291      	cmp	r1, r2
 8009316:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800931a:	d100      	bne.n	800931e <memcpy+0xc>
 800931c:	4770      	bx	lr
 800931e:	b510      	push	{r4, lr}
 8009320:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009324:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009328:	4291      	cmp	r1, r2
 800932a:	d1f9      	bne.n	8009320 <memcpy+0xe>
 800932c:	bd10      	pop	{r4, pc}
	...

08009330 <_free_r>:
 8009330:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009332:	2900      	cmp	r1, #0
 8009334:	d044      	beq.n	80093c0 <_free_r+0x90>
 8009336:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800933a:	9001      	str	r0, [sp, #4]
 800933c:	2b00      	cmp	r3, #0
 800933e:	f1a1 0404 	sub.w	r4, r1, #4
 8009342:	bfb8      	it	lt
 8009344:	18e4      	addlt	r4, r4, r3
 8009346:	f000 f8df 	bl	8009508 <__malloc_lock>
 800934a:	4a1e      	ldr	r2, [pc, #120]	; (80093c4 <_free_r+0x94>)
 800934c:	9801      	ldr	r0, [sp, #4]
 800934e:	6813      	ldr	r3, [r2, #0]
 8009350:	b933      	cbnz	r3, 8009360 <_free_r+0x30>
 8009352:	6063      	str	r3, [r4, #4]
 8009354:	6014      	str	r4, [r2, #0]
 8009356:	b003      	add	sp, #12
 8009358:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800935c:	f000 b8da 	b.w	8009514 <__malloc_unlock>
 8009360:	42a3      	cmp	r3, r4
 8009362:	d908      	bls.n	8009376 <_free_r+0x46>
 8009364:	6825      	ldr	r5, [r4, #0]
 8009366:	1961      	adds	r1, r4, r5
 8009368:	428b      	cmp	r3, r1
 800936a:	bf01      	itttt	eq
 800936c:	6819      	ldreq	r1, [r3, #0]
 800936e:	685b      	ldreq	r3, [r3, #4]
 8009370:	1949      	addeq	r1, r1, r5
 8009372:	6021      	streq	r1, [r4, #0]
 8009374:	e7ed      	b.n	8009352 <_free_r+0x22>
 8009376:	461a      	mov	r2, r3
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	b10b      	cbz	r3, 8009380 <_free_r+0x50>
 800937c:	42a3      	cmp	r3, r4
 800937e:	d9fa      	bls.n	8009376 <_free_r+0x46>
 8009380:	6811      	ldr	r1, [r2, #0]
 8009382:	1855      	adds	r5, r2, r1
 8009384:	42a5      	cmp	r5, r4
 8009386:	d10b      	bne.n	80093a0 <_free_r+0x70>
 8009388:	6824      	ldr	r4, [r4, #0]
 800938a:	4421      	add	r1, r4
 800938c:	1854      	adds	r4, r2, r1
 800938e:	42a3      	cmp	r3, r4
 8009390:	6011      	str	r1, [r2, #0]
 8009392:	d1e0      	bne.n	8009356 <_free_r+0x26>
 8009394:	681c      	ldr	r4, [r3, #0]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	6053      	str	r3, [r2, #4]
 800939a:	440c      	add	r4, r1
 800939c:	6014      	str	r4, [r2, #0]
 800939e:	e7da      	b.n	8009356 <_free_r+0x26>
 80093a0:	d902      	bls.n	80093a8 <_free_r+0x78>
 80093a2:	230c      	movs	r3, #12
 80093a4:	6003      	str	r3, [r0, #0]
 80093a6:	e7d6      	b.n	8009356 <_free_r+0x26>
 80093a8:	6825      	ldr	r5, [r4, #0]
 80093aa:	1961      	adds	r1, r4, r5
 80093ac:	428b      	cmp	r3, r1
 80093ae:	bf04      	itt	eq
 80093b0:	6819      	ldreq	r1, [r3, #0]
 80093b2:	685b      	ldreq	r3, [r3, #4]
 80093b4:	6063      	str	r3, [r4, #4]
 80093b6:	bf04      	itt	eq
 80093b8:	1949      	addeq	r1, r1, r5
 80093ba:	6021      	streq	r1, [r4, #0]
 80093bc:	6054      	str	r4, [r2, #4]
 80093be:	e7ca      	b.n	8009356 <_free_r+0x26>
 80093c0:	b003      	add	sp, #12
 80093c2:	bd30      	pop	{r4, r5, pc}
 80093c4:	20004d04 	.word	0x20004d04

080093c8 <sbrk_aligned>:
 80093c8:	b570      	push	{r4, r5, r6, lr}
 80093ca:	4e0e      	ldr	r6, [pc, #56]	; (8009404 <sbrk_aligned+0x3c>)
 80093cc:	460c      	mov	r4, r1
 80093ce:	6831      	ldr	r1, [r6, #0]
 80093d0:	4605      	mov	r5, r0
 80093d2:	b911      	cbnz	r1, 80093da <sbrk_aligned+0x12>
 80093d4:	f000 fcaa 	bl	8009d2c <_sbrk_r>
 80093d8:	6030      	str	r0, [r6, #0]
 80093da:	4621      	mov	r1, r4
 80093dc:	4628      	mov	r0, r5
 80093de:	f000 fca5 	bl	8009d2c <_sbrk_r>
 80093e2:	1c43      	adds	r3, r0, #1
 80093e4:	d00a      	beq.n	80093fc <sbrk_aligned+0x34>
 80093e6:	1cc4      	adds	r4, r0, #3
 80093e8:	f024 0403 	bic.w	r4, r4, #3
 80093ec:	42a0      	cmp	r0, r4
 80093ee:	d007      	beq.n	8009400 <sbrk_aligned+0x38>
 80093f0:	1a21      	subs	r1, r4, r0
 80093f2:	4628      	mov	r0, r5
 80093f4:	f000 fc9a 	bl	8009d2c <_sbrk_r>
 80093f8:	3001      	adds	r0, #1
 80093fa:	d101      	bne.n	8009400 <sbrk_aligned+0x38>
 80093fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009400:	4620      	mov	r0, r4
 8009402:	bd70      	pop	{r4, r5, r6, pc}
 8009404:	20004d08 	.word	0x20004d08

08009408 <_malloc_r>:
 8009408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800940c:	1ccd      	adds	r5, r1, #3
 800940e:	f025 0503 	bic.w	r5, r5, #3
 8009412:	3508      	adds	r5, #8
 8009414:	2d0c      	cmp	r5, #12
 8009416:	bf38      	it	cc
 8009418:	250c      	movcc	r5, #12
 800941a:	2d00      	cmp	r5, #0
 800941c:	4607      	mov	r7, r0
 800941e:	db01      	blt.n	8009424 <_malloc_r+0x1c>
 8009420:	42a9      	cmp	r1, r5
 8009422:	d905      	bls.n	8009430 <_malloc_r+0x28>
 8009424:	230c      	movs	r3, #12
 8009426:	603b      	str	r3, [r7, #0]
 8009428:	2600      	movs	r6, #0
 800942a:	4630      	mov	r0, r6
 800942c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009430:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009504 <_malloc_r+0xfc>
 8009434:	f000 f868 	bl	8009508 <__malloc_lock>
 8009438:	f8d8 3000 	ldr.w	r3, [r8]
 800943c:	461c      	mov	r4, r3
 800943e:	bb5c      	cbnz	r4, 8009498 <_malloc_r+0x90>
 8009440:	4629      	mov	r1, r5
 8009442:	4638      	mov	r0, r7
 8009444:	f7ff ffc0 	bl	80093c8 <sbrk_aligned>
 8009448:	1c43      	adds	r3, r0, #1
 800944a:	4604      	mov	r4, r0
 800944c:	d155      	bne.n	80094fa <_malloc_r+0xf2>
 800944e:	f8d8 4000 	ldr.w	r4, [r8]
 8009452:	4626      	mov	r6, r4
 8009454:	2e00      	cmp	r6, #0
 8009456:	d145      	bne.n	80094e4 <_malloc_r+0xdc>
 8009458:	2c00      	cmp	r4, #0
 800945a:	d048      	beq.n	80094ee <_malloc_r+0xe6>
 800945c:	6823      	ldr	r3, [r4, #0]
 800945e:	4631      	mov	r1, r6
 8009460:	4638      	mov	r0, r7
 8009462:	eb04 0903 	add.w	r9, r4, r3
 8009466:	f000 fc61 	bl	8009d2c <_sbrk_r>
 800946a:	4581      	cmp	r9, r0
 800946c:	d13f      	bne.n	80094ee <_malloc_r+0xe6>
 800946e:	6821      	ldr	r1, [r4, #0]
 8009470:	1a6d      	subs	r5, r5, r1
 8009472:	4629      	mov	r1, r5
 8009474:	4638      	mov	r0, r7
 8009476:	f7ff ffa7 	bl	80093c8 <sbrk_aligned>
 800947a:	3001      	adds	r0, #1
 800947c:	d037      	beq.n	80094ee <_malloc_r+0xe6>
 800947e:	6823      	ldr	r3, [r4, #0]
 8009480:	442b      	add	r3, r5
 8009482:	6023      	str	r3, [r4, #0]
 8009484:	f8d8 3000 	ldr.w	r3, [r8]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d038      	beq.n	80094fe <_malloc_r+0xf6>
 800948c:	685a      	ldr	r2, [r3, #4]
 800948e:	42a2      	cmp	r2, r4
 8009490:	d12b      	bne.n	80094ea <_malloc_r+0xe2>
 8009492:	2200      	movs	r2, #0
 8009494:	605a      	str	r2, [r3, #4]
 8009496:	e00f      	b.n	80094b8 <_malloc_r+0xb0>
 8009498:	6822      	ldr	r2, [r4, #0]
 800949a:	1b52      	subs	r2, r2, r5
 800949c:	d41f      	bmi.n	80094de <_malloc_r+0xd6>
 800949e:	2a0b      	cmp	r2, #11
 80094a0:	d917      	bls.n	80094d2 <_malloc_r+0xca>
 80094a2:	1961      	adds	r1, r4, r5
 80094a4:	42a3      	cmp	r3, r4
 80094a6:	6025      	str	r5, [r4, #0]
 80094a8:	bf18      	it	ne
 80094aa:	6059      	strne	r1, [r3, #4]
 80094ac:	6863      	ldr	r3, [r4, #4]
 80094ae:	bf08      	it	eq
 80094b0:	f8c8 1000 	streq.w	r1, [r8]
 80094b4:	5162      	str	r2, [r4, r5]
 80094b6:	604b      	str	r3, [r1, #4]
 80094b8:	4638      	mov	r0, r7
 80094ba:	f104 060b 	add.w	r6, r4, #11
 80094be:	f000 f829 	bl	8009514 <__malloc_unlock>
 80094c2:	f026 0607 	bic.w	r6, r6, #7
 80094c6:	1d23      	adds	r3, r4, #4
 80094c8:	1af2      	subs	r2, r6, r3
 80094ca:	d0ae      	beq.n	800942a <_malloc_r+0x22>
 80094cc:	1b9b      	subs	r3, r3, r6
 80094ce:	50a3      	str	r3, [r4, r2]
 80094d0:	e7ab      	b.n	800942a <_malloc_r+0x22>
 80094d2:	42a3      	cmp	r3, r4
 80094d4:	6862      	ldr	r2, [r4, #4]
 80094d6:	d1dd      	bne.n	8009494 <_malloc_r+0x8c>
 80094d8:	f8c8 2000 	str.w	r2, [r8]
 80094dc:	e7ec      	b.n	80094b8 <_malloc_r+0xb0>
 80094de:	4623      	mov	r3, r4
 80094e0:	6864      	ldr	r4, [r4, #4]
 80094e2:	e7ac      	b.n	800943e <_malloc_r+0x36>
 80094e4:	4634      	mov	r4, r6
 80094e6:	6876      	ldr	r6, [r6, #4]
 80094e8:	e7b4      	b.n	8009454 <_malloc_r+0x4c>
 80094ea:	4613      	mov	r3, r2
 80094ec:	e7cc      	b.n	8009488 <_malloc_r+0x80>
 80094ee:	230c      	movs	r3, #12
 80094f0:	603b      	str	r3, [r7, #0]
 80094f2:	4638      	mov	r0, r7
 80094f4:	f000 f80e 	bl	8009514 <__malloc_unlock>
 80094f8:	e797      	b.n	800942a <_malloc_r+0x22>
 80094fa:	6025      	str	r5, [r4, #0]
 80094fc:	e7dc      	b.n	80094b8 <_malloc_r+0xb0>
 80094fe:	605b      	str	r3, [r3, #4]
 8009500:	deff      	udf	#255	; 0xff
 8009502:	bf00      	nop
 8009504:	20004d04 	.word	0x20004d04

08009508 <__malloc_lock>:
 8009508:	4801      	ldr	r0, [pc, #4]	; (8009510 <__malloc_lock+0x8>)
 800950a:	f7ff bf00 	b.w	800930e <__retarget_lock_acquire_recursive>
 800950e:	bf00      	nop
 8009510:	20004d00 	.word	0x20004d00

08009514 <__malloc_unlock>:
 8009514:	4801      	ldr	r0, [pc, #4]	; (800951c <__malloc_unlock+0x8>)
 8009516:	f7ff befb 	b.w	8009310 <__retarget_lock_release_recursive>
 800951a:	bf00      	nop
 800951c:	20004d00 	.word	0x20004d00

08009520 <__sfputc_r>:
 8009520:	6893      	ldr	r3, [r2, #8]
 8009522:	3b01      	subs	r3, #1
 8009524:	2b00      	cmp	r3, #0
 8009526:	b410      	push	{r4}
 8009528:	6093      	str	r3, [r2, #8]
 800952a:	da08      	bge.n	800953e <__sfputc_r+0x1e>
 800952c:	6994      	ldr	r4, [r2, #24]
 800952e:	42a3      	cmp	r3, r4
 8009530:	db01      	blt.n	8009536 <__sfputc_r+0x16>
 8009532:	290a      	cmp	r1, #10
 8009534:	d103      	bne.n	800953e <__sfputc_r+0x1e>
 8009536:	f85d 4b04 	ldr.w	r4, [sp], #4
 800953a:	f7ff bdda 	b.w	80090f2 <__swbuf_r>
 800953e:	6813      	ldr	r3, [r2, #0]
 8009540:	1c58      	adds	r0, r3, #1
 8009542:	6010      	str	r0, [r2, #0]
 8009544:	7019      	strb	r1, [r3, #0]
 8009546:	4608      	mov	r0, r1
 8009548:	f85d 4b04 	ldr.w	r4, [sp], #4
 800954c:	4770      	bx	lr

0800954e <__sfputs_r>:
 800954e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009550:	4606      	mov	r6, r0
 8009552:	460f      	mov	r7, r1
 8009554:	4614      	mov	r4, r2
 8009556:	18d5      	adds	r5, r2, r3
 8009558:	42ac      	cmp	r4, r5
 800955a:	d101      	bne.n	8009560 <__sfputs_r+0x12>
 800955c:	2000      	movs	r0, #0
 800955e:	e007      	b.n	8009570 <__sfputs_r+0x22>
 8009560:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009564:	463a      	mov	r2, r7
 8009566:	4630      	mov	r0, r6
 8009568:	f7ff ffda 	bl	8009520 <__sfputc_r>
 800956c:	1c43      	adds	r3, r0, #1
 800956e:	d1f3      	bne.n	8009558 <__sfputs_r+0xa>
 8009570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009574 <_vfiprintf_r>:
 8009574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009578:	460d      	mov	r5, r1
 800957a:	b09d      	sub	sp, #116	; 0x74
 800957c:	4614      	mov	r4, r2
 800957e:	4698      	mov	r8, r3
 8009580:	4606      	mov	r6, r0
 8009582:	b118      	cbz	r0, 800958c <_vfiprintf_r+0x18>
 8009584:	6a03      	ldr	r3, [r0, #32]
 8009586:	b90b      	cbnz	r3, 800958c <_vfiprintf_r+0x18>
 8009588:	f7ff fccc 	bl	8008f24 <__sinit>
 800958c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800958e:	07d9      	lsls	r1, r3, #31
 8009590:	d405      	bmi.n	800959e <_vfiprintf_r+0x2a>
 8009592:	89ab      	ldrh	r3, [r5, #12]
 8009594:	059a      	lsls	r2, r3, #22
 8009596:	d402      	bmi.n	800959e <_vfiprintf_r+0x2a>
 8009598:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800959a:	f7ff feb8 	bl	800930e <__retarget_lock_acquire_recursive>
 800959e:	89ab      	ldrh	r3, [r5, #12]
 80095a0:	071b      	lsls	r3, r3, #28
 80095a2:	d501      	bpl.n	80095a8 <_vfiprintf_r+0x34>
 80095a4:	692b      	ldr	r3, [r5, #16]
 80095a6:	b99b      	cbnz	r3, 80095d0 <_vfiprintf_r+0x5c>
 80095a8:	4629      	mov	r1, r5
 80095aa:	4630      	mov	r0, r6
 80095ac:	f7ff fdde 	bl	800916c <__swsetup_r>
 80095b0:	b170      	cbz	r0, 80095d0 <_vfiprintf_r+0x5c>
 80095b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095b4:	07dc      	lsls	r4, r3, #31
 80095b6:	d504      	bpl.n	80095c2 <_vfiprintf_r+0x4e>
 80095b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095bc:	b01d      	add	sp, #116	; 0x74
 80095be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095c2:	89ab      	ldrh	r3, [r5, #12]
 80095c4:	0598      	lsls	r0, r3, #22
 80095c6:	d4f7      	bmi.n	80095b8 <_vfiprintf_r+0x44>
 80095c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095ca:	f7ff fea1 	bl	8009310 <__retarget_lock_release_recursive>
 80095ce:	e7f3      	b.n	80095b8 <_vfiprintf_r+0x44>
 80095d0:	2300      	movs	r3, #0
 80095d2:	9309      	str	r3, [sp, #36]	; 0x24
 80095d4:	2320      	movs	r3, #32
 80095d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095da:	f8cd 800c 	str.w	r8, [sp, #12]
 80095de:	2330      	movs	r3, #48	; 0x30
 80095e0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009794 <_vfiprintf_r+0x220>
 80095e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095e8:	f04f 0901 	mov.w	r9, #1
 80095ec:	4623      	mov	r3, r4
 80095ee:	469a      	mov	sl, r3
 80095f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095f4:	b10a      	cbz	r2, 80095fa <_vfiprintf_r+0x86>
 80095f6:	2a25      	cmp	r2, #37	; 0x25
 80095f8:	d1f9      	bne.n	80095ee <_vfiprintf_r+0x7a>
 80095fa:	ebba 0b04 	subs.w	fp, sl, r4
 80095fe:	d00b      	beq.n	8009618 <_vfiprintf_r+0xa4>
 8009600:	465b      	mov	r3, fp
 8009602:	4622      	mov	r2, r4
 8009604:	4629      	mov	r1, r5
 8009606:	4630      	mov	r0, r6
 8009608:	f7ff ffa1 	bl	800954e <__sfputs_r>
 800960c:	3001      	adds	r0, #1
 800960e:	f000 80a9 	beq.w	8009764 <_vfiprintf_r+0x1f0>
 8009612:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009614:	445a      	add	r2, fp
 8009616:	9209      	str	r2, [sp, #36]	; 0x24
 8009618:	f89a 3000 	ldrb.w	r3, [sl]
 800961c:	2b00      	cmp	r3, #0
 800961e:	f000 80a1 	beq.w	8009764 <_vfiprintf_r+0x1f0>
 8009622:	2300      	movs	r3, #0
 8009624:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009628:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800962c:	f10a 0a01 	add.w	sl, sl, #1
 8009630:	9304      	str	r3, [sp, #16]
 8009632:	9307      	str	r3, [sp, #28]
 8009634:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009638:	931a      	str	r3, [sp, #104]	; 0x68
 800963a:	4654      	mov	r4, sl
 800963c:	2205      	movs	r2, #5
 800963e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009642:	4854      	ldr	r0, [pc, #336]	; (8009794 <_vfiprintf_r+0x220>)
 8009644:	f7f6 fde4 	bl	8000210 <memchr>
 8009648:	9a04      	ldr	r2, [sp, #16]
 800964a:	b9d8      	cbnz	r0, 8009684 <_vfiprintf_r+0x110>
 800964c:	06d1      	lsls	r1, r2, #27
 800964e:	bf44      	itt	mi
 8009650:	2320      	movmi	r3, #32
 8009652:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009656:	0713      	lsls	r3, r2, #28
 8009658:	bf44      	itt	mi
 800965a:	232b      	movmi	r3, #43	; 0x2b
 800965c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009660:	f89a 3000 	ldrb.w	r3, [sl]
 8009664:	2b2a      	cmp	r3, #42	; 0x2a
 8009666:	d015      	beq.n	8009694 <_vfiprintf_r+0x120>
 8009668:	9a07      	ldr	r2, [sp, #28]
 800966a:	4654      	mov	r4, sl
 800966c:	2000      	movs	r0, #0
 800966e:	f04f 0c0a 	mov.w	ip, #10
 8009672:	4621      	mov	r1, r4
 8009674:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009678:	3b30      	subs	r3, #48	; 0x30
 800967a:	2b09      	cmp	r3, #9
 800967c:	d94d      	bls.n	800971a <_vfiprintf_r+0x1a6>
 800967e:	b1b0      	cbz	r0, 80096ae <_vfiprintf_r+0x13a>
 8009680:	9207      	str	r2, [sp, #28]
 8009682:	e014      	b.n	80096ae <_vfiprintf_r+0x13a>
 8009684:	eba0 0308 	sub.w	r3, r0, r8
 8009688:	fa09 f303 	lsl.w	r3, r9, r3
 800968c:	4313      	orrs	r3, r2
 800968e:	9304      	str	r3, [sp, #16]
 8009690:	46a2      	mov	sl, r4
 8009692:	e7d2      	b.n	800963a <_vfiprintf_r+0xc6>
 8009694:	9b03      	ldr	r3, [sp, #12]
 8009696:	1d19      	adds	r1, r3, #4
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	9103      	str	r1, [sp, #12]
 800969c:	2b00      	cmp	r3, #0
 800969e:	bfbb      	ittet	lt
 80096a0:	425b      	neglt	r3, r3
 80096a2:	f042 0202 	orrlt.w	r2, r2, #2
 80096a6:	9307      	strge	r3, [sp, #28]
 80096a8:	9307      	strlt	r3, [sp, #28]
 80096aa:	bfb8      	it	lt
 80096ac:	9204      	strlt	r2, [sp, #16]
 80096ae:	7823      	ldrb	r3, [r4, #0]
 80096b0:	2b2e      	cmp	r3, #46	; 0x2e
 80096b2:	d10c      	bne.n	80096ce <_vfiprintf_r+0x15a>
 80096b4:	7863      	ldrb	r3, [r4, #1]
 80096b6:	2b2a      	cmp	r3, #42	; 0x2a
 80096b8:	d134      	bne.n	8009724 <_vfiprintf_r+0x1b0>
 80096ba:	9b03      	ldr	r3, [sp, #12]
 80096bc:	1d1a      	adds	r2, r3, #4
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	9203      	str	r2, [sp, #12]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	bfb8      	it	lt
 80096c6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80096ca:	3402      	adds	r4, #2
 80096cc:	9305      	str	r3, [sp, #20]
 80096ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80097a4 <_vfiprintf_r+0x230>
 80096d2:	7821      	ldrb	r1, [r4, #0]
 80096d4:	2203      	movs	r2, #3
 80096d6:	4650      	mov	r0, sl
 80096d8:	f7f6 fd9a 	bl	8000210 <memchr>
 80096dc:	b138      	cbz	r0, 80096ee <_vfiprintf_r+0x17a>
 80096de:	9b04      	ldr	r3, [sp, #16]
 80096e0:	eba0 000a 	sub.w	r0, r0, sl
 80096e4:	2240      	movs	r2, #64	; 0x40
 80096e6:	4082      	lsls	r2, r0
 80096e8:	4313      	orrs	r3, r2
 80096ea:	3401      	adds	r4, #1
 80096ec:	9304      	str	r3, [sp, #16]
 80096ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096f2:	4829      	ldr	r0, [pc, #164]	; (8009798 <_vfiprintf_r+0x224>)
 80096f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096f8:	2206      	movs	r2, #6
 80096fa:	f7f6 fd89 	bl	8000210 <memchr>
 80096fe:	2800      	cmp	r0, #0
 8009700:	d03f      	beq.n	8009782 <_vfiprintf_r+0x20e>
 8009702:	4b26      	ldr	r3, [pc, #152]	; (800979c <_vfiprintf_r+0x228>)
 8009704:	bb1b      	cbnz	r3, 800974e <_vfiprintf_r+0x1da>
 8009706:	9b03      	ldr	r3, [sp, #12]
 8009708:	3307      	adds	r3, #7
 800970a:	f023 0307 	bic.w	r3, r3, #7
 800970e:	3308      	adds	r3, #8
 8009710:	9303      	str	r3, [sp, #12]
 8009712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009714:	443b      	add	r3, r7
 8009716:	9309      	str	r3, [sp, #36]	; 0x24
 8009718:	e768      	b.n	80095ec <_vfiprintf_r+0x78>
 800971a:	fb0c 3202 	mla	r2, ip, r2, r3
 800971e:	460c      	mov	r4, r1
 8009720:	2001      	movs	r0, #1
 8009722:	e7a6      	b.n	8009672 <_vfiprintf_r+0xfe>
 8009724:	2300      	movs	r3, #0
 8009726:	3401      	adds	r4, #1
 8009728:	9305      	str	r3, [sp, #20]
 800972a:	4619      	mov	r1, r3
 800972c:	f04f 0c0a 	mov.w	ip, #10
 8009730:	4620      	mov	r0, r4
 8009732:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009736:	3a30      	subs	r2, #48	; 0x30
 8009738:	2a09      	cmp	r2, #9
 800973a:	d903      	bls.n	8009744 <_vfiprintf_r+0x1d0>
 800973c:	2b00      	cmp	r3, #0
 800973e:	d0c6      	beq.n	80096ce <_vfiprintf_r+0x15a>
 8009740:	9105      	str	r1, [sp, #20]
 8009742:	e7c4      	b.n	80096ce <_vfiprintf_r+0x15a>
 8009744:	fb0c 2101 	mla	r1, ip, r1, r2
 8009748:	4604      	mov	r4, r0
 800974a:	2301      	movs	r3, #1
 800974c:	e7f0      	b.n	8009730 <_vfiprintf_r+0x1bc>
 800974e:	ab03      	add	r3, sp, #12
 8009750:	9300      	str	r3, [sp, #0]
 8009752:	462a      	mov	r2, r5
 8009754:	4b12      	ldr	r3, [pc, #72]	; (80097a0 <_vfiprintf_r+0x22c>)
 8009756:	a904      	add	r1, sp, #16
 8009758:	4630      	mov	r0, r6
 800975a:	f3af 8000 	nop.w
 800975e:	4607      	mov	r7, r0
 8009760:	1c78      	adds	r0, r7, #1
 8009762:	d1d6      	bne.n	8009712 <_vfiprintf_r+0x19e>
 8009764:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009766:	07d9      	lsls	r1, r3, #31
 8009768:	d405      	bmi.n	8009776 <_vfiprintf_r+0x202>
 800976a:	89ab      	ldrh	r3, [r5, #12]
 800976c:	059a      	lsls	r2, r3, #22
 800976e:	d402      	bmi.n	8009776 <_vfiprintf_r+0x202>
 8009770:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009772:	f7ff fdcd 	bl	8009310 <__retarget_lock_release_recursive>
 8009776:	89ab      	ldrh	r3, [r5, #12]
 8009778:	065b      	lsls	r3, r3, #25
 800977a:	f53f af1d 	bmi.w	80095b8 <_vfiprintf_r+0x44>
 800977e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009780:	e71c      	b.n	80095bc <_vfiprintf_r+0x48>
 8009782:	ab03      	add	r3, sp, #12
 8009784:	9300      	str	r3, [sp, #0]
 8009786:	462a      	mov	r2, r5
 8009788:	4b05      	ldr	r3, [pc, #20]	; (80097a0 <_vfiprintf_r+0x22c>)
 800978a:	a904      	add	r1, sp, #16
 800978c:	4630      	mov	r0, r6
 800978e:	f000 f879 	bl	8009884 <_printf_i>
 8009792:	e7e4      	b.n	800975e <_vfiprintf_r+0x1ea>
 8009794:	0800a060 	.word	0x0800a060
 8009798:	0800a06a 	.word	0x0800a06a
 800979c:	00000000 	.word	0x00000000
 80097a0:	0800954f 	.word	0x0800954f
 80097a4:	0800a066 	.word	0x0800a066

080097a8 <_printf_common>:
 80097a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097ac:	4616      	mov	r6, r2
 80097ae:	4699      	mov	r9, r3
 80097b0:	688a      	ldr	r2, [r1, #8]
 80097b2:	690b      	ldr	r3, [r1, #16]
 80097b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097b8:	4293      	cmp	r3, r2
 80097ba:	bfb8      	it	lt
 80097bc:	4613      	movlt	r3, r2
 80097be:	6033      	str	r3, [r6, #0]
 80097c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097c4:	4607      	mov	r7, r0
 80097c6:	460c      	mov	r4, r1
 80097c8:	b10a      	cbz	r2, 80097ce <_printf_common+0x26>
 80097ca:	3301      	adds	r3, #1
 80097cc:	6033      	str	r3, [r6, #0]
 80097ce:	6823      	ldr	r3, [r4, #0]
 80097d0:	0699      	lsls	r1, r3, #26
 80097d2:	bf42      	ittt	mi
 80097d4:	6833      	ldrmi	r3, [r6, #0]
 80097d6:	3302      	addmi	r3, #2
 80097d8:	6033      	strmi	r3, [r6, #0]
 80097da:	6825      	ldr	r5, [r4, #0]
 80097dc:	f015 0506 	ands.w	r5, r5, #6
 80097e0:	d106      	bne.n	80097f0 <_printf_common+0x48>
 80097e2:	f104 0a19 	add.w	sl, r4, #25
 80097e6:	68e3      	ldr	r3, [r4, #12]
 80097e8:	6832      	ldr	r2, [r6, #0]
 80097ea:	1a9b      	subs	r3, r3, r2
 80097ec:	42ab      	cmp	r3, r5
 80097ee:	dc26      	bgt.n	800983e <_printf_common+0x96>
 80097f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80097f4:	1e13      	subs	r3, r2, #0
 80097f6:	6822      	ldr	r2, [r4, #0]
 80097f8:	bf18      	it	ne
 80097fa:	2301      	movne	r3, #1
 80097fc:	0692      	lsls	r2, r2, #26
 80097fe:	d42b      	bmi.n	8009858 <_printf_common+0xb0>
 8009800:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009804:	4649      	mov	r1, r9
 8009806:	4638      	mov	r0, r7
 8009808:	47c0      	blx	r8
 800980a:	3001      	adds	r0, #1
 800980c:	d01e      	beq.n	800984c <_printf_common+0xa4>
 800980e:	6823      	ldr	r3, [r4, #0]
 8009810:	6922      	ldr	r2, [r4, #16]
 8009812:	f003 0306 	and.w	r3, r3, #6
 8009816:	2b04      	cmp	r3, #4
 8009818:	bf02      	ittt	eq
 800981a:	68e5      	ldreq	r5, [r4, #12]
 800981c:	6833      	ldreq	r3, [r6, #0]
 800981e:	1aed      	subeq	r5, r5, r3
 8009820:	68a3      	ldr	r3, [r4, #8]
 8009822:	bf0c      	ite	eq
 8009824:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009828:	2500      	movne	r5, #0
 800982a:	4293      	cmp	r3, r2
 800982c:	bfc4      	itt	gt
 800982e:	1a9b      	subgt	r3, r3, r2
 8009830:	18ed      	addgt	r5, r5, r3
 8009832:	2600      	movs	r6, #0
 8009834:	341a      	adds	r4, #26
 8009836:	42b5      	cmp	r5, r6
 8009838:	d11a      	bne.n	8009870 <_printf_common+0xc8>
 800983a:	2000      	movs	r0, #0
 800983c:	e008      	b.n	8009850 <_printf_common+0xa8>
 800983e:	2301      	movs	r3, #1
 8009840:	4652      	mov	r2, sl
 8009842:	4649      	mov	r1, r9
 8009844:	4638      	mov	r0, r7
 8009846:	47c0      	blx	r8
 8009848:	3001      	adds	r0, #1
 800984a:	d103      	bne.n	8009854 <_printf_common+0xac>
 800984c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009854:	3501      	adds	r5, #1
 8009856:	e7c6      	b.n	80097e6 <_printf_common+0x3e>
 8009858:	18e1      	adds	r1, r4, r3
 800985a:	1c5a      	adds	r2, r3, #1
 800985c:	2030      	movs	r0, #48	; 0x30
 800985e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009862:	4422      	add	r2, r4
 8009864:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009868:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800986c:	3302      	adds	r3, #2
 800986e:	e7c7      	b.n	8009800 <_printf_common+0x58>
 8009870:	2301      	movs	r3, #1
 8009872:	4622      	mov	r2, r4
 8009874:	4649      	mov	r1, r9
 8009876:	4638      	mov	r0, r7
 8009878:	47c0      	blx	r8
 800987a:	3001      	adds	r0, #1
 800987c:	d0e6      	beq.n	800984c <_printf_common+0xa4>
 800987e:	3601      	adds	r6, #1
 8009880:	e7d9      	b.n	8009836 <_printf_common+0x8e>
	...

08009884 <_printf_i>:
 8009884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009888:	7e0f      	ldrb	r7, [r1, #24]
 800988a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800988c:	2f78      	cmp	r7, #120	; 0x78
 800988e:	4691      	mov	r9, r2
 8009890:	4680      	mov	r8, r0
 8009892:	460c      	mov	r4, r1
 8009894:	469a      	mov	sl, r3
 8009896:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800989a:	d807      	bhi.n	80098ac <_printf_i+0x28>
 800989c:	2f62      	cmp	r7, #98	; 0x62
 800989e:	d80a      	bhi.n	80098b6 <_printf_i+0x32>
 80098a0:	2f00      	cmp	r7, #0
 80098a2:	f000 80d4 	beq.w	8009a4e <_printf_i+0x1ca>
 80098a6:	2f58      	cmp	r7, #88	; 0x58
 80098a8:	f000 80c0 	beq.w	8009a2c <_printf_i+0x1a8>
 80098ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80098b4:	e03a      	b.n	800992c <_printf_i+0xa8>
 80098b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80098ba:	2b15      	cmp	r3, #21
 80098bc:	d8f6      	bhi.n	80098ac <_printf_i+0x28>
 80098be:	a101      	add	r1, pc, #4	; (adr r1, 80098c4 <_printf_i+0x40>)
 80098c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80098c4:	0800991d 	.word	0x0800991d
 80098c8:	08009931 	.word	0x08009931
 80098cc:	080098ad 	.word	0x080098ad
 80098d0:	080098ad 	.word	0x080098ad
 80098d4:	080098ad 	.word	0x080098ad
 80098d8:	080098ad 	.word	0x080098ad
 80098dc:	08009931 	.word	0x08009931
 80098e0:	080098ad 	.word	0x080098ad
 80098e4:	080098ad 	.word	0x080098ad
 80098e8:	080098ad 	.word	0x080098ad
 80098ec:	080098ad 	.word	0x080098ad
 80098f0:	08009a35 	.word	0x08009a35
 80098f4:	0800995d 	.word	0x0800995d
 80098f8:	080099ef 	.word	0x080099ef
 80098fc:	080098ad 	.word	0x080098ad
 8009900:	080098ad 	.word	0x080098ad
 8009904:	08009a57 	.word	0x08009a57
 8009908:	080098ad 	.word	0x080098ad
 800990c:	0800995d 	.word	0x0800995d
 8009910:	080098ad 	.word	0x080098ad
 8009914:	080098ad 	.word	0x080098ad
 8009918:	080099f7 	.word	0x080099f7
 800991c:	682b      	ldr	r3, [r5, #0]
 800991e:	1d1a      	adds	r2, r3, #4
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	602a      	str	r2, [r5, #0]
 8009924:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009928:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800992c:	2301      	movs	r3, #1
 800992e:	e09f      	b.n	8009a70 <_printf_i+0x1ec>
 8009930:	6820      	ldr	r0, [r4, #0]
 8009932:	682b      	ldr	r3, [r5, #0]
 8009934:	0607      	lsls	r7, r0, #24
 8009936:	f103 0104 	add.w	r1, r3, #4
 800993a:	6029      	str	r1, [r5, #0]
 800993c:	d501      	bpl.n	8009942 <_printf_i+0xbe>
 800993e:	681e      	ldr	r6, [r3, #0]
 8009940:	e003      	b.n	800994a <_printf_i+0xc6>
 8009942:	0646      	lsls	r6, r0, #25
 8009944:	d5fb      	bpl.n	800993e <_printf_i+0xba>
 8009946:	f9b3 6000 	ldrsh.w	r6, [r3]
 800994a:	2e00      	cmp	r6, #0
 800994c:	da03      	bge.n	8009956 <_printf_i+0xd2>
 800994e:	232d      	movs	r3, #45	; 0x2d
 8009950:	4276      	negs	r6, r6
 8009952:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009956:	485a      	ldr	r0, [pc, #360]	; (8009ac0 <_printf_i+0x23c>)
 8009958:	230a      	movs	r3, #10
 800995a:	e012      	b.n	8009982 <_printf_i+0xfe>
 800995c:	682b      	ldr	r3, [r5, #0]
 800995e:	6820      	ldr	r0, [r4, #0]
 8009960:	1d19      	adds	r1, r3, #4
 8009962:	6029      	str	r1, [r5, #0]
 8009964:	0605      	lsls	r5, r0, #24
 8009966:	d501      	bpl.n	800996c <_printf_i+0xe8>
 8009968:	681e      	ldr	r6, [r3, #0]
 800996a:	e002      	b.n	8009972 <_printf_i+0xee>
 800996c:	0641      	lsls	r1, r0, #25
 800996e:	d5fb      	bpl.n	8009968 <_printf_i+0xe4>
 8009970:	881e      	ldrh	r6, [r3, #0]
 8009972:	4853      	ldr	r0, [pc, #332]	; (8009ac0 <_printf_i+0x23c>)
 8009974:	2f6f      	cmp	r7, #111	; 0x6f
 8009976:	bf0c      	ite	eq
 8009978:	2308      	moveq	r3, #8
 800997a:	230a      	movne	r3, #10
 800997c:	2100      	movs	r1, #0
 800997e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009982:	6865      	ldr	r5, [r4, #4]
 8009984:	60a5      	str	r5, [r4, #8]
 8009986:	2d00      	cmp	r5, #0
 8009988:	bfa2      	ittt	ge
 800998a:	6821      	ldrge	r1, [r4, #0]
 800998c:	f021 0104 	bicge.w	r1, r1, #4
 8009990:	6021      	strge	r1, [r4, #0]
 8009992:	b90e      	cbnz	r6, 8009998 <_printf_i+0x114>
 8009994:	2d00      	cmp	r5, #0
 8009996:	d04b      	beq.n	8009a30 <_printf_i+0x1ac>
 8009998:	4615      	mov	r5, r2
 800999a:	fbb6 f1f3 	udiv	r1, r6, r3
 800999e:	fb03 6711 	mls	r7, r3, r1, r6
 80099a2:	5dc7      	ldrb	r7, [r0, r7]
 80099a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80099a8:	4637      	mov	r7, r6
 80099aa:	42bb      	cmp	r3, r7
 80099ac:	460e      	mov	r6, r1
 80099ae:	d9f4      	bls.n	800999a <_printf_i+0x116>
 80099b0:	2b08      	cmp	r3, #8
 80099b2:	d10b      	bne.n	80099cc <_printf_i+0x148>
 80099b4:	6823      	ldr	r3, [r4, #0]
 80099b6:	07de      	lsls	r6, r3, #31
 80099b8:	d508      	bpl.n	80099cc <_printf_i+0x148>
 80099ba:	6923      	ldr	r3, [r4, #16]
 80099bc:	6861      	ldr	r1, [r4, #4]
 80099be:	4299      	cmp	r1, r3
 80099c0:	bfde      	ittt	le
 80099c2:	2330      	movle	r3, #48	; 0x30
 80099c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80099c8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80099cc:	1b52      	subs	r2, r2, r5
 80099ce:	6122      	str	r2, [r4, #16]
 80099d0:	f8cd a000 	str.w	sl, [sp]
 80099d4:	464b      	mov	r3, r9
 80099d6:	aa03      	add	r2, sp, #12
 80099d8:	4621      	mov	r1, r4
 80099da:	4640      	mov	r0, r8
 80099dc:	f7ff fee4 	bl	80097a8 <_printf_common>
 80099e0:	3001      	adds	r0, #1
 80099e2:	d14a      	bne.n	8009a7a <_printf_i+0x1f6>
 80099e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099e8:	b004      	add	sp, #16
 80099ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ee:	6823      	ldr	r3, [r4, #0]
 80099f0:	f043 0320 	orr.w	r3, r3, #32
 80099f4:	6023      	str	r3, [r4, #0]
 80099f6:	4833      	ldr	r0, [pc, #204]	; (8009ac4 <_printf_i+0x240>)
 80099f8:	2778      	movs	r7, #120	; 0x78
 80099fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80099fe:	6823      	ldr	r3, [r4, #0]
 8009a00:	6829      	ldr	r1, [r5, #0]
 8009a02:	061f      	lsls	r7, r3, #24
 8009a04:	f851 6b04 	ldr.w	r6, [r1], #4
 8009a08:	d402      	bmi.n	8009a10 <_printf_i+0x18c>
 8009a0a:	065f      	lsls	r7, r3, #25
 8009a0c:	bf48      	it	mi
 8009a0e:	b2b6      	uxthmi	r6, r6
 8009a10:	07df      	lsls	r7, r3, #31
 8009a12:	bf48      	it	mi
 8009a14:	f043 0320 	orrmi.w	r3, r3, #32
 8009a18:	6029      	str	r1, [r5, #0]
 8009a1a:	bf48      	it	mi
 8009a1c:	6023      	strmi	r3, [r4, #0]
 8009a1e:	b91e      	cbnz	r6, 8009a28 <_printf_i+0x1a4>
 8009a20:	6823      	ldr	r3, [r4, #0]
 8009a22:	f023 0320 	bic.w	r3, r3, #32
 8009a26:	6023      	str	r3, [r4, #0]
 8009a28:	2310      	movs	r3, #16
 8009a2a:	e7a7      	b.n	800997c <_printf_i+0xf8>
 8009a2c:	4824      	ldr	r0, [pc, #144]	; (8009ac0 <_printf_i+0x23c>)
 8009a2e:	e7e4      	b.n	80099fa <_printf_i+0x176>
 8009a30:	4615      	mov	r5, r2
 8009a32:	e7bd      	b.n	80099b0 <_printf_i+0x12c>
 8009a34:	682b      	ldr	r3, [r5, #0]
 8009a36:	6826      	ldr	r6, [r4, #0]
 8009a38:	6961      	ldr	r1, [r4, #20]
 8009a3a:	1d18      	adds	r0, r3, #4
 8009a3c:	6028      	str	r0, [r5, #0]
 8009a3e:	0635      	lsls	r5, r6, #24
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	d501      	bpl.n	8009a48 <_printf_i+0x1c4>
 8009a44:	6019      	str	r1, [r3, #0]
 8009a46:	e002      	b.n	8009a4e <_printf_i+0x1ca>
 8009a48:	0670      	lsls	r0, r6, #25
 8009a4a:	d5fb      	bpl.n	8009a44 <_printf_i+0x1c0>
 8009a4c:	8019      	strh	r1, [r3, #0]
 8009a4e:	2300      	movs	r3, #0
 8009a50:	6123      	str	r3, [r4, #16]
 8009a52:	4615      	mov	r5, r2
 8009a54:	e7bc      	b.n	80099d0 <_printf_i+0x14c>
 8009a56:	682b      	ldr	r3, [r5, #0]
 8009a58:	1d1a      	adds	r2, r3, #4
 8009a5a:	602a      	str	r2, [r5, #0]
 8009a5c:	681d      	ldr	r5, [r3, #0]
 8009a5e:	6862      	ldr	r2, [r4, #4]
 8009a60:	2100      	movs	r1, #0
 8009a62:	4628      	mov	r0, r5
 8009a64:	f7f6 fbd4 	bl	8000210 <memchr>
 8009a68:	b108      	cbz	r0, 8009a6e <_printf_i+0x1ea>
 8009a6a:	1b40      	subs	r0, r0, r5
 8009a6c:	6060      	str	r0, [r4, #4]
 8009a6e:	6863      	ldr	r3, [r4, #4]
 8009a70:	6123      	str	r3, [r4, #16]
 8009a72:	2300      	movs	r3, #0
 8009a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a78:	e7aa      	b.n	80099d0 <_printf_i+0x14c>
 8009a7a:	6923      	ldr	r3, [r4, #16]
 8009a7c:	462a      	mov	r2, r5
 8009a7e:	4649      	mov	r1, r9
 8009a80:	4640      	mov	r0, r8
 8009a82:	47d0      	blx	sl
 8009a84:	3001      	adds	r0, #1
 8009a86:	d0ad      	beq.n	80099e4 <_printf_i+0x160>
 8009a88:	6823      	ldr	r3, [r4, #0]
 8009a8a:	079b      	lsls	r3, r3, #30
 8009a8c:	d413      	bmi.n	8009ab6 <_printf_i+0x232>
 8009a8e:	68e0      	ldr	r0, [r4, #12]
 8009a90:	9b03      	ldr	r3, [sp, #12]
 8009a92:	4298      	cmp	r0, r3
 8009a94:	bfb8      	it	lt
 8009a96:	4618      	movlt	r0, r3
 8009a98:	e7a6      	b.n	80099e8 <_printf_i+0x164>
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	4632      	mov	r2, r6
 8009a9e:	4649      	mov	r1, r9
 8009aa0:	4640      	mov	r0, r8
 8009aa2:	47d0      	blx	sl
 8009aa4:	3001      	adds	r0, #1
 8009aa6:	d09d      	beq.n	80099e4 <_printf_i+0x160>
 8009aa8:	3501      	adds	r5, #1
 8009aaa:	68e3      	ldr	r3, [r4, #12]
 8009aac:	9903      	ldr	r1, [sp, #12]
 8009aae:	1a5b      	subs	r3, r3, r1
 8009ab0:	42ab      	cmp	r3, r5
 8009ab2:	dcf2      	bgt.n	8009a9a <_printf_i+0x216>
 8009ab4:	e7eb      	b.n	8009a8e <_printf_i+0x20a>
 8009ab6:	2500      	movs	r5, #0
 8009ab8:	f104 0619 	add.w	r6, r4, #25
 8009abc:	e7f5      	b.n	8009aaa <_printf_i+0x226>
 8009abe:	bf00      	nop
 8009ac0:	0800a071 	.word	0x0800a071
 8009ac4:	0800a082 	.word	0x0800a082

08009ac8 <__sflush_r>:
 8009ac8:	898a      	ldrh	r2, [r1, #12]
 8009aca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ace:	4605      	mov	r5, r0
 8009ad0:	0710      	lsls	r0, r2, #28
 8009ad2:	460c      	mov	r4, r1
 8009ad4:	d458      	bmi.n	8009b88 <__sflush_r+0xc0>
 8009ad6:	684b      	ldr	r3, [r1, #4]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	dc05      	bgt.n	8009ae8 <__sflush_r+0x20>
 8009adc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	dc02      	bgt.n	8009ae8 <__sflush_r+0x20>
 8009ae2:	2000      	movs	r0, #0
 8009ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ae8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009aea:	2e00      	cmp	r6, #0
 8009aec:	d0f9      	beq.n	8009ae2 <__sflush_r+0x1a>
 8009aee:	2300      	movs	r3, #0
 8009af0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009af4:	682f      	ldr	r7, [r5, #0]
 8009af6:	6a21      	ldr	r1, [r4, #32]
 8009af8:	602b      	str	r3, [r5, #0]
 8009afa:	d032      	beq.n	8009b62 <__sflush_r+0x9a>
 8009afc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009afe:	89a3      	ldrh	r3, [r4, #12]
 8009b00:	075a      	lsls	r2, r3, #29
 8009b02:	d505      	bpl.n	8009b10 <__sflush_r+0x48>
 8009b04:	6863      	ldr	r3, [r4, #4]
 8009b06:	1ac0      	subs	r0, r0, r3
 8009b08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b0a:	b10b      	cbz	r3, 8009b10 <__sflush_r+0x48>
 8009b0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b0e:	1ac0      	subs	r0, r0, r3
 8009b10:	2300      	movs	r3, #0
 8009b12:	4602      	mov	r2, r0
 8009b14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b16:	6a21      	ldr	r1, [r4, #32]
 8009b18:	4628      	mov	r0, r5
 8009b1a:	47b0      	blx	r6
 8009b1c:	1c43      	adds	r3, r0, #1
 8009b1e:	89a3      	ldrh	r3, [r4, #12]
 8009b20:	d106      	bne.n	8009b30 <__sflush_r+0x68>
 8009b22:	6829      	ldr	r1, [r5, #0]
 8009b24:	291d      	cmp	r1, #29
 8009b26:	d82b      	bhi.n	8009b80 <__sflush_r+0xb8>
 8009b28:	4a29      	ldr	r2, [pc, #164]	; (8009bd0 <__sflush_r+0x108>)
 8009b2a:	410a      	asrs	r2, r1
 8009b2c:	07d6      	lsls	r6, r2, #31
 8009b2e:	d427      	bmi.n	8009b80 <__sflush_r+0xb8>
 8009b30:	2200      	movs	r2, #0
 8009b32:	6062      	str	r2, [r4, #4]
 8009b34:	04d9      	lsls	r1, r3, #19
 8009b36:	6922      	ldr	r2, [r4, #16]
 8009b38:	6022      	str	r2, [r4, #0]
 8009b3a:	d504      	bpl.n	8009b46 <__sflush_r+0x7e>
 8009b3c:	1c42      	adds	r2, r0, #1
 8009b3e:	d101      	bne.n	8009b44 <__sflush_r+0x7c>
 8009b40:	682b      	ldr	r3, [r5, #0]
 8009b42:	b903      	cbnz	r3, 8009b46 <__sflush_r+0x7e>
 8009b44:	6560      	str	r0, [r4, #84]	; 0x54
 8009b46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b48:	602f      	str	r7, [r5, #0]
 8009b4a:	2900      	cmp	r1, #0
 8009b4c:	d0c9      	beq.n	8009ae2 <__sflush_r+0x1a>
 8009b4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b52:	4299      	cmp	r1, r3
 8009b54:	d002      	beq.n	8009b5c <__sflush_r+0x94>
 8009b56:	4628      	mov	r0, r5
 8009b58:	f7ff fbea 	bl	8009330 <_free_r>
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	6360      	str	r0, [r4, #52]	; 0x34
 8009b60:	e7c0      	b.n	8009ae4 <__sflush_r+0x1c>
 8009b62:	2301      	movs	r3, #1
 8009b64:	4628      	mov	r0, r5
 8009b66:	47b0      	blx	r6
 8009b68:	1c41      	adds	r1, r0, #1
 8009b6a:	d1c8      	bne.n	8009afe <__sflush_r+0x36>
 8009b6c:	682b      	ldr	r3, [r5, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d0c5      	beq.n	8009afe <__sflush_r+0x36>
 8009b72:	2b1d      	cmp	r3, #29
 8009b74:	d001      	beq.n	8009b7a <__sflush_r+0xb2>
 8009b76:	2b16      	cmp	r3, #22
 8009b78:	d101      	bne.n	8009b7e <__sflush_r+0xb6>
 8009b7a:	602f      	str	r7, [r5, #0]
 8009b7c:	e7b1      	b.n	8009ae2 <__sflush_r+0x1a>
 8009b7e:	89a3      	ldrh	r3, [r4, #12]
 8009b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b84:	81a3      	strh	r3, [r4, #12]
 8009b86:	e7ad      	b.n	8009ae4 <__sflush_r+0x1c>
 8009b88:	690f      	ldr	r7, [r1, #16]
 8009b8a:	2f00      	cmp	r7, #0
 8009b8c:	d0a9      	beq.n	8009ae2 <__sflush_r+0x1a>
 8009b8e:	0793      	lsls	r3, r2, #30
 8009b90:	680e      	ldr	r6, [r1, #0]
 8009b92:	bf08      	it	eq
 8009b94:	694b      	ldreq	r3, [r1, #20]
 8009b96:	600f      	str	r7, [r1, #0]
 8009b98:	bf18      	it	ne
 8009b9a:	2300      	movne	r3, #0
 8009b9c:	eba6 0807 	sub.w	r8, r6, r7
 8009ba0:	608b      	str	r3, [r1, #8]
 8009ba2:	f1b8 0f00 	cmp.w	r8, #0
 8009ba6:	dd9c      	ble.n	8009ae2 <__sflush_r+0x1a>
 8009ba8:	6a21      	ldr	r1, [r4, #32]
 8009baa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009bac:	4643      	mov	r3, r8
 8009bae:	463a      	mov	r2, r7
 8009bb0:	4628      	mov	r0, r5
 8009bb2:	47b0      	blx	r6
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	dc06      	bgt.n	8009bc6 <__sflush_r+0xfe>
 8009bb8:	89a3      	ldrh	r3, [r4, #12]
 8009bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bbe:	81a3      	strh	r3, [r4, #12]
 8009bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bc4:	e78e      	b.n	8009ae4 <__sflush_r+0x1c>
 8009bc6:	4407      	add	r7, r0
 8009bc8:	eba8 0800 	sub.w	r8, r8, r0
 8009bcc:	e7e9      	b.n	8009ba2 <__sflush_r+0xda>
 8009bce:	bf00      	nop
 8009bd0:	dfbffffe 	.word	0xdfbffffe

08009bd4 <_fflush_r>:
 8009bd4:	b538      	push	{r3, r4, r5, lr}
 8009bd6:	690b      	ldr	r3, [r1, #16]
 8009bd8:	4605      	mov	r5, r0
 8009bda:	460c      	mov	r4, r1
 8009bdc:	b913      	cbnz	r3, 8009be4 <_fflush_r+0x10>
 8009bde:	2500      	movs	r5, #0
 8009be0:	4628      	mov	r0, r5
 8009be2:	bd38      	pop	{r3, r4, r5, pc}
 8009be4:	b118      	cbz	r0, 8009bee <_fflush_r+0x1a>
 8009be6:	6a03      	ldr	r3, [r0, #32]
 8009be8:	b90b      	cbnz	r3, 8009bee <_fflush_r+0x1a>
 8009bea:	f7ff f99b 	bl	8008f24 <__sinit>
 8009bee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d0f3      	beq.n	8009bde <_fflush_r+0xa>
 8009bf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009bf8:	07d0      	lsls	r0, r2, #31
 8009bfa:	d404      	bmi.n	8009c06 <_fflush_r+0x32>
 8009bfc:	0599      	lsls	r1, r3, #22
 8009bfe:	d402      	bmi.n	8009c06 <_fflush_r+0x32>
 8009c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c02:	f7ff fb84 	bl	800930e <__retarget_lock_acquire_recursive>
 8009c06:	4628      	mov	r0, r5
 8009c08:	4621      	mov	r1, r4
 8009c0a:	f7ff ff5d 	bl	8009ac8 <__sflush_r>
 8009c0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c10:	07da      	lsls	r2, r3, #31
 8009c12:	4605      	mov	r5, r0
 8009c14:	d4e4      	bmi.n	8009be0 <_fflush_r+0xc>
 8009c16:	89a3      	ldrh	r3, [r4, #12]
 8009c18:	059b      	lsls	r3, r3, #22
 8009c1a:	d4e1      	bmi.n	8009be0 <_fflush_r+0xc>
 8009c1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c1e:	f7ff fb77 	bl	8009310 <__retarget_lock_release_recursive>
 8009c22:	e7dd      	b.n	8009be0 <_fflush_r+0xc>

08009c24 <__swhatbuf_r>:
 8009c24:	b570      	push	{r4, r5, r6, lr}
 8009c26:	460c      	mov	r4, r1
 8009c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c2c:	2900      	cmp	r1, #0
 8009c2e:	b096      	sub	sp, #88	; 0x58
 8009c30:	4615      	mov	r5, r2
 8009c32:	461e      	mov	r6, r3
 8009c34:	da0d      	bge.n	8009c52 <__swhatbuf_r+0x2e>
 8009c36:	89a3      	ldrh	r3, [r4, #12]
 8009c38:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009c3c:	f04f 0100 	mov.w	r1, #0
 8009c40:	bf0c      	ite	eq
 8009c42:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009c46:	2340      	movne	r3, #64	; 0x40
 8009c48:	2000      	movs	r0, #0
 8009c4a:	6031      	str	r1, [r6, #0]
 8009c4c:	602b      	str	r3, [r5, #0]
 8009c4e:	b016      	add	sp, #88	; 0x58
 8009c50:	bd70      	pop	{r4, r5, r6, pc}
 8009c52:	466a      	mov	r2, sp
 8009c54:	f000 f848 	bl	8009ce8 <_fstat_r>
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	dbec      	blt.n	8009c36 <__swhatbuf_r+0x12>
 8009c5c:	9901      	ldr	r1, [sp, #4]
 8009c5e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009c62:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009c66:	4259      	negs	r1, r3
 8009c68:	4159      	adcs	r1, r3
 8009c6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c6e:	e7eb      	b.n	8009c48 <__swhatbuf_r+0x24>

08009c70 <__smakebuf_r>:
 8009c70:	898b      	ldrh	r3, [r1, #12]
 8009c72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c74:	079d      	lsls	r5, r3, #30
 8009c76:	4606      	mov	r6, r0
 8009c78:	460c      	mov	r4, r1
 8009c7a:	d507      	bpl.n	8009c8c <__smakebuf_r+0x1c>
 8009c7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c80:	6023      	str	r3, [r4, #0]
 8009c82:	6123      	str	r3, [r4, #16]
 8009c84:	2301      	movs	r3, #1
 8009c86:	6163      	str	r3, [r4, #20]
 8009c88:	b002      	add	sp, #8
 8009c8a:	bd70      	pop	{r4, r5, r6, pc}
 8009c8c:	ab01      	add	r3, sp, #4
 8009c8e:	466a      	mov	r2, sp
 8009c90:	f7ff ffc8 	bl	8009c24 <__swhatbuf_r>
 8009c94:	9900      	ldr	r1, [sp, #0]
 8009c96:	4605      	mov	r5, r0
 8009c98:	4630      	mov	r0, r6
 8009c9a:	f7ff fbb5 	bl	8009408 <_malloc_r>
 8009c9e:	b948      	cbnz	r0, 8009cb4 <__smakebuf_r+0x44>
 8009ca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ca4:	059a      	lsls	r2, r3, #22
 8009ca6:	d4ef      	bmi.n	8009c88 <__smakebuf_r+0x18>
 8009ca8:	f023 0303 	bic.w	r3, r3, #3
 8009cac:	f043 0302 	orr.w	r3, r3, #2
 8009cb0:	81a3      	strh	r3, [r4, #12]
 8009cb2:	e7e3      	b.n	8009c7c <__smakebuf_r+0xc>
 8009cb4:	89a3      	ldrh	r3, [r4, #12]
 8009cb6:	6020      	str	r0, [r4, #0]
 8009cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cbc:	81a3      	strh	r3, [r4, #12]
 8009cbe:	9b00      	ldr	r3, [sp, #0]
 8009cc0:	6163      	str	r3, [r4, #20]
 8009cc2:	9b01      	ldr	r3, [sp, #4]
 8009cc4:	6120      	str	r0, [r4, #16]
 8009cc6:	b15b      	cbz	r3, 8009ce0 <__smakebuf_r+0x70>
 8009cc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ccc:	4630      	mov	r0, r6
 8009cce:	f000 f81d 	bl	8009d0c <_isatty_r>
 8009cd2:	b128      	cbz	r0, 8009ce0 <__smakebuf_r+0x70>
 8009cd4:	89a3      	ldrh	r3, [r4, #12]
 8009cd6:	f023 0303 	bic.w	r3, r3, #3
 8009cda:	f043 0301 	orr.w	r3, r3, #1
 8009cde:	81a3      	strh	r3, [r4, #12]
 8009ce0:	89a3      	ldrh	r3, [r4, #12]
 8009ce2:	431d      	orrs	r5, r3
 8009ce4:	81a5      	strh	r5, [r4, #12]
 8009ce6:	e7cf      	b.n	8009c88 <__smakebuf_r+0x18>

08009ce8 <_fstat_r>:
 8009ce8:	b538      	push	{r3, r4, r5, lr}
 8009cea:	4d07      	ldr	r5, [pc, #28]	; (8009d08 <_fstat_r+0x20>)
 8009cec:	2300      	movs	r3, #0
 8009cee:	4604      	mov	r4, r0
 8009cf0:	4608      	mov	r0, r1
 8009cf2:	4611      	mov	r1, r2
 8009cf4:	602b      	str	r3, [r5, #0]
 8009cf6:	f7f8 f99a 	bl	800202e <_fstat>
 8009cfa:	1c43      	adds	r3, r0, #1
 8009cfc:	d102      	bne.n	8009d04 <_fstat_r+0x1c>
 8009cfe:	682b      	ldr	r3, [r5, #0]
 8009d00:	b103      	cbz	r3, 8009d04 <_fstat_r+0x1c>
 8009d02:	6023      	str	r3, [r4, #0]
 8009d04:	bd38      	pop	{r3, r4, r5, pc}
 8009d06:	bf00      	nop
 8009d08:	20004cfc 	.word	0x20004cfc

08009d0c <_isatty_r>:
 8009d0c:	b538      	push	{r3, r4, r5, lr}
 8009d0e:	4d06      	ldr	r5, [pc, #24]	; (8009d28 <_isatty_r+0x1c>)
 8009d10:	2300      	movs	r3, #0
 8009d12:	4604      	mov	r4, r0
 8009d14:	4608      	mov	r0, r1
 8009d16:	602b      	str	r3, [r5, #0]
 8009d18:	f7f8 f999 	bl	800204e <_isatty>
 8009d1c:	1c43      	adds	r3, r0, #1
 8009d1e:	d102      	bne.n	8009d26 <_isatty_r+0x1a>
 8009d20:	682b      	ldr	r3, [r5, #0]
 8009d22:	b103      	cbz	r3, 8009d26 <_isatty_r+0x1a>
 8009d24:	6023      	str	r3, [r4, #0]
 8009d26:	bd38      	pop	{r3, r4, r5, pc}
 8009d28:	20004cfc 	.word	0x20004cfc

08009d2c <_sbrk_r>:
 8009d2c:	b538      	push	{r3, r4, r5, lr}
 8009d2e:	4d06      	ldr	r5, [pc, #24]	; (8009d48 <_sbrk_r+0x1c>)
 8009d30:	2300      	movs	r3, #0
 8009d32:	4604      	mov	r4, r0
 8009d34:	4608      	mov	r0, r1
 8009d36:	602b      	str	r3, [r5, #0]
 8009d38:	f7f8 f9a2 	bl	8002080 <_sbrk>
 8009d3c:	1c43      	adds	r3, r0, #1
 8009d3e:	d102      	bne.n	8009d46 <_sbrk_r+0x1a>
 8009d40:	682b      	ldr	r3, [r5, #0]
 8009d42:	b103      	cbz	r3, 8009d46 <_sbrk_r+0x1a>
 8009d44:	6023      	str	r3, [r4, #0]
 8009d46:	bd38      	pop	{r3, r4, r5, pc}
 8009d48:	20004cfc 	.word	0x20004cfc

08009d4c <_init>:
 8009d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d4e:	bf00      	nop
 8009d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d52:	bc08      	pop	{r3}
 8009d54:	469e      	mov	lr, r3
 8009d56:	4770      	bx	lr

08009d58 <_fini>:
 8009d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d5a:	bf00      	nop
 8009d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d5e:	bc08      	pop	{r3}
 8009d60:	469e      	mov	lr, r3
 8009d62:	4770      	bx	lr
